
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08006071 	.word	0x08006071
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	080022c1 	.word	0x080022c1
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	080023c1 	.word	0x080023c1
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	@ (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	@ (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	@ (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	@ 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	@ 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f002 f814 	bl	8002230 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f002 fa0a 	bl	8002620 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	@ (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	@ (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	@ (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	@ (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800022c:	4919      	ldr	r1, [pc, #100]	@ (8000294 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800022e:	4a1a      	ldr	r2, [pc, #104]	@ (8000298 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000230:	4b1a      	ldr	r3, [pc, #104]	@ (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000242:	4917      	ldr	r1, [pc, #92]	@ (80002a0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000244:	4a17      	ldr	r2, [pc, #92]	@ (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f002 f806 	bl	8002260 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f001 fff4 	bl	8002240 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000258:	4c13      	ldr	r4, [pc, #76]	@ (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800025a:	4d14      	ldr	r5, [pc, #80]	@ (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f00a fcaa 	bl	800abc0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800026c:	4c10      	ldr	r4, [pc, #64]	@ (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800026e:	4d11      	ldr	r5, [pc, #68]	@ (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f001 bfe8 	b.w	8002250 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000294:	0800d3cc 	.word	0x0800d3cc
                ldr     r2, =_data_start
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800029c:	200008e0 	.word	0x200008e0
                ldr     r1, =_bss_start
 80002a0:	200008e0 	.word	0x200008e0
                ldr     r2, =_bss_end
 80002a4:	20001458 	.word	0x20001458
                ldr     r4, =__init_array_start
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f004 ff50 	bl	8005180 <chThdExit>

080002e0 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e0:	f003 fe36 	bl	8003f50 <chSchDoReschedule>

080002e4 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e4:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e6:	e7fe      	b.n	80002e6 <_port_exit_from_isr+0x2>

080002e8 <strncpy>:
 80002e8:	ea40 0301 	orr.w	r3, r0, r1
 80002ec:	079b      	lsls	r3, r3, #30
 80002ee:	b510      	push	{r4, lr}
 80002f0:	d101      	bne.n	80002f6 <strncpy+0xe>
 80002f2:	2a03      	cmp	r2, #3
 80002f4:	d817      	bhi.n	8000326 <strncpy+0x3e>
 80002f6:	4684      	mov	ip, r0
 80002f8:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
 80002fc:	e007      	b.n	800030e <strncpy+0x26>
 80002fe:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8000302:	f803 1b01 	strb.w	r1, [r3], #1
 8000306:	1e54      	subs	r4, r2, #1
 8000308:	b129      	cbz	r1, 8000316 <strncpy+0x2e>
 800030a:	469c      	mov	ip, r3
 800030c:	4622      	mov	r2, r4
 800030e:	4663      	mov	r3, ip
 8000310:	2a00      	cmp	r2, #0
 8000312:	d1f4      	bne.n	80002fe <strncpy+0x16>
 8000314:	bd10      	pop	{r4, pc}
 8000316:	4494      	add	ip, r2
 8000318:	2c00      	cmp	r4, #0
 800031a:	d0fb      	beq.n	8000314 <strncpy+0x2c>
 800031c:	f803 1b01 	strb.w	r1, [r3], #1
 8000320:	4563      	cmp	r3, ip
 8000322:	d1fb      	bne.n	800031c <strncpy+0x34>
 8000324:	bd10      	pop	{r4, pc}
 8000326:	468e      	mov	lr, r1
 8000328:	4684      	mov	ip, r0
 800032a:	f8de 4000 	ldr.w	r4, [lr]
 800032e:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
 8000332:	ea23 0304 	bic.w	r3, r3, r4
 8000336:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
 800033a:	4671      	mov	r1, lr
 800033c:	f10e 0e04 	add.w	lr, lr, #4
 8000340:	d1da      	bne.n	80002f8 <strncpy+0x10>
 8000342:	3a04      	subs	r2, #4
 8000344:	2a03      	cmp	r2, #3
 8000346:	f84c 4b04 	str.w	r4, [ip], #4
 800034a:	d8ee      	bhi.n	800032a <strncpy+0x42>
 800034c:	4671      	mov	r1, lr
 800034e:	e7d3      	b.n	80002f8 <strncpy+0x10>

08000350 <memset>:
 8000350:	0783      	lsls	r3, r0, #30
 8000352:	b530      	push	{r4, r5, lr}
 8000354:	d047      	beq.n	80003e6 <memset+0x96>
 8000356:	1e54      	subs	r4, r2, #1
 8000358:	2a00      	cmp	r2, #0
 800035a:	d03e      	beq.n	80003da <memset+0x8a>
 800035c:	b2ca      	uxtb	r2, r1
 800035e:	4603      	mov	r3, r0
 8000360:	e001      	b.n	8000366 <memset+0x16>
 8000362:	3c01      	subs	r4, #1
 8000364:	d339      	bcc.n	80003da <memset+0x8a>
 8000366:	f803 2b01 	strb.w	r2, [r3], #1
 800036a:	079d      	lsls	r5, r3, #30
 800036c:	d1f9      	bne.n	8000362 <memset+0x12>
 800036e:	2c03      	cmp	r4, #3
 8000370:	d92c      	bls.n	80003cc <memset+0x7c>
 8000372:	b2cd      	uxtb	r5, r1
 8000374:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8000378:	2c0f      	cmp	r4, #15
 800037a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 800037e:	d935      	bls.n	80003ec <memset+0x9c>
 8000380:	f1a4 0210 	sub.w	r2, r4, #16
 8000384:	f022 0c0f 	bic.w	ip, r2, #15
 8000388:	f103 0e10 	add.w	lr, r3, #16
 800038c:	44e6      	add	lr, ip
 800038e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8000392:	461a      	mov	r2, r3
 8000394:	e9c2 5500 	strd	r5, r5, [r2]
 8000398:	e9c2 5502 	strd	r5, r5, [r2, #8]
 800039c:	3210      	adds	r2, #16
 800039e:	4572      	cmp	r2, lr
 80003a0:	d1f8      	bne.n	8000394 <memset+0x44>
 80003a2:	f10c 0201 	add.w	r2, ip, #1
 80003a6:	f014 0f0c 	tst.w	r4, #12
 80003aa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80003ae:	f004 0c0f 	and.w	ip, r4, #15
 80003b2:	d013      	beq.n	80003dc <memset+0x8c>
 80003b4:	f1ac 0304 	sub.w	r3, ip, #4
 80003b8:	f023 0303 	bic.w	r3, r3, #3
 80003bc:	3304      	adds	r3, #4
 80003be:	4413      	add	r3, r2
 80003c0:	f842 5b04 	str.w	r5, [r2], #4
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d1fb      	bne.n	80003c0 <memset+0x70>
 80003c8:	f00c 0403 	and.w	r4, ip, #3
 80003cc:	b12c      	cbz	r4, 80003da <memset+0x8a>
 80003ce:	b2c9      	uxtb	r1, r1
 80003d0:	441c      	add	r4, r3
 80003d2:	f803 1b01 	strb.w	r1, [r3], #1
 80003d6:	42a3      	cmp	r3, r4
 80003d8:	d1fb      	bne.n	80003d2 <memset+0x82>
 80003da:	bd30      	pop	{r4, r5, pc}
 80003dc:	4664      	mov	r4, ip
 80003de:	4613      	mov	r3, r2
 80003e0:	2c00      	cmp	r4, #0
 80003e2:	d1f4      	bne.n	80003ce <memset+0x7e>
 80003e4:	e7f9      	b.n	80003da <memset+0x8a>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4614      	mov	r4, r2
 80003ea:	e7c0      	b.n	800036e <memset+0x1e>
 80003ec:	461a      	mov	r2, r3
 80003ee:	46a4      	mov	ip, r4
 80003f0:	e7e0      	b.n	80003b4 <memset+0x64>
 80003f2:	bf00      	nop
	...

08000400 <strcmp>:
 8000400:	7802      	ldrb	r2, [r0, #0]
 8000402:	780b      	ldrb	r3, [r1, #0]
 8000404:	2a01      	cmp	r2, #1
 8000406:	bf28      	it	cs
 8000408:	429a      	cmpcs	r2, r3
 800040a:	f040 80d8 	bne.w	80005be <strcmp+0x1be>
 800040e:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000412:	ea40 0401 	orr.w	r4, r0, r1
 8000416:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800041a:	f06f 0c00 	mvn.w	ip, #0
 800041e:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000422:	b31a      	cbz	r2, 800046c <strcmp+0x6c>
 8000424:	ea80 0401 	eor.w	r4, r0, r1
 8000428:	f014 0f07 	tst.w	r4, #7
 800042c:	d16b      	bne.n	8000506 <strcmp+0x106>
 800042e:	f000 0407 	and.w	r4, r0, #7
 8000432:	f020 0007 	bic.w	r0, r0, #7
 8000436:	f004 0503 	and.w	r5, r4, #3
 800043a:	f021 0107 	bic.w	r1, r1, #7
 800043e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000442:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000446:	f014 0f04 	tst.w	r4, #4
 800044a:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 800044e:	fa0c f405 	lsl.w	r4, ip, r5
 8000452:	ea62 0204 	orn	r2, r2, r4
 8000456:	ea66 0604 	orn	r6, r6, r4
 800045a:	d00b      	beq.n	8000474 <strcmp+0x74>
 800045c:	ea63 0304 	orn	r3, r3, r4
 8000460:	4662      	mov	r2, ip
 8000462:	ea67 0704 	orn	r7, r7, r4
 8000466:	4666      	mov	r6, ip
 8000468:	e004      	b.n	8000474 <strcmp+0x74>
 800046a:	bf00      	nop
 800046c:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000470:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000474:	fa82 f54c 	uadd8	r5, r2, ip
 8000478:	ea82 0406 	eor.w	r4, r2, r6
 800047c:	faa4 f48c 	sel	r4, r4, ip
 8000480:	bb6c      	cbnz	r4, 80004de <strcmp+0xde>
 8000482:	fa83 f54c 	uadd8	r5, r3, ip
 8000486:	ea83 0507 	eor.w	r5, r3, r7
 800048a:	faa5 f58c 	sel	r5, r5, ip
 800048e:	b995      	cbnz	r5, 80004b6 <strcmp+0xb6>
 8000490:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000494:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8000498:	fa82 f54c 	uadd8	r5, r2, ip
 800049c:	ea82 0406 	eor.w	r4, r2, r6
 80004a0:	faa4 f48c 	sel	r4, r4, ip
 80004a4:	fa83 f54c 	uadd8	r5, r3, ip
 80004a8:	ea83 0507 	eor.w	r5, r3, r7
 80004ac:	faa5 f58c 	sel	r5, r5, ip
 80004b0:	4325      	orrs	r5, r4
 80004b2:	d0db      	beq.n	800046c <strcmp+0x6c>
 80004b4:	b99c      	cbnz	r4, 80004de <strcmp+0xde>
 80004b6:	ba2d      	rev	r5, r5
 80004b8:	fab5 f485 	clz	r4, r5
 80004bc:	f024 0407 	bic.w	r4, r4, #7
 80004c0:	fa27 f104 	lsr.w	r1, r7, r4
 80004c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80004c8:	fa23 f304 	lsr.w	r3, r3, r4
 80004cc:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 80004d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80004d4:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004d8:	eba0 0001 	sub.w	r0, r0, r1
 80004dc:	4770      	bx	lr
 80004de:	ba24      	rev	r4, r4
 80004e0:	fab4 f484 	clz	r4, r4
 80004e4:	f024 0407 	bic.w	r4, r4, #7
 80004e8:	fa26 f104 	lsr.w	r1, r6, r4
 80004ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80004f0:	fa22 f204 	lsr.w	r2, r2, r4
 80004f4:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 80004f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80004fc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000500:	eba0 0001 	sub.w	r0, r0, r1
 8000504:	4770      	bx	lr
 8000506:	f014 0f03 	tst.w	r4, #3
 800050a:	d13c      	bne.n	8000586 <strcmp+0x186>
 800050c:	f010 0403 	ands.w	r4, r0, #3
 8000510:	d128      	bne.n	8000564 <strcmp+0x164>
 8000512:	f850 2b08 	ldr.w	r2, [r0], #8
 8000516:	f851 3b08 	ldr.w	r3, [r1], #8
 800051a:	fa82 f54c 	uadd8	r5, r2, ip
 800051e:	ea82 0503 	eor.w	r5, r2, r3
 8000522:	faa5 f58c 	sel	r5, r5, ip
 8000526:	b95d      	cbnz	r5, 8000540 <strcmp+0x140>
 8000528:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800052c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000530:	fa82 f54c 	uadd8	r5, r2, ip
 8000534:	ea82 0503 	eor.w	r5, r2, r3
 8000538:	faa5 f58c 	sel	r5, r5, ip
 800053c:	2d00      	cmp	r5, #0
 800053e:	d0e8      	beq.n	8000512 <strcmp+0x112>
 8000540:	ba2d      	rev	r5, r5
 8000542:	fab5 f485 	clz	r4, r5
 8000546:	f024 0407 	bic.w	r4, r4, #7
 800054a:	fa23 f104 	lsr.w	r1, r3, r4
 800054e:	fa22 f204 	lsr.w	r2, r2, r4
 8000552:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 8000556:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800055a:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800055e:	eba0 0001 	sub.w	r0, r0, r1
 8000562:	4770      	bx	lr
 8000564:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8000568:	f020 0003 	bic.w	r0, r0, #3
 800056c:	f850 2b08 	ldr.w	r2, [r0], #8
 8000570:	f021 0103 	bic.w	r1, r1, #3
 8000574:	f851 3b08 	ldr.w	r3, [r1], #8
 8000578:	fa0c f404 	lsl.w	r4, ip, r4
 800057c:	ea62 0204 	orn	r2, r2, r4
 8000580:	ea63 0304 	orn	r3, r3, r4
 8000584:	e7c9      	b.n	800051a <strcmp+0x11a>
 8000586:	f010 0403 	ands.w	r4, r0, #3
 800058a:	d01d      	beq.n	80005c8 <strcmp+0x1c8>
 800058c:	eba1 0104 	sub.w	r1, r1, r4
 8000590:	f020 0003 	bic.w	r0, r0, #3
 8000594:	07e4      	lsls	r4, r4, #31
 8000596:	f850 2b04 	ldr.w	r2, [r0], #4
 800059a:	d006      	beq.n	80005aa <strcmp+0x1aa>
 800059c:	d212      	bcs.n	80005c4 <strcmp+0x1c4>
 800059e:	788b      	ldrb	r3, [r1, #2]
 80005a0:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005a4:	1ae4      	subs	r4, r4, r3
 80005a6:	d106      	bne.n	80005b6 <strcmp+0x1b6>
 80005a8:	b12b      	cbz	r3, 80005b6 <strcmp+0x1b6>
 80005aa:	78cb      	ldrb	r3, [r1, #3]
 80005ac:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005b0:	1ae4      	subs	r4, r4, r3
 80005b2:	d100      	bne.n	80005b6 <strcmp+0x1b6>
 80005b4:	b933      	cbnz	r3, 80005c4 <strcmp+0x1c4>
 80005b6:	4620      	mov	r0, r4
 80005b8:	f85d 4b10 	ldr.w	r4, [sp], #16
 80005bc:	4770      	bx	lr
 80005be:	eba2 0003 	sub.w	r0, r2, r3
 80005c2:	4770      	bx	lr
 80005c4:	f101 0104 	add.w	r1, r1, #4
 80005c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80005cc:	07cc      	lsls	r4, r1, #31
 80005ce:	f021 0103 	bic.w	r1, r1, #3
 80005d2:	f851 3b04 	ldr.w	r3, [r1], #4
 80005d6:	d848      	bhi.n	800066a <strcmp+0x26a>
 80005d8:	d224      	bcs.n	8000624 <strcmp+0x224>
 80005da:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
 80005de:	fa82 f54c 	uadd8	r5, r2, ip
 80005e2:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 80005e6:	faa5 f58c 	sel	r5, r5, ip
 80005ea:	d10a      	bne.n	8000602 <strcmp+0x202>
 80005ec:	b965      	cbnz	r5, 8000608 <strcmp+0x208>
 80005ee:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f2:	ea84 0402 	eor.w	r4, r4, r2
 80005f6:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 80005fa:	d10e      	bne.n	800061a <strcmp+0x21a>
 80005fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8000600:	e7eb      	b.n	80005da <strcmp+0x1da>
 8000602:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000606:	e055      	b.n	80006b4 <strcmp+0x2b4>
 8000608:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800060c:	d14d      	bne.n	80006aa <strcmp+0x2aa>
 800060e:	7808      	ldrb	r0, [r1, #0]
 8000610:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000614:	f1c0 0000 	rsb	r0, r0, #0
 8000618:	4770      	bx	lr
 800061a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800061e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8000622:	e047      	b.n	80006b4 <strcmp+0x2b4>
 8000624:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000628:	fa82 f54c 	uadd8	r5, r2, ip
 800062c:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8000630:	faa5 f58c 	sel	r5, r5, ip
 8000634:	d10a      	bne.n	800064c <strcmp+0x24c>
 8000636:	b965      	cbnz	r5, 8000652 <strcmp+0x252>
 8000638:	f851 3b04 	ldr.w	r3, [r1], #4
 800063c:	ea84 0402 	eor.w	r4, r4, r2
 8000640:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000644:	d10c      	bne.n	8000660 <strcmp+0x260>
 8000646:	f850 2b04 	ldr.w	r2, [r0], #4
 800064a:	e7eb      	b.n	8000624 <strcmp+0x224>
 800064c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000650:	e030      	b.n	80006b4 <strcmp+0x2b4>
 8000652:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000656:	d128      	bne.n	80006aa <strcmp+0x2aa>
 8000658:	880b      	ldrh	r3, [r1, #0]
 800065a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800065e:	e029      	b.n	80006b4 <strcmp+0x2b4>
 8000660:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000664:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000668:	e024      	b.n	80006b4 <strcmp+0x2b4>
 800066a:	f002 04ff 	and.w	r4, r2, #255	@ 0xff
 800066e:	fa82 f54c 	uadd8	r5, r2, ip
 8000672:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000676:	faa5 f58c 	sel	r5, r5, ip
 800067a:	d10a      	bne.n	8000692 <strcmp+0x292>
 800067c:	b965      	cbnz	r5, 8000698 <strcmp+0x298>
 800067e:	f851 3b04 	ldr.w	r3, [r1], #4
 8000682:	ea84 0402 	eor.w	r4, r4, r2
 8000686:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 800068a:	d109      	bne.n	80006a0 <strcmp+0x2a0>
 800068c:	f850 2b04 	ldr.w	r2, [r0], #4
 8000690:	e7eb      	b.n	800066a <strcmp+0x26a>
 8000692:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000696:	e00d      	b.n	80006b4 <strcmp+0x2b4>
 8000698:	f015 0fff 	tst.w	r5, #255	@ 0xff
 800069c:	d105      	bne.n	80006aa <strcmp+0x2aa>
 800069e:	680b      	ldr	r3, [r1, #0]
 80006a0:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80006a8:	e004      	b.n	80006b4 <strcmp+0x2b4>
 80006aa:	f04f 0000 	mov.w	r0, #0
 80006ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006b2:	4770      	bx	lr
 80006b4:	ba12      	rev	r2, r2
 80006b6:	ba1b      	rev	r3, r3
 80006b8:	fa82 f44c 	uadd8	r4, r2, ip
 80006bc:	ea82 0403 	eor.w	r4, r2, r3
 80006c0:	faa4 f58c 	sel	r5, r4, ip
 80006c4:	fab5 f485 	clz	r4, r5
 80006c8:	fa02 f204 	lsl.w	r2, r2, r4
 80006cc:	fa03 f304 	lsl.w	r3, r3, r4
 80006d0:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80006d4:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006d8:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <strncmp>:
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	d03e      	beq.n	8000762 <strncmp+0x82>
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	4684      	mov	ip, r0
 80006e8:	4604      	mov	r4, r0
 80006ea:	4308      	orrs	r0, r1
 80006ec:	0780      	lsls	r0, r0, #30
 80006ee:	460b      	mov	r3, r1
 80006f0:	d12e      	bne.n	8000750 <strncmp+0x70>
 80006f2:	2a03      	cmp	r2, #3
 80006f4:	d807      	bhi.n	8000706 <strncmp+0x26>
 80006f6:	e02b      	b.n	8000750 <strncmp+0x70>
 80006f8:	3a04      	subs	r2, #4
 80006fa:	d025      	beq.n	8000748 <strncmp+0x68>
 80006fc:	f01e 3f80 	tst.w	lr, #2155905152	@ 0x80808080
 8000700:	d122      	bne.n	8000748 <strncmp+0x68>
 8000702:	2a03      	cmp	r2, #3
 8000704:	d922      	bls.n	800074c <strncmp+0x6c>
 8000706:	6820      	ldr	r0, [r4, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f853 5b04 	ldr.w	r5, [r3], #4
 800070e:	f1a0 3e01 	sub.w	lr, r0, #16843009	@ 0x1010101
 8000712:	42a8      	cmp	r0, r5
 8000714:	46a4      	mov	ip, r4
 8000716:	ea2e 0e00 	bic.w	lr, lr, r0
 800071a:	f104 0404 	add.w	r4, r4, #4
 800071e:	d0eb      	beq.n	80006f8 <strncmp+0x18>
 8000720:	f89c 0000 	ldrb.w	r0, [ip]
 8000724:	780c      	ldrb	r4, [r1, #0]
 8000726:	4284      	cmp	r4, r0
 8000728:	d11d      	bne.n	8000766 <strncmp+0x86>
 800072a:	46e6      	mov	lr, ip
 800072c:	b168      	cbz	r0, 800074a <strncmp+0x6a>
 800072e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8000732:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000736:	eba2 030e 	sub.w	r3, r2, lr
 800073a:	42a0      	cmp	r0, r4
 800073c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8000740:	d111      	bne.n	8000766 <strncmp+0x86>
 8000742:	eb1c 0303 	adds.w	r3, ip, r3
 8000746:	d1f1      	bne.n	800072c <strncmp+0x4c>
 8000748:	2000      	movs	r0, #0
 800074a:	bd30      	pop	{r4, r5, pc}
 800074c:	46a4      	mov	ip, r4
 800074e:	4619      	mov	r1, r3
 8000750:	f89c 0000 	ldrb.w	r0, [ip]
 8000754:	780c      	ldrb	r4, [r1, #0]
 8000756:	42a0      	cmp	r0, r4
 8000758:	d105      	bne.n	8000766 <strncmp+0x86>
 800075a:	2a01      	cmp	r2, #1
 800075c:	d0f4      	beq.n	8000748 <strncmp+0x68>
 800075e:	46e6      	mov	lr, ip
 8000760:	e7e4      	b.n	800072c <strncmp+0x4c>
 8000762:	4610      	mov	r0, r2
 8000764:	4770      	bx	lr
 8000766:	1b00      	subs	r0, r0, r4
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	bf00      	nop

0800076c <memcmp>:
 800076c:	2a03      	cmp	r2, #3
 800076e:	b430      	push	{r4, r5}
 8000770:	d915      	bls.n	800079e <memcmp+0x32>
 8000772:	ea41 0400 	orr.w	r4, r1, r0
 8000776:	07a4      	lsls	r4, r4, #30
 8000778:	4684      	mov	ip, r0
 800077a:	460b      	mov	r3, r1
 800077c:	d004      	beq.n	8000788 <memcmp+0x1c>
 800077e:	1e54      	subs	r4, r2, #1
 8000780:	e00f      	b.n	80007a2 <memcmp+0x36>
 8000782:	3a04      	subs	r2, #4
 8000784:	2a03      	cmp	r2, #3
 8000786:	d908      	bls.n	800079a <memcmp+0x2e>
 8000788:	4619      	mov	r1, r3
 800078a:	4660      	mov	r0, ip
 800078c:	f853 4b04 	ldr.w	r4, [r3], #4
 8000790:	f85c 5b04 	ldr.w	r5, [ip], #4
 8000794:	42a5      	cmp	r5, r4
 8000796:	d0f4      	beq.n	8000782 <memcmp+0x16>
 8000798:	e7f1      	b.n	800077e <memcmp+0x12>
 800079a:	4660      	mov	r0, ip
 800079c:	4619      	mov	r1, r3
 800079e:	1e54      	subs	r4, r2, #1
 80007a0:	b17a      	cbz	r2, 80007c2 <memcmp+0x56>
 80007a2:	1e43      	subs	r3, r0, #1
 80007a4:	3901      	subs	r1, #1
 80007a6:	1902      	adds	r2, r0, r4
 80007a8:	e001      	b.n	80007ae <memcmp+0x42>
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d009      	beq.n	80007c2 <memcmp+0x56>
 80007ae:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80007b2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 80007b6:	4560      	cmp	r0, ip
 80007b8:	d0f7      	beq.n	80007aa <memcmp+0x3e>
 80007ba:	eba0 000c 	sub.w	r0, r0, ip
 80007be:	bc30      	pop	{r4, r5}
 80007c0:	4770      	bx	lr
 80007c2:	2000      	movs	r0, #0
 80007c4:	bc30      	pop	{r4, r5}
 80007c6:	4770      	bx	lr

080007c8 <memcpy>:
 80007c8:	4684      	mov	ip, r0
 80007ca:	ea41 0300 	orr.w	r3, r1, r0
 80007ce:	f013 0303 	ands.w	r3, r3, #3
 80007d2:	d16d      	bne.n	80008b0 <memcpy+0xe8>
 80007d4:	3a40      	subs	r2, #64	@ 0x40
 80007d6:	d341      	bcc.n	800085c <memcpy+0x94>
 80007d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80007dc:	f840 3b04 	str.w	r3, [r0], #4
 80007e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80007e4:	f840 3b04 	str.w	r3, [r0], #4
 80007e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80007ec:	f840 3b04 	str.w	r3, [r0], #4
 80007f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80007f4:	f840 3b04 	str.w	r3, [r0], #4
 80007f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80007fc:	f840 3b04 	str.w	r3, [r0], #4
 8000800:	f851 3b04 	ldr.w	r3, [r1], #4
 8000804:	f840 3b04 	str.w	r3, [r0], #4
 8000808:	f851 3b04 	ldr.w	r3, [r1], #4
 800080c:	f840 3b04 	str.w	r3, [r0], #4
 8000810:	f851 3b04 	ldr.w	r3, [r1], #4
 8000814:	f840 3b04 	str.w	r3, [r0], #4
 8000818:	f851 3b04 	ldr.w	r3, [r1], #4
 800081c:	f840 3b04 	str.w	r3, [r0], #4
 8000820:	f851 3b04 	ldr.w	r3, [r1], #4
 8000824:	f840 3b04 	str.w	r3, [r0], #4
 8000828:	f851 3b04 	ldr.w	r3, [r1], #4
 800082c:	f840 3b04 	str.w	r3, [r0], #4
 8000830:	f851 3b04 	ldr.w	r3, [r1], #4
 8000834:	f840 3b04 	str.w	r3, [r0], #4
 8000838:	f851 3b04 	ldr.w	r3, [r1], #4
 800083c:	f840 3b04 	str.w	r3, [r0], #4
 8000840:	f851 3b04 	ldr.w	r3, [r1], #4
 8000844:	f840 3b04 	str.w	r3, [r0], #4
 8000848:	f851 3b04 	ldr.w	r3, [r1], #4
 800084c:	f840 3b04 	str.w	r3, [r0], #4
 8000850:	f851 3b04 	ldr.w	r3, [r1], #4
 8000854:	f840 3b04 	str.w	r3, [r0], #4
 8000858:	3a40      	subs	r2, #64	@ 0x40
 800085a:	d2bd      	bcs.n	80007d8 <memcpy+0x10>
 800085c:	3230      	adds	r2, #48	@ 0x30
 800085e:	d311      	bcc.n	8000884 <memcpy+0xbc>
 8000860:	f851 3b04 	ldr.w	r3, [r1], #4
 8000864:	f840 3b04 	str.w	r3, [r0], #4
 8000868:	f851 3b04 	ldr.w	r3, [r1], #4
 800086c:	f840 3b04 	str.w	r3, [r0], #4
 8000870:	f851 3b04 	ldr.w	r3, [r1], #4
 8000874:	f840 3b04 	str.w	r3, [r0], #4
 8000878:	f851 3b04 	ldr.w	r3, [r1], #4
 800087c:	f840 3b04 	str.w	r3, [r0], #4
 8000880:	3a10      	subs	r2, #16
 8000882:	d2ed      	bcs.n	8000860 <memcpy+0x98>
 8000884:	320c      	adds	r2, #12
 8000886:	d305      	bcc.n	8000894 <memcpy+0xcc>
 8000888:	f851 3b04 	ldr.w	r3, [r1], #4
 800088c:	f840 3b04 	str.w	r3, [r0], #4
 8000890:	3a04      	subs	r2, #4
 8000892:	d2f9      	bcs.n	8000888 <memcpy+0xc0>
 8000894:	3204      	adds	r2, #4
 8000896:	d008      	beq.n	80008aa <memcpy+0xe2>
 8000898:	07d2      	lsls	r2, r2, #31
 800089a:	bf1c      	itt	ne
 800089c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80008a0:	f800 3b01 	strbne.w	r3, [r0], #1
 80008a4:	d301      	bcc.n	80008aa <memcpy+0xe2>
 80008a6:	880b      	ldrh	r3, [r1, #0]
 80008a8:	8003      	strh	r3, [r0, #0]
 80008aa:	4660      	mov	r0, ip
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	2a08      	cmp	r2, #8
 80008b2:	d313      	bcc.n	80008dc <memcpy+0x114>
 80008b4:	078b      	lsls	r3, r1, #30
 80008b6:	d08d      	beq.n	80007d4 <memcpy+0xc>
 80008b8:	f010 0303 	ands.w	r3, r0, #3
 80008bc:	d08a      	beq.n	80007d4 <memcpy+0xc>
 80008be:	f1c3 0304 	rsb	r3, r3, #4
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	07db      	lsls	r3, r3, #31
 80008c6:	bf1c      	itt	ne
 80008c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80008cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80008d0:	d380      	bcc.n	80007d4 <memcpy+0xc>
 80008d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80008d6:	f820 3b02 	strh.w	r3, [r0], #2
 80008da:	e77b      	b.n	80007d4 <memcpy+0xc>
 80008dc:	3a04      	subs	r2, #4
 80008de:	d3d9      	bcc.n	8000894 <memcpy+0xcc>
 80008e0:	3a01      	subs	r2, #1
 80008e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80008e6:	f800 3b01 	strb.w	r3, [r0], #1
 80008ea:	d2f9      	bcs.n	80008e0 <memcpy+0x118>
 80008ec:	780b      	ldrb	r3, [r1, #0]
 80008ee:	7003      	strb	r3, [r0, #0]
 80008f0:	784b      	ldrb	r3, [r1, #1]
 80008f2:	7043      	strb	r3, [r0, #1]
 80008f4:	788b      	ldrb	r3, [r1, #2]
 80008f6:	7083      	strb	r3, [r0, #2]
 80008f8:	4660      	mov	r0, ip
 80008fa:	4770      	bx	lr
 80008fc:	0000      	movs	r0, r0
	...

08000900 <_ctl.lto_priv.0>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000900:	2000      	movs	r0, #0
 8000902:	4770      	bx	lr
	...

08000910 <notify2.lto_priv.0>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000910:	4a02      	ldr	r2, [pc, #8]	@ (800091c <notify2.lto_priv.0+0xc>)
 8000912:	68d3      	ldr	r3, [r2, #12]
 8000914:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000918:	60d3      	str	r3, [r2, #12]
}
 800091a:	4770      	bx	lr
 800091c:	40004400 	.word	0x40004400

08000920 <_idle_thread.lto_priv.0>:
 */
static void _idle_thread(void *p) {

  (void)p;

  while (true) {
 8000920:	e7fe      	b.n	8000920 <_idle_thread.lto_priv.0>
 8000922:	bf00      	nop
	...

08000930 <wakeup.lto_priv.0>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000930:	2320      	movs	r3, #32
 8000932:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8000936:	f890 3020 	ldrb.w	r3, [r0, #32]
 800093a:	2b07      	cmp	r3, #7
 800093c:	d80d      	bhi.n	800095a <wakeup.lto_priv.0+0x2a>
 800093e:	e8df f003 	tbb	[pc, r3]
 8000942:	0c27      	.short	0x0c27
 8000944:	0408230c 	.word	0x0408230c
 8000948:	080c      	.short	0x080c
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800094a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800094c:	6893      	ldr	r3, [r2, #8]
 800094e:	3301      	adds	r3, #1
 8000950:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000952:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000956:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000958:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 800095a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800095c:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 800095e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
  } while (cp->prio >= tp->prio);
 8000962:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <wakeup.lto_priv.0+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000966:	6244      	str	r4, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8000968:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800096c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	428a      	cmp	r2, r1
 8000972:	d2fb      	bcs.n	800096c <wakeup.lto_priv.0+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	2100      	movs	r1, #0
 8000978:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800097c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800097e:	6058      	str	r0, [r3, #4]
 8000980:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000984:	bc10      	pop	{r4}
 8000986:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000988:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
    break;
 800098e:	e7e4      	b.n	800095a <wakeup.lto_priv.0+0x2a>
 8000990:	2300      	movs	r3, #0
 8000992:	f383 8811 	msr	BASEPRI, r3
    return;
 8000996:	4770      	bx	lr
 8000998:	200011c0 	.word	0x200011c0
 800099c:	00000000 	.word	0x00000000

080009a0 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <chMtxUnlockS+0x60>)
void chMtxUnlockS(mutex_t *mp) {
 80009a2:	b430      	push	{r4, r5}
  return (bool)(tqp->next != (const thread_t *)tqp);
 80009a4:	6804      	ldr	r4, [r0, #0]
  thread_t *ctp = currp;
 80009a6:	699d      	ldr	r5, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80009a8:	68c3      	ldr	r3, [r0, #12]
 80009aa:	63ab      	str	r3, [r5, #56]	@ 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80009ac:	4284      	cmp	r4, r0
 80009ae:	d023      	beq.n	80009f8 <chMtxUnlockS+0x58>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80009b0:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 80009b2:	b14b      	cbz	r3, 80009c8 <chMtxUnlockS+0x28>
 80009b4:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d003      	beq.n	80009c2 <chMtxUnlockS+0x22>
 80009ba:	6892      	ldr	r2, [r2, #8]
 80009bc:	4291      	cmp	r1, r2
 80009be:	bf38      	it	cc
 80009c0:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80009c2:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f5      	bne.n	80009b4 <chMtxUnlockS+0x14>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 80009c8:	60a9      	str	r1, [r5, #8]
  tqp->next             = tp->queue.next;
 80009ca:	6823      	ldr	r3, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80009cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80009ce:	6003      	str	r3, [r0, #0]
  tp->state = CH_STATE_READY;
 80009d0:	2200      	movs	r2, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80009d2:	6058      	str	r0, [r3, #4]
 80009d4:	e9c0 4102 	strd	r4, r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <chMtxUnlockS+0x60>)
  } while (cp->prio >= tp->prio);
 80009da:	68a1      	ldr	r1, [r4, #8]
      tp->mtxlist = mp;
 80009dc:	63a0      	str	r0, [r4, #56]	@ 0x38
  tp->state = CH_STATE_READY;
 80009de:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80009e2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	428a      	cmp	r2, r1
 80009e8:	d2fb      	bcs.n	80009e2 <chMtxUnlockS+0x42>
  tp->queue.prev             = cp->queue.prev;
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80009f0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80009f2:	605c      	str	r4, [r3, #4]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 80009f4:	bc30      	pop	{r4, r5}
 80009f6:	4770      	bx	lr
      mp->owner = NULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60a3      	str	r3, [r4, #8]
}
 80009fc:	bc30      	pop	{r4, r5}
 80009fe:	4770      	bx	lr
 8000a00:	200011c0 	.word	0x200011c0
	...

08000a10 <chEvtBroadcastFlagsI>:
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000a10:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d03c      	beq.n	8000a90 <chEvtBroadcastFlagsI+0x80>
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a16:	b4f0      	push	{r4, r5, r6, r7}
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000a18:	2600      	movs	r6, #0
 8000a1a:	e00d      	b.n	8000a38 <chEvtBroadcastFlagsI+0x28>
  tp->epending |= events;
 8000a1c:	e9d3 4201 	ldrd	r4, r2, [r3, #4]
 8000a20:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000a22:	f894 5020 	ldrb.w	r5, [r4, #32]
  tp->epending |= events;
 8000a26:	433a      	orrs	r2, r7
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000a28:	2d0a      	cmp	r5, #10
  tp->epending |= events;
 8000a2a:	6362      	str	r2, [r4, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000a2c:	d016      	beq.n	8000a5c <chEvtBroadcastFlagsI+0x4c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000a2e:	2d0b      	cmp	r5, #11
 8000a30:	d02a      	beq.n	8000a88 <chEvtBroadcastFlagsI+0x78>
    elp = elp->next;
 8000a32:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000a34:	4298      	cmp	r0, r3
 8000a36:	d025      	beq.n	8000a84 <chEvtBroadcastFlagsI+0x74>
    elp->flags |= flags;
 8000a38:	68da      	ldr	r2, [r3, #12]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 8000a3e:	2900      	cmp	r1, #0
 8000a40:	d0ec      	beq.n	8000a1c <chEvtBroadcastFlagsI+0xc>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000a42:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000a44:	4211      	tst	r1, r2
 8000a46:	d1e9      	bne.n	8000a1c <chEvtBroadcastFlagsI+0xc>
    elp = elp->next;
 8000a48:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000a4a:	4298      	cmp	r0, r3
 8000a4c:	d01a      	beq.n	8000a84 <chEvtBroadcastFlagsI+0x74>
    elp->flags |= flags;
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	60da      	str	r2, [r3, #12]
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000a54:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000a56:	4211      	tst	r1, r2
 8000a58:	d1e0      	bne.n	8000a1c <chEvtBroadcastFlagsI+0xc>
 8000a5a:	e7f5      	b.n	8000a48 <chEvtBroadcastFlagsI+0x38>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000a5c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000a5e:	422a      	tst	r2, r5
 8000a60:	d0e7      	beq.n	8000a32 <chEvtBroadcastFlagsI+0x22>
  } while (cp->prio >= tp->prio);
 8000a62:	68a5      	ldr	r5, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000a64:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <chEvtBroadcastFlagsI+0x84>)
    tp->u.rdymsg = MSG_OK;
 8000a66:	6266      	str	r6, [r4, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8000a68:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
 8000a6c:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8000a6e:	6897      	ldr	r7, [r2, #8]
 8000a70:	42af      	cmp	r7, r5
 8000a72:	d2fb      	bcs.n	8000a6c <chEvtBroadcastFlagsI+0x5c>
    elp = elp->next;
 8000a74:	681b      	ldr	r3, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8000a76:	6855      	ldr	r5, [r2, #4]
  while (elp != (event_listener_t *)esp) {
 8000a78:	4298      	cmp	r0, r3
 8000a7a:	e9c4 2500 	strd	r2, r5, [r4]
  tp->queue.prev->queue.next = tp;
 8000a7e:	602c      	str	r4, [r5, #0]
  cp->queue.prev             = tp;
 8000a80:	6054      	str	r4, [r2, #4]
 8000a82:	d1d9      	bne.n	8000a38 <chEvtBroadcastFlagsI+0x28>
}
 8000a84:	bcf0      	pop	{r4, r5, r6, r7}
 8000a86:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000a88:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000a8a:	4395      	bics	r5, r2
 8000a8c:	d1d1      	bne.n	8000a32 <chEvtBroadcastFlagsI+0x22>
 8000a8e:	e7e8      	b.n	8000a62 <chEvtBroadcastFlagsI+0x52>
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200011c0 	.word	0x200011c0
	...

08000aa0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8000aa0:	b430      	push	{r4, r5}
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000aa8:	4c0e      	ldr	r4, [pc, #56]	@ (8000ae4 <chCoreAllocAlignedWithOffset+0x44>)
 8000aaa:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 8000aae:	6825      	ldr	r5, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 8000ab0:	4249      	negs	r1, r1
 8000ab2:	4460      	add	r0, ip
 8000ab4:	ea00 0301 	and.w	r3, r0, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000ab8:	18a8      	adds	r0, r5, r2
 8000aba:	4460      	add	r0, ip
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000abc:	6862      	ldr	r2, [r4, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000abe:	4008      	ands	r0, r1
  next = p + size;
 8000ac0:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d807      	bhi.n	8000ad6 <chCoreAllocAlignedWithOffset+0x36>
 8000ac6:	429d      	cmp	r5, r3
 8000ac8:	d805      	bhi.n	8000ad6 <chCoreAllocAlignedWithOffset+0x36>
  ch_memcore.nextmem = next;
 8000aca:	6023      	str	r3, [r4, #0]
 8000acc:	2300      	movs	r3, #0
 8000ace:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000ad2:	bc30      	pop	{r4, r5}
 8000ad4:	4770      	bx	lr
    return NULL;
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f383 8811 	msr	BASEPRI, r3
}
 8000ade:	bc30      	pop	{r4, r5}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	2000113c 	.word	0x2000113c
	...

08000af0 <chCoreAllocAlignedI.lto_priv.0>:
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000af0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <chCoreAllocAlignedI.lto_priv.0+0x34>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000af2:	b410      	push	{r4}
 8000af4:	6814      	ldr	r4, [r2, #0]
 8000af6:	1e63      	subs	r3, r4, #1
  size = MEM_ALIGN_NEXT(size, align);
 8000af8:	f1c1 0c00 	rsb	ip, r1, #0
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000afc:	440b      	add	r3, r1
  size = MEM_ALIGN_NEXT(size, align);
 8000afe:	3901      	subs	r1, #1
 8000b00:	4401      	add	r1, r0
 8000b02:	ea01 010c 	and.w	r1, r1, ip
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000b06:	ea03 000c 	and.w	r0, r3, ip
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000b0a:	6853      	ldr	r3, [r2, #4]
  next = p + size;
 8000b0c:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d804      	bhi.n	8000b1c <chCoreAllocAlignedI.lto_priv.0+0x2c>
 8000b12:	428c      	cmp	r4, r1
 8000b14:	d802      	bhi.n	8000b1c <chCoreAllocAlignedI.lto_priv.0+0x2c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000b16:	bc10      	pop	{r4}
  ch_memcore.nextmem = next;
 8000b18:	6011      	str	r1, [r2, #0]
 8000b1a:	4770      	bx	lr
    return NULL;
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	bc10      	pop	{r4}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000113c 	.word	0x2000113c
	...

08000b30 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(msg);
  return false;
}

bool _test_assert_sequence(char *expected, const char *msg) {
 8000b30:	b470      	push	{r4, r5, r6}
  char *cp = test_tokens_buffer;

  while (cp < test_tokp) {
 8000b32:	4d0d      	ldr	r5, [pc, #52]	@ (8000b68 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8000b34:	4e0d      	ldr	r6, [pc, #52]	@ (8000b6c <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 8000b36:	682c      	ldr	r4, [r5, #0]
 8000b38:	1e42      	subs	r2, r0, #1
  char *cp = test_tokens_buffer;
 8000b3a:	4633      	mov	r3, r6
  while (cp < test_tokp) {
 8000b3c:	e003      	b.n	8000b46 <_test_assert_sequence+0x16>
    if (*cp++ != *expected++)
 8000b3e:	f813 cb01 	ldrb.w	ip, [r3], #1
 8000b42:	4584      	cmp	ip, r0
 8000b44:	d107      	bne.n	8000b56 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8000b46:	429c      	cmp	r4, r3
    if (*cp++ != *expected++)
 8000b48:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  while (cp < test_tokp) {
 8000b4c:	d8f7      	bhi.n	8000b3e <_test_assert_sequence+0xe>
     return _test_fail(msg);
  }

  if (*expected)
 8000b4e:	b910      	cbnz	r0, 8000b56 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8000b50:	602e      	str	r6, [r5, #0]
    return _test_fail(msg);

  clear_tokens();

  return false;
}
 8000b52:	bc70      	pop	{r4, r5, r6}
 8000b54:	4770      	bx	lr
  test_local_fail      = true;
 8000b56:	4c06      	ldr	r4, [pc, #24]	@ (8000b70 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8000b60:	7010      	strb	r0, [r2, #0]
}
 8000b62:	bc70      	pop	{r4, r5, r6}
  test_failure_message = msg;
 8000b64:	6019      	str	r1, [r3, #0]
}
 8000b66:	4770      	bx	lr
 8000b68:	200010c8 	.word	0x200010c8
 8000b6c:	200010b8 	.word	0x200010b8
 8000b70:	200010d1 	.word	0x200010d1
 8000b74:	200010d0 	.word	0x200010d0
 8000b78:	200010cc 	.word	0x200010cc
 8000b7c:	00000000 	.word	0x00000000

08000b80 <rt_test_002_001_execute.lto_priv.0>:
 * - [2.1.3] Testing Registry List integrity.
 * - [2.1.4] Testing Port-defined integrity.
 * .
 */

static void rt_test_002_001_execute(void) {
 8000b80:	b410      	push	{r4}
  bool result;

  /* [2.1.1] Testing Ready List integrity.*/
  test_set_step(1);
 8000b82:	4c47      	ldr	r4, [pc, #284]	@ (8000ca0 <rt_test_002_001_execute.lto_priv.0+0x120>)
 8000b84:	2301      	movs	r3, #1
 8000b86:	6023      	str	r3, [r4, #0]
 8000b88:	2320      	movs	r3, #32
 8000b8a:	f383 8811 	msr	BASEPRI, r3
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
 8000b8e:	4a45      	ldr	r2, [pc, #276]	@ (8000ca4 <rt_test_002_001_execute.lto_priv.0+0x124>)
 8000b90:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000b92:	4291      	cmp	r1, r2
 8000b94:	d06a      	beq.n	8000c6c <rt_test_002_001_execute.lto_priv.0+0xec>
    n = (cnt_t)0;
 8000b96:	2300      	movs	r3, #0
      n++;
      tp = tp->queue.next;
 8000b98:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000b9a:	4291      	cmp	r1, r2
      n++;
 8000b9c:	f103 0301 	add.w	r3, r3, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000ba0:	d1fa      	bne.n	8000b98 <rt_test_002_001_execute.lto_priv.0+0x18>
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
 8000ba2:	6851      	ldr	r1, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000ba4:	4291      	cmp	r1, r2
 8000ba6:	d047      	beq.n	8000c38 <rt_test_002_001_execute.lto_priv.0+0xb8>
      n--;
      tp = tp->queue.prev;
 8000ba8:	6849      	ldr	r1, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000baa:	4291      	cmp	r1, r2
      n--;
 8000bac:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000bb0:	d1fa      	bne.n	8000ba8 <rt_test_002_001_execute.lto_priv.0+0x28>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d140      	bne.n	8000c38 <rt_test_002_001_execute.lto_priv.0+0xb8>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    test_assert(result == false, "ready list check failed");
  }

  /* [2.1.2] Testing Virtual Timers List integrity.*/
  test_set_step(2);
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	6021      	str	r1, [r4, #0]
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	f381 8811 	msr	BASEPRI, r1
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000bc6:	4838      	ldr	r0, [pc, #224]	@ (8000ca8 <rt_test_002_001_execute.lto_priv.0+0x128>)
    vtp = ch.vtlist.next;
 8000bc8:	69d1      	ldr	r1, [r2, #28]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000bca:	4281      	cmp	r1, r0
 8000bcc:	d054      	beq.n	8000c78 <rt_test_002_001_execute.lto_priv.0+0xf8>
      n++;
      vtp = vtp->next;
 8000bce:	6809      	ldr	r1, [r1, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000bd0:	4281      	cmp	r1, r0
      n++;
 8000bd2:	f103 0301 	add.w	r3, r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000bd6:	d1fa      	bne.n	8000bce <rt_test_002_001_execute.lto_priv.0+0x4e>
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
 8000bd8:	6a11      	ldr	r1, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000bda:	4281      	cmp	r1, r0
 8000bdc:	d039      	beq.n	8000c52 <rt_test_002_001_execute.lto_priv.0+0xd2>
      n--;
      vtp = vtp->prev;
 8000bde:	6849      	ldr	r1, [r1, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000be0:	4281      	cmp	r1, r0
      n--;
 8000be2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000be6:	d1fa      	bne.n	8000bde <rt_test_002_001_execute.lto_priv.0+0x5e>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d132      	bne.n	8000c52 <rt_test_002_001_execute.lto_priv.0+0xd2>
 8000bec:	2300      	movs	r3, #0
 8000bee:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    test_assert(result == false, "virtual timers list check failed");
  }

  /* [2.1.3] Testing Registry List integrity.*/
  test_set_step(3);
 8000bf2:	2103      	movs	r1, #3
 8000bf4:	6021      	str	r1, [r4, #0]
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	f381 8811 	msr	BASEPRI, r1
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
 8000bfc:	6911      	ldr	r1, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8000bfe:	4291      	cmp	r1, r2
 8000c00:	d04a      	beq.n	8000c98 <rt_test_002_001_execute.lto_priv.0+0x118>
      n++;
      tp = tp->newer;
 8000c02:	6909      	ldr	r1, [r1, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8000c04:	4291      	cmp	r1, r2
      n++;
 8000c06:	f103 0301 	add.w	r3, r3, #1
    while (tp != (thread_t *)&ch.rlist) {
 8000c0a:	d1fa      	bne.n	8000c02 <rt_test_002_001_execute.lto_priv.0+0x82>
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
 8000c0c:	6951      	ldr	r1, [r2, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000c0e:	4291      	cmp	r1, r2
 8000c10:	d036      	beq.n	8000c80 <rt_test_002_001_execute.lto_priv.0+0x100>
      n--;
      tp = tp->older;
 8000c12:	6949      	ldr	r1, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000c14:	4291      	cmp	r1, r2
      n--;
 8000c16:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    while (tp != (thread_t *)&ch.rlist) {
 8000c1a:	d1fa      	bne.n	8000c12 <rt_test_002_001_execute.lto_priv.0+0x92>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d12f      	bne.n	8000c80 <rt_test_002_001_execute.lto_priv.0+0x100>
 8000c20:	2300      	movs	r3, #0
 8000c22:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    test_assert(result == false, "registry list check failed");
  }

  /* [2.1.4] Testing Port-defined integrity.*/
  test_set_step(4);
 8000c26:	2204      	movs	r2, #4
 8000c28:	6022      	str	r2, [r4, #0]
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	f382 8811 	msr	BASEPRI, r2
 8000c30:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
  }
}
 8000c34:	bc10      	pop	{r4}
 8000c36:	4770      	bx	lr
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f383 8811 	msr	BASEPRI, r3
  test_local_fail      = true;
 8000c3e:	4c1b      	ldr	r4, [pc, #108]	@ (8000cac <rt_test_002_001_execute.lto_priv.0+0x12c>)
  test_global_fail     = true;
 8000c40:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <rt_test_002_001_execute.lto_priv.0+0x130>)
  test_failure_message = msg;
 8000c42:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <rt_test_002_001_execute.lto_priv.0+0x134>)
 8000c44:	491c      	ldr	r1, [pc, #112]	@ (8000cb8 <rt_test_002_001_execute.lto_priv.0+0x138>)
 8000c46:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8000c4c:	7003      	strb	r3, [r0, #0]
 8000c4e:	bc10      	pop	{r4}
 8000c50:	4770      	bx	lr
 8000c52:	2300      	movs	r3, #0
 8000c54:	f383 8811 	msr	BASEPRI, r3
  test_local_fail      = true;
 8000c58:	4c14      	ldr	r4, [pc, #80]	@ (8000cac <rt_test_002_001_execute.lto_priv.0+0x12c>)
  test_global_fail     = true;
 8000c5a:	4815      	ldr	r0, [pc, #84]	@ (8000cb0 <rt_test_002_001_execute.lto_priv.0+0x130>)
  test_failure_message = msg;
 8000c5c:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <rt_test_002_001_execute.lto_priv.0+0x134>)
 8000c5e:	4917      	ldr	r1, [pc, #92]	@ (8000cbc <rt_test_002_001_execute.lto_priv.0+0x13c>)
 8000c60:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8000c62:	2301      	movs	r3, #1
 8000c64:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8000c66:	7003      	strb	r3, [r0, #0]
 8000c68:	bc10      	pop	{r4}
 8000c6a:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
 8000c6c:	6851      	ldr	r1, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000c6e:	4291      	cmp	r1, r2
    n = (cnt_t)0;
 8000c70:	bf18      	it	ne
 8000c72:	2300      	movne	r3, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000c74:	d198      	bne.n	8000ba8 <rt_test_002_001_execute.lto_priv.0+0x28>
 8000c76:	e79e      	b.n	8000bb6 <rt_test_002_001_execute.lto_priv.0+0x36>
    vtp = ch.vtlist.prev;
 8000c78:	6a11      	ldr	r1, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000c7a:	4281      	cmp	r1, r0
 8000c7c:	d1af      	bne.n	8000bde <rt_test_002_001_execute.lto_priv.0+0x5e>
 8000c7e:	e7b5      	b.n	8000bec <rt_test_002_001_execute.lto_priv.0+0x6c>
 8000c80:	2300      	movs	r3, #0
 8000c82:	f383 8811 	msr	BASEPRI, r3
  test_local_fail      = true;
 8000c86:	4c09      	ldr	r4, [pc, #36]	@ (8000cac <rt_test_002_001_execute.lto_priv.0+0x12c>)
  test_global_fail     = true;
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <rt_test_002_001_execute.lto_priv.0+0x130>)
  test_failure_message = msg;
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <rt_test_002_001_execute.lto_priv.0+0x134>)
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <rt_test_002_001_execute.lto_priv.0+0x140>)
 8000c8e:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8000c90:	2301      	movs	r3, #1
 8000c92:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8000c94:	7003      	strb	r3, [r0, #0]
  return true;
 8000c96:	e7da      	b.n	8000c4e <rt_test_002_001_execute.lto_priv.0+0xce>
    tp = ch.rlist.older;
 8000c98:	6951      	ldr	r1, [r2, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000c9a:	4291      	cmp	r1, r2
 8000c9c:	d1b9      	bne.n	8000c12 <rt_test_002_001_execute.lto_priv.0+0x92>
 8000c9e:	e7bf      	b.n	8000c20 <rt_test_002_001_execute.lto_priv.0+0xa0>
 8000ca0:	200010b4 	.word	0x200010b4
 8000ca4:	200011c0 	.word	0x200011c0
 8000ca8:	200011dc 	.word	0x200011dc
 8000cac:	200010d1 	.word	0x200010d1
 8000cb0:	200010d0 	.word	0x200010d0
 8000cb4:	200010cc 	.word	0x200010cc
 8000cb8:	0800b0fc 	.word	0x0800b0fc
 8000cbc:	0800b114 	.word	0x0800b114
 8000cc0:	0800b138 	.word	0x0800b138
	...

08000cd0 <rt_test_002_003_execute.lto_priv.0>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <rt_test_002_003_execute.lto_priv.0+0x20>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	2320      	movs	r3, #32
 8000cd8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000cdc:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8000cde:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ce0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000ce4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000cec:	b662      	cpsie	i
    chSysSuspend();
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
}
 8000cee:	4770      	bx	lr
 8000cf0:	200010b4 	.word	0x200010b4
	...

08000d00 <rt_test_002_004_execute.lto_priv.0>:

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <rt_test_002_004_execute.lto_priv.0+0x14>)
 8000d02:	2101      	movs	r1, #1
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000d04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d08:	6019      	str	r1, [r3, #0]
 8000d0a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8000d0c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	d0fc      	beq.n	8000d0c <rt_test_002_004_execute.lto_priv.0+0xc>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 8000d12:	4770      	bx	lr
 8000d14:	200010b4 	.word	0x200010b4
	...

08000d20 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8000d20:	7800      	ldrb	r0, [r0, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d22:	2320      	movs	r3, #32
 8000d24:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000d28:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <thread+0x20>)
 8000d2a:	4906      	ldr	r1, [pc, #24]	@ (8000d44 <thread+0x24>)
 8000d2c:	6813      	ldr	r3, [r2, #0]
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d202      	bcs.n	8000d38 <thread+0x18>
    *test_tokp++ = token;
 8000d32:	1c59      	adds	r1, r3, #1
 8000d34:	6011      	str	r1, [r2, #0]
 8000d36:	7018      	strb	r0, [r3, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f383 8811 	msr	BASEPRI, r3
}
 8000d3e:	4770      	bx	lr
 8000d40:	200010c8 	.word	0x200010c8
 8000d44:	200010c8 	.word	0x200010c8
	...

08000d50 <rt_test_004_001_setup.lto_priv.0>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
 8000d50:	4b01      	ldr	r3, [pc, #4]	@ (8000d58 <rt_test_004_001_setup.lto_priv.0+0x8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	4770      	bx	lr
 8000d58:	2000109c 	.word	0x2000109c
 8000d5c:	00000000 	.word	0x00000000

08000d60 <rt_test_005_001_setup.lto_priv.0>:
 * - [5.1.3] The function chSemReset() is invoked, after return the
 *   counter is tested.
 * .
 */

static void rt_test_005_001_setup(void) {
 8000d60:	4b02      	ldr	r3, [pc, #8]	@ (8000d6c <rt_test_005_001_setup.lto_priv.0+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8000d62:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 8000d64:	e9c3 3300 	strd	r3, r3, [r3]
 8000d68:	609a      	str	r2, [r3, #8]
  chSemObjectInit(&sem1, 1);
}
 8000d6a:	4770      	bx	lr
 8000d6c:	20001090 	.word	0x20001090

08000d70 <rt_test_005_005_setup.lto_priv.0>:
 *   specifying the same semaphore for the wait and signal phases. The
 *   counter value must be one on exit.
 * .
 */

static void rt_test_005_005_setup(void) {
 8000d70:	4b02      	ldr	r3, [pc, #8]	@ (8000d7c <rt_test_005_005_setup.lto_priv.0+0xc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	e9c3 3300 	strd	r3, r3, [r3]
 8000d78:	609a      	str	r2, [r3, #8]
  chSemObjectInit(&sem1, 0);
}
 8000d7a:	4770      	bx	lr
 8000d7c:	20001090 	.word	0x20001090

08000d80 <rt_test_005_002_setup.lto_priv.0>:
static void rt_test_005_002_setup(void) {
 8000d80:	4b02      	ldr	r3, [pc, #8]	@ (8000d8c <rt_test_005_002_setup.lto_priv.0+0xc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	e9c3 3300 	strd	r3, r3, [r3]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	4770      	bx	lr
 8000d8c:	20001090 	.word	0x20001090

08000d90 <rt_test_005_003_setup.lto_priv.0>:
static void rt_test_005_003_setup(void) {
 8000d90:	4b02      	ldr	r3, [pc, #8]	@ (8000d9c <rt_test_005_003_setup.lto_priv.0+0xc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	e9c3 3300 	strd	r3, r3, [r3]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	4770      	bx	lr
 8000d9c:	20001090 	.word	0x20001090

08000da0 <rt_test_005_004_setup.lto_priv.0>:
static void rt_test_005_004_setup(void) {
 8000da0:	4b02      	ldr	r3, [pc, #8]	@ (8000dac <rt_test_005_004_setup.lto_priv.0+0xc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	e9c3 3300 	strd	r3, r3, [r3]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	4770      	bx	lr
 8000dac:	20001090 	.word	0x20001090

08000db0 <rt_test_006_005_setup.lto_priv.0>:
 * - [6.5.6] Testing chMtxUnlockAll() behavior.
 * - [6.5.7] Testing that priority has not changed after operations.
 * .
 */

static void rt_test_006_005_setup(void) {
 8000db0:	4b02      	ldr	r3, [pc, #8]	@ (8000dbc <rt_test_006_005_setup.lto_priv.0+0xc>)
  mp->owner = NULL;
 8000db2:	2200      	movs	r2, #0
 8000db4:	e9c3 3300 	strd	r3, r3, [r3]
 8000db8:	609a      	str	r2, [r3, #8]
  chMtxObjectInit(&m1);
}
 8000dba:	4770      	bx	lr
 8000dbc:	200008d0 	.word	0x200008d0

08000dc0 <rt_test_006_001_setup.lto_priv.0>:
static void rt_test_006_001_setup(void) {
 8000dc0:	4b02      	ldr	r3, [pc, #8]	@ (8000dcc <rt_test_006_001_setup.lto_priv.0+0xc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	e9c3 3300 	strd	r3, r3, [r3]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	4770      	bx	lr
 8000dcc:	200008d0 	.word	0x200008d0

08000dd0 <rt_test_006_004_setup.lto_priv.0>:
static void rt_test_006_004_setup(void) {
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <rt_test_006_004_setup.lto_priv.0+0x14>)
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <rt_test_006_004_setup.lto_priv.0+0x18>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c2 2200 	strd	r2, r2, [r2]
 8000dda:	e9c3 3300 	strd	r3, r3, [r3]
 8000dde:	6091      	str	r1, [r2, #8]
 8000de0:	6099      	str	r1, [r3, #8]
}
 8000de2:	4770      	bx	lr
 8000de4:	200008c0 	.word	0x200008c0
 8000de8:	200008d0 	.word	0x200008d0
 8000dec:	00000000 	.word	0x00000000

08000df0 <rt_test_006_008_setup.lto_priv.0>:
 * - [6.8.2] Broarcasting on the condition variable then waiting for
 *   the threads to terminate in priority order, the order is tested.
 * .
 */

static void rt_test_006_008_setup(void) {
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <rt_test_006_008_setup.lto_priv.0+0x14>)
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <rt_test_006_008_setup.lto_priv.0+0x18>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c2 2200 	strd	r2, r2, [r2]
 8000dfa:	e9c3 3300 	strd	r3, r3, [r3]
 8000dfe:	6099      	str	r1, [r3, #8]
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200008d0 	.word	0x200008d0
 8000e08:	200008b8 	.word	0x200008b8
 8000e0c:	00000000 	.word	0x00000000

08000e10 <rt_test_006_007_setup.lto_priv.0>:
static void rt_test_006_007_setup(void) {
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <rt_test_006_007_setup.lto_priv.0+0x14>)
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <rt_test_006_007_setup.lto_priv.0+0x18>)
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c2 2200 	strd	r2, r2, [r2]
 8000e1a:	e9c3 3300 	strd	r3, r3, [r3]
 8000e1e:	6099      	str	r1, [r3, #8]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	200008d0 	.word	0x200008d0
 8000e28:	200008b8 	.word	0x200008b8
 8000e2c:	00000000 	.word	0x00000000

08000e30 <rt_test_006_009_setup.lto_priv.0>:
 * - [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.
 * - [6.9.7] Checking the order of operations.
 * .
 */

static void rt_test_006_009_setup(void) {
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <rt_test_006_009_setup.lto_priv.0+0x1c>)
 8000e32:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <rt_test_006_009_setup.lto_priv.0+0x20>)
 8000e34:	4907      	ldr	r1, [pc, #28]	@ (8000e54 <rt_test_006_009_setup.lto_priv.0+0x24>)
 8000e36:	2000      	movs	r0, #0
 8000e38:	e9c1 1100 	strd	r1, r1, [r1]
 8000e3c:	e9c2 2200 	strd	r2, r2, [r2]
 8000e40:	e9c3 3300 	strd	r3, r3, [r3]
 8000e44:	6090      	str	r0, [r2, #8]
 8000e46:	6098      	str	r0, [r3, #8]
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	200008c0 	.word	0x200008c0
 8000e50:	200008d0 	.word	0x200008d0
 8000e54:	200008b8 	.word	0x200008b8
	...

08000e60 <h1>:
 8000e60:	2320      	movs	r3, #32
 8000e62:	f383 8811 	msr	BASEPRI, r3
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000e66:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <h1+0x20>)
 8000e68:	4906      	ldr	r1, [pc, #24]	@ (8000e84 <h1+0x24>)
 8000e6a:	6813      	ldr	r3, [r2, #0]
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d203      	bcs.n	8000e78 <h1+0x18>
    *test_tokp++ = token;
 8000e70:	1c58      	adds	r0, r3, #1
 8000e72:	2141      	movs	r1, #65	@ 0x41
 8000e74:	6010      	str	r0, [r2, #0]
 8000e76:	7019      	strb	r1, [r3, #0]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f383 8811 	msr	BASEPRI, r3
 ****************************************************************************/

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000e7e:	4770      	bx	lr
 8000e80:	200010c8 	.word	0x200010c8
 8000e84:	200010c8 	.word	0x200010c8
	...

08000e90 <h2>:
 8000e90:	2320      	movs	r3, #32
 8000e92:	f383 8811 	msr	BASEPRI, r3
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000e96:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <h2+0x20>)
 8000e98:	4906      	ldr	r1, [pc, #24]	@ (8000eb4 <h2+0x24>)
 8000e9a:	6813      	ldr	r3, [r2, #0]
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d203      	bcs.n	8000ea8 <h2+0x18>
    *test_tokp++ = token;
 8000ea0:	1c58      	adds	r0, r3, #1
 8000ea2:	2142      	movs	r1, #66	@ 0x42
 8000ea4:	6010      	str	r0, [r2, #0]
 8000ea6:	7019      	strb	r1, [r3, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f383 8811 	msr	BASEPRI, r3
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000eae:	4770      	bx	lr
 8000eb0:	200010c8 	.word	0x200010c8
 8000eb4:	200010c8 	.word	0x200010c8
	...

08000ec0 <h3>:
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	f383 8811 	msr	BASEPRI, r3
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8000ec6:	4a06      	ldr	r2, [pc, #24]	@ (8000ee0 <h3+0x20>)
 8000ec8:	4906      	ldr	r1, [pc, #24]	@ (8000ee4 <h3+0x24>)
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d203      	bcs.n	8000ed8 <h3+0x18>
    *test_tokp++ = token;
 8000ed0:	1c58      	adds	r0, r3, #1
 8000ed2:	2143      	movs	r1, #67	@ 0x43
 8000ed4:	6010      	str	r0, [r2, #0]
 8000ed6:	7019      	strb	r1, [r3, #0]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f383 8811 	msr	BASEPRI, r3
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000ede:	4770      	bx	lr
 8000ee0:	200010c8 	.word	0x200010c8
 8000ee4:	200010c8 	.word	0x200010c8
	...

08000ef0 <rt_test_008_001_execute.lto_priv.0>:
 * - [8.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void rt_test_008_001_execute(void) {
 8000ef0:	b4f0      	push	{r4, r5, r6, r7}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000ef2:	4a48      	ldr	r2, [pc, #288]	@ (8001014 <rt_test_008_001_execute.lto_priv.0+0x124>)
    chEvtObjectInit(&es1);
  }

  /* [8.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8000ef4:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8001018 <rt_test_008_001_execute.lto_priv.0+0x128>
 8000ef8:	6012      	str	r2, [r2, #0]
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8cc 3000 	str.w	r3, [ip]
static void rt_test_008_001_execute(void) {
 8000f00:	b08c      	sub	sp, #48	@ 0x30
 8000f02:	2320      	movs	r3, #32
 8000f04:	f383 8811 	msr	BASEPRI, r3
  elp->listener = currp;
 8000f08:	4c44      	ldr	r4, [pc, #272]	@ (800101c <rt_test_008_001_execute.lto_priv.0+0x12c>)
  elp->next     = esp->next;
 8000f0a:	6811      	ldr	r1, [r2, #0]
  elp->listener = currp;
 8000f0c:	69a0      	ldr	r0, [r4, #24]
  elp->next     = esp->next;
 8000f0e:	9106      	str	r1, [sp, #24]
  elp->wflags   = wflags;
 8000f10:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  esp->next     = elp;
 8000f14:	a906      	add	r1, sp, #24
  elp->events   = events;
 8000f16:	2601      	movs	r6, #1
 8000f18:	2700      	movs	r7, #0
  elp->listener = currp;
 8000f1a:	9007      	str	r0, [sp, #28]
  elp->events   = events;
 8000f1c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  esp->next     = elp;
 8000f20:	6011      	str	r1, [r2, #0]
  elp->wflags   = wflags;
 8000f22:	950a      	str	r5, [sp, #40]	@ 0x28
 8000f24:	2000      	movs	r0, #0
 8000f26:	f380 8811 	msr	BASEPRI, r0
 8000f2a:	f383 8811 	msr	BASEPRI, r3
  elp->listener = currp;
 8000f2e:	69a4      	ldr	r4, [r4, #24]
 8000f30:	9401      	str	r4, [sp, #4]
  elp->next     = esp->next;
 8000f32:	6814      	ldr	r4, [r2, #0]
 8000f34:	9400      	str	r4, [sp, #0]
  elp->events   = events;
 8000f36:	2602      	movs	r6, #2
  esp->next     = elp;
 8000f38:	466c      	mov	r4, sp
  elp->events   = events;
 8000f3a:	2700      	movs	r7, #0
 8000f3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  elp->wflags   = wflags;
 8000f40:	9504      	str	r5, [sp, #16]
  esp->next     = elp;
 8000f42:	6014      	str	r4, [r2, #0]
 8000f44:	f380 8811 	msr	BASEPRI, r0
 8000f48:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 8000f4c:	6815      	ldr	r5, [r2, #0]
 8000f4e:	4295      	cmp	r5, r2
 8000f50:	d034      	beq.n	8000fbc <rt_test_008_001_execute.lto_priv.0+0xcc>
 8000f52:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  }

  /* [8.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f8cc 0000 	str.w	r0, [ip]
 8000f5c:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8000f60:	4613      	mov	r3, r2
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 8000f62:	e001      	b.n	8000f68 <rt_test_008_001_execute.lto_priv.0+0x78>
    if (p->next == elp) {
 8000f64:	428b      	cmp	r3, r1
 8000f66:	d043      	beq.n	8000ff0 <rt_test_008_001_execute.lto_priv.0+0x100>
  while (p->next != (event_listener_t *)esp) {
 8000f68:	4618      	mov	r0, r3
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d1f9      	bne.n	8000f64 <rt_test_008_001_execute.lto_priv.0+0x74>
 8000f70:	2300      	movs	r3, #0
 8000f72:	f383 8811 	msr	BASEPRI, r3
 8000f76:	2120      	movs	r1, #32
 8000f78:	f381 8811 	msr	BASEPRI, r1
 8000f7c:	6810      	ldr	r0, [r2, #0]
 8000f7e:	4290      	cmp	r0, r2
 8000f80:	d029      	beq.n	8000fd6 <rt_test_008_001_execute.lto_priv.0+0xe6>
 8000f82:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
  }

  /* [8.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 8000f86:	2304      	movs	r3, #4
 8000f88:	f8cc 3000 	str.w	r3, [ip]
 8000f8c:	f381 8811 	msr	BASEPRI, r1
  p = (event_listener_t *)esp;
 8000f90:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <rt_test_008_001_execute.lto_priv.0+0x124>)
 8000f92:	e001      	b.n	8000f98 <rt_test_008_001_execute.lto_priv.0+0xa8>
    if (p->next == elp) {
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d039      	beq.n	800100c <rt_test_008_001_execute.lto_priv.0+0x11c>
  while (p->next != (event_listener_t *)esp) {
 8000f98:	4619      	mov	r1, r3
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d1f9      	bne.n	8000f94 <rt_test_008_001_execute.lto_priv.0+0xa4>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f383 8811 	msr	BASEPRI, r3
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	f381 8811 	msr	BASEPRI, r1
 8000fac:	6811      	ldr	r1, [r2, #0]
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d121      	bne.n	8000ff6 <rt_test_008_001_execute.lto_priv.0+0x106>
 8000fb2:	f383 8811 	msr	BASEPRI, r3
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
}
 8000fb6:	b00c      	add	sp, #48	@ 0x30
 8000fb8:	bcf0      	pop	{r4, r5, r6, r7}
 8000fba:	4770      	bx	lr
  test_local_fail      = true;
 8000fbc:	4918      	ldr	r1, [pc, #96]	@ (8001020 <rt_test_008_001_execute.lto_priv.0+0x130>)
  test_global_fail     = true;
 8000fbe:	4c19      	ldr	r4, [pc, #100]	@ (8001024 <rt_test_008_001_execute.lto_priv.0+0x134>)
  test_failure_message = msg;
 8000fc0:	4a19      	ldr	r2, [pc, #100]	@ (8001028 <rt_test_008_001_execute.lto_priv.0+0x138>)
  test_local_fail      = true;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8000fc6:	4919      	ldr	r1, [pc, #100]	@ (800102c <rt_test_008_001_execute.lto_priv.0+0x13c>)
  test_global_fail     = true;
 8000fc8:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
 8000fca:	6011      	str	r1, [r2, #0]
 8000fcc:	f380 8811 	msr	BASEPRI, r0
 8000fd0:	b00c      	add	sp, #48	@ 0x30
 8000fd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000fd4:	4770      	bx	lr
  test_local_fail      = true;
 8000fd6:	4812      	ldr	r0, [pc, #72]	@ (8001020 <rt_test_008_001_execute.lto_priv.0+0x130>)
  test_global_fail     = true;
 8000fd8:	4c12      	ldr	r4, [pc, #72]	@ (8001024 <rt_test_008_001_execute.lto_priv.0+0x134>)
  test_failure_message = msg;
 8000fda:	4913      	ldr	r1, [pc, #76]	@ (8001028 <rt_test_008_001_execute.lto_priv.0+0x138>)
  test_local_fail      = true;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 8000fe0:	4812      	ldr	r0, [pc, #72]	@ (800102c <rt_test_008_001_execute.lto_priv.0+0x13c>)
  test_global_fail     = true;
 8000fe2:	7022      	strb	r2, [r4, #0]
  test_failure_message = msg;
 8000fe4:	6008      	str	r0, [r1, #0]
 8000fe6:	f383 8811 	msr	BASEPRI, r3
 8000fea:	b00c      	add	sp, #48	@ 0x30
 8000fec:	bcf0      	pop	{r4, r5, r6, r7}
 8000fee:	4770      	bx	lr
      p->next = elp->next;
 8000ff0:	9b06      	ldr	r3, [sp, #24]
 8000ff2:	6003      	str	r3, [r0, #0]
      break;
 8000ff4:	e7bc      	b.n	8000f70 <rt_test_008_001_execute.lto_priv.0+0x80>
  test_local_fail      = true;
 8000ff6:	480a      	ldr	r0, [pc, #40]	@ (8001020 <rt_test_008_001_execute.lto_priv.0+0x130>)
  test_global_fail     = true;
 8000ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8001024 <rt_test_008_001_execute.lto_priv.0+0x134>)
  test_failure_message = msg;
 8000ffa:	490b      	ldr	r1, [pc, #44]	@ (8001028 <rt_test_008_001_execute.lto_priv.0+0x138>)
  test_local_fail      = true;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 8001000:	480b      	ldr	r0, [pc, #44]	@ (8001030 <rt_test_008_001_execute.lto_priv.0+0x140>)
  test_global_fail     = true;
 8001002:	7022      	strb	r2, [r4, #0]
  test_failure_message = msg;
 8001004:	6008      	str	r0, [r1, #0]
 8001006:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 800100a:	e7e1      	b.n	8000fd0 <rt_test_008_001_execute.lto_priv.0+0xe0>
      p->next = elp->next;
 800100c:	9b00      	ldr	r3, [sp, #0]
 800100e:	600b      	str	r3, [r1, #0]
      break;
 8001010:	e7c6      	b.n	8000fa0 <rt_test_008_001_execute.lto_priv.0+0xb0>
 8001012:	bf00      	nop
 8001014:	200008b4 	.word	0x200008b4
 8001018:	200010b4 	.word	0x200010b4
 800101c:	200011c0 	.word	0x200011c0
 8001020:	200010d1 	.word	0x200010d1
 8001024:	200010d0 	.word	0x200010d0
 8001028:	200010cc 	.word	0x200010cc
 800102c:	0800b154 	.word	0x0800b154
 8001030:	0800b160 	.word	0x0800b160
	...

08001040 <rt_test_008_002_setup.lto_priv.0>:
 * - [8.2.1] Three evenf flag bits are raised then chEvtDispatch() is
 *   invoked, the sequence of handlers calls is tested.
 * .
 */

static void rt_test_008_002_setup(void) {
 8001040:	2320      	movs	r3, #32
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <rt_test_008_002_setup.lto_priv.0+0x14>)
 8001048:	6992      	ldr	r2, [r2, #24]
 800104a:	2300      	movs	r3, #0
 800104c:	6353      	str	r3, [r2, #52]	@ 0x34
 800104e:	f383 8811 	msr	BASEPRI, r3
 8001052:	4770      	bx	lr
 8001054:	200011c0 	.word	0x200011c0
	...

08001060 <rt_test_008_002_execute.lto_priv.0>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void rt_test_008_002_execute(void) {
 8001060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [8.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <rt_test_008_002_execute.lto_priv.0+0x3c>)
 8001064:	4f0e      	ldr	r7, [pc, #56]	@ (80010a0 <rt_test_008_002_execute.lto_priv.0+0x40>)
 8001066:	2601      	movs	r6, #1
 8001068:	601e      	str	r6, [r3, #0]
 800106a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 800106c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800106e:	fa25 f304 	lsr.w	r3, r5, r4
 8001072:	07db      	lsls	r3, r3, #31
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8001074:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8001078:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800107a:	d50d      	bpl.n	8001098 <rt_test_008_002_execute.lto_priv.0+0x38>
      handlers[eid](eid);
 800107c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 8001080:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8001084:	3401      	adds	r4, #1
      handlers[eid](eid);
 8001086:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 8001088:	2d00      	cmp	r5, #0
 800108a:	d1f0      	bne.n	800106e <rt_test_008_002_execute.lto_priv.0+0xe>
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
  }
}
 800108c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8001090:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <rt_test_008_002_execute.lto_priv.0+0x44>)
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <rt_test_008_002_execute.lto_priv.0+0x48>)
 8001094:	f7ff bd4c 	b.w	8000b30 <_test_assert_sequence>
    eid++;
 8001098:	3401      	adds	r4, #1
 800109a:	e7e8      	b.n	800106e <rt_test_008_002_execute.lto_priv.0+0xe>
 800109c:	200010b4 	.word	0x200010b4
 80010a0:	0800ccec 	.word	0x0800ccec
 80010a4:	0800b170 	.word	0x0800b170
 80010a8:	0800b184 	.word	0x0800b184
 80010ac:	00000000 	.word	0x00000000

080010b0 <rt_test_008_003_setup.lto_priv.0>:
 *   been received after 50mS and that the event flags mask has been
 *   emptied.
 * .
 */

static void rt_test_008_003_setup(void) {
 80010b0:	2320      	movs	r3, #32
 80010b2:	f383 8811 	msr	BASEPRI, r3
 80010b6:	4a03      	ldr	r2, [pc, #12]	@ (80010c4 <rt_test_008_003_setup.lto_priv.0+0x14>)
 80010b8:	6992      	ldr	r2, [r2, #24]
 80010ba:	2300      	movs	r3, #0
 80010bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80010be:	f383 8811 	msr	BASEPRI, r3
 80010c2:	4770      	bx	lr
 80010c4:	200011c0 	.word	0x200011c0
	...

080010d0 <rt_test_008_004_setup.lto_priv.0>:
 *   been received after 50mS and that the event flags mask has been
 *   emptied.
 * .
 */

static void rt_test_008_004_setup(void) {
 80010d0:	2320      	movs	r3, #32
 80010d2:	f383 8811 	msr	BASEPRI, r3
 80010d6:	4a03      	ldr	r2, [pc, #12]	@ (80010e4 <rt_test_008_004_setup.lto_priv.0+0x14>)
 80010d8:	6992      	ldr	r2, [r2, #24]
 80010da:	2300      	movs	r3, #0
 80010dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	4770      	bx	lr
 80010e4:	200011c0 	.word	0x200011c0
	...

080010f0 <rt_test_008_005_setup.lto_priv.0>:
 *   flags have been received after 50mS and that the event flags mask
 *   has been emptied.
 * .
 */

static void rt_test_008_005_setup(void) {
 80010f0:	2320      	movs	r3, #32
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	4a03      	ldr	r2, [pc, #12]	@ (8001104 <rt_test_008_005_setup.lto_priv.0+0x14>)
 80010f8:	6992      	ldr	r2, [r2, #24]
 80010fa:	2300      	movs	r3, #0
 80010fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80010fe:	f383 8811 	msr	BASEPRI, r3
 8001102:	4770      	bx	lr
 8001104:	200011c0 	.word	0x200011c0
	...

08001110 <rt_test_008_006_setup.lto_priv.0>:
 8001110:	2320      	movs	r3, #32
 8001112:	f383 8811 	msr	BASEPRI, r3
  m = currp->epending & events;
 8001116:	4a03      	ldr	r2, [pc, #12]	@ (8001124 <rt_test_008_006_setup.lto_priv.0+0x14>)
  currp->epending &= ~events;
 8001118:	6992      	ldr	r2, [r2, #24]
 800111a:	2300      	movs	r3, #0
 800111c:	6353      	str	r3, [r2, #52]	@ 0x34
 800111e:	f383 8811 	msr	BASEPRI, r3
 * .
 */

static void rt_test_008_006_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}
 8001122:	4770      	bx	lr
 8001124:	200011c0 	.word	0x200011c0
	...

08001130 <rt_test_008_007_setup.lto_priv.0>:
 8001130:	2320      	movs	r3, #32
 8001132:	f383 8811 	msr	BASEPRI, r3
  m = currp->epending & events;
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <rt_test_008_007_setup.lto_priv.0+0x1c>)
  currp->epending &= ~events;
 8001138:	6992      	ldr	r2, [r2, #24]
 800113a:	2300      	movs	r3, #0
 800113c:	6353      	str	r3, [r2, #52]	@ 0x34
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	4a03      	ldr	r2, [pc, #12]	@ (8001150 <rt_test_008_007_setup.lto_priv.0+0x20>)
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <rt_test_008_007_setup.lto_priv.0+0x24>)
 8001146:	6012      	str	r2, [r2, #0]
 8001148:	601b      	str	r3, [r3, #0]

static void rt_test_008_007_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 800114a:	4770      	bx	lr
 800114c:	200011c0 	.word	0x200011c0
 8001150:	200008b4 	.word	0x200008b4
 8001154:	200008b0 	.word	0x200008b0
	...

08001160 <dyn_thread1.lto_priv.0>:
#endif
#if CH_CFG_USE_MEMPOOLS
static memory_pool_t mp1;
#endif

static THD_FUNCTION(dyn_thread1, p) {
 8001160:	7800      	ldrb	r0, [r0, #0]
 8001162:	2320      	movs	r3, #32
 8001164:	f383 8811 	msr	BASEPRI, r3
 8001168:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <dyn_thread1.lto_priv.0+0x20>)
 800116a:	4906      	ldr	r1, [pc, #24]	@ (8001184 <dyn_thread1.lto_priv.0+0x24>)
 800116c:	6813      	ldr	r3, [r2, #0]
 800116e:	428b      	cmp	r3, r1
 8001170:	d202      	bcs.n	8001178 <dyn_thread1.lto_priv.0+0x18>
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	6011      	str	r1, [r2, #0]
 8001176:	7018      	strb	r0, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	f383 8811 	msr	BASEPRI, r3
 800117e:	4770      	bx	lr
 8001180:	200010c8 	.word	0x200010c8
 8001184:	200010c8 	.word	0x200010c8
	...

08001190 <rt_test_009_001_setup.lto_priv.0>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <rt_test_009_001_setup.lto_priv.0+0x30>)
 8001192:	1dda      	adds	r2, r3, #7
 *   freeing memory.
 * - [9.1.7] Getting heap info again for verification.
 * .
 */

static void rt_test_009_001_setup(void) {
 8001194:	b410      	push	{r4}
 8001196:	f022 0207 	bic.w	r2, r2, #7
 800119a:	4c0a      	ldr	r4, [pc, #40]	@ (80011c4 <rt_test_009_001_setup.lto_priv.0+0x34>)
  chDbgCheck((heapp != NULL) && (size > 0U));

  /* Adjusting the size in case the initial block was not correctly
     aligned.*/
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800119c:	1ad3      	subs	r3, r2, r3
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 800119e:	f1a4 010c 	sub.w	r1, r4, #12
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80011a2:	f5c3 63cc 	rsb	r3, r3, #1632	@ 0x660
  heapp->provider = NULL;
 80011a6:	2000      	movs	r0, #0
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	6053      	str	r3, [r2, #4]
  heapp->provider = NULL;
 80011ac:	f844 0c0c 	str.w	r0, [r4, #-12]
  H_NEXT(hp) = NULL;
 80011b0:	6010      	str	r0, [r2, #0]
 80011b2:	60cc      	str	r4, [r1, #12]
  H_PAGES(&heapp->header) = 0;
 80011b4:	e944 2002 	strd	r2, r0, [r4, #-8]
 80011b8:	e9c4 4001 	strd	r4, r0, [r4, #4]
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 80011bc:	bc10      	pop	{r4}
 80011be:	4770      	bx	lr
 80011c0:	20000a08 	.word	0x20000a08
 80011c4:	2000107c 	.word	0x2000107c
	...

080011d0 <rt_test_009_002_setup.lto_priv.0>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <rt_test_009_002_setup.lto_priv.0+0x14>)
 80011d2:	2200      	movs	r2, #0
  mp->object_size = size;
 80011d4:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 80011d8:	2104      	movs	r1, #4
 80011da:	e9c3 2000 	strd	r2, r0, [r3]
  mp->align = align;
  mp->provider = provider;
 80011de:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 80011e2:	4770      	bx	lr
 80011e4:	200009f8 	.word	0x200009f8
	...

080011f0 <tmo>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(void *param) {(void)param;}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
	...

08001200 <rt_test_010_007_setup.lto_priv.0>:
 * - [10.7.3] The five threads are terminated.
 * - [10.7.4] The score is printed.
 * .
 */

static void rt_test_010_007_setup(void) {
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <rt_test_010_007_setup.lto_priv.0+0xc>)
 8001202:	2200      	movs	r2, #0
 8001204:	e9c3 3300 	strd	r3, r3, [r3]
 8001208:	609a      	str	r2, [r3, #8]
  chSemObjectInit(&sem1, 0);
}
 800120a:	4770      	bx	lr
 800120c:	200009e8 	.word	0x200009e8

08001210 <rt_test_010_010_setup.lto_priv.0>:
 *   repeated continuously in a one-second time window.
 * - [10.10.2] The score is printed.
 * .
 */

static void rt_test_010_010_setup(void) {
 8001210:	4b02      	ldr	r3, [pc, #8]	@ (800121c <rt_test_010_010_setup.lto_priv.0+0xc>)
 8001212:	2201      	movs	r2, #1
 8001214:	e9c3 3300 	strd	r3, r3, [r3]
 8001218:	609a      	str	r2, [r3, #8]
  chSemObjectInit(&sem1, 1);
}
 800121a:	4770      	bx	lr
 800121c:	200009e8 	.word	0x200009e8

08001220 <rt_test_010_011_setup.lto_priv.0>:
 *   repeated continuously in a one-second time window.
 * - [10.11.2] The score is printed.
 * .
 */

static void rt_test_010_011_setup(void) {
 8001220:	4b02      	ldr	r3, [pc, #8]	@ (800122c <rt_test_010_011_setup.lto_priv.0+0xc>)
 8001222:	2200      	movs	r2, #0
 8001224:	e9c3 3300 	strd	r3, r3, [r3]
 8001228:	609a      	str	r2, [r3, #8]
  chMtxObjectInit(&mtx1);
}
 800122a:	4770      	bx	lr
 800122c:	200009b0 	.word	0x200009b0

08001230 <oslib_test_001_003_setup.lto_priv.0>:
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
 8001230:	b430      	push	{r4, r5}
 8001232:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <oslib_test_001_003_setup.lto_priv.0+0x30>)
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8001234:	490b      	ldr	r1, [pc, #44]	@ (8001264 <oslib_test_001_003_setup.lto_priv.0+0x34>)
 8001236:	6012      	str	r2, [r2, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  mbp->cnt    = (size_t)0;
 8001238:	2400      	movs	r4, #0
 800123a:	f102 0008 	add.w	r0, r2, #8
  mbp->top    = &buf[n];
 800123e:	f101 0510 	add.w	r5, r1, #16
  mbp->buffer = buf;
 8001242:	e942 1506 	strd	r1, r5, [r2, #-24]
 8001246:	f1a2 0318 	sub.w	r3, r2, #24
  mbp->cnt    = (size_t)0;
 800124a:	f842 4c08 	str.w	r4, [r2, #-8]
  mbp->reset  = false;
 800124e:	f802 4c04 	strb.w	r4, [r2, #-4]
  mbp->wrptr  = buf;
 8001252:	e942 1104 	strd	r1, r1, [r2, #-16]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8001256:	bc30      	pop	{r4, r5}
 8001258:	e9c2 2001 	strd	r2, r0, [r2, #4]
 800125c:	60d0      	str	r0, [r2, #12]
 800125e:	4770      	bx	lr
 8001260:	200008a0 	.word	0x200008a0
 8001264:	2000099c 	.word	0x2000099c
	...

08001270 <oslib_test_001_001_setup.lto_priv.0>:
static void oslib_test_001_001_setup(void) {
 8001270:	b430      	push	{r4, r5}
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <oslib_test_001_001_setup.lto_priv.0+0x30>)
 8001274:	490b      	ldr	r1, [pc, #44]	@ (80012a4 <oslib_test_001_001_setup.lto_priv.0+0x34>)
 8001276:	6012      	str	r2, [r2, #0]
 8001278:	2400      	movs	r4, #0
 800127a:	f102 0008 	add.w	r0, r2, #8
 800127e:	f101 0510 	add.w	r5, r1, #16
 8001282:	e942 1506 	strd	r1, r5, [r2, #-24]
 8001286:	f1a2 0318 	sub.w	r3, r2, #24
 800128a:	f842 4c08 	str.w	r4, [r2, #-8]
 800128e:	f802 4c04 	strb.w	r4, [r2, #-4]
 8001292:	e942 1104 	strd	r1, r1, [r2, #-16]
 8001296:	bc30      	pop	{r4, r5}
 8001298:	e9c2 2001 	strd	r2, r0, [r2, #4]
 800129c:	60d0      	str	r0, [r2, #12]
 800129e:	4770      	bx	lr
 80012a0:	200008a0 	.word	0x200008a0
 80012a4:	2000099c 	.word	0x2000099c
	...

080012b0 <oslib_test_001_002_setup.lto_priv.0>:
static void oslib_test_001_002_setup(void) {
 80012b0:	b430      	push	{r4, r5}
 80012b2:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <oslib_test_001_002_setup.lto_priv.0+0x30>)
 80012b4:	490b      	ldr	r1, [pc, #44]	@ (80012e4 <oslib_test_001_002_setup.lto_priv.0+0x34>)
 80012b6:	6012      	str	r2, [r2, #0]
 80012b8:	2400      	movs	r4, #0
 80012ba:	f102 0008 	add.w	r0, r2, #8
 80012be:	f101 0510 	add.w	r5, r1, #16
 80012c2:	e942 1506 	strd	r1, r5, [r2, #-24]
 80012c6:	f1a2 0318 	sub.w	r3, r2, #24
 80012ca:	f842 4c08 	str.w	r4, [r2, #-8]
 80012ce:	f802 4c04 	strb.w	r4, [r2, #-4]
 80012d2:	e942 1104 	strd	r1, r1, [r2, #-16]
 80012d6:	bc30      	pop	{r4, r5}
 80012d8:	e9c2 2001 	strd	r2, r0, [r2, #4]
 80012dc:	60d0      	str	r0, [r2, #12]
 80012de:	4770      	bx	lr
 80012e0:	200008a0 	.word	0x200008a0
 80012e4:	2000099c 	.word	0x2000099c
	...

080012f0 <oslib_test_002_001_setup.lto_priv.0>:
 * - [2.1.13] Write wrapping buffer boundary.
 * - [2.1.14] Read wrapping buffer boundary.
 * .
 */

static void oslib_test_002_001_setup(void) {
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <oslib_test_002_001_setup.lto_priv.0+0x48>)
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <oslib_test_002_001_setup.lto_priv.0+0x4c>)
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
  pp->cnt    = (size_t)0;
  pp->reset  = false;
  pp->wtr    = NULL;
 80012f4:	2000      	movs	r0, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	b410      	push	{r4}
 80012fa:	e943 010a 	strd	r0, r1, [r3, #-40]	@ 0x28
 80012fe:	f1a3 0420 	sub.w	r4, r3, #32
  pp->cnt    = (size_t)0;
 8001302:	2100      	movs	r1, #0
  pp->wrptr  = buf;
 8001304:	e943 220e 	strd	r2, r2, [r3, #-56]	@ 0x38
 8001308:	f1a3 0010 	sub.w	r0, r3, #16
  pp->buffer = buf;
 800130c:	f843 2c40 	str.w	r2, [r3, #-64]
  pp->top    = &buf[n];
 8001310:	3210      	adds	r2, #16
 8001312:	e943 4408 	strd	r4, r4, [r3, #-32]
 8001316:	e943 0004 	strd	r0, r0, [r3, #-16]
 800131a:	e9c3 3300 	strd	r3, r3, [r3]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE);
}
 800131e:	bc10      	pop	{r4}
 8001320:	f843 2c3c 	str.w	r2, [r3, #-60]
  pp->cnt    = (size_t)0;
 8001324:	f843 1c30 	str.w	r1, [r3, #-48]
  pp->reset  = false;
 8001328:	f803 1c2c 	strb.w	r1, [r3, #-44]
 800132c:	f843 1c18 	str.w	r1, [r3, #-24]
 8001330:	f843 1c08 	str.w	r1, [r3, #-8]
 8001334:	6099      	str	r1, [r3, #8]
 8001336:	4770      	bx	lr
 8001338:	20000878 	.word	0x20000878
 800133c:	2000098c 	.word	0x2000098c

08001340 <oslib_test_002_002_setup.lto_priv.0>:
 * - [2.2.1] Reading while pipe is empty.
 * - [2.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_002_002_setup(void) {
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <oslib_test_002_002_setup.lto_priv.0+0x48>)
  pp->buffer = buf;
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <oslib_test_002_002_setup.lto_priv.0+0x4c>)
  pp->wtr    = NULL;
 8001344:	2000      	movs	r0, #0
 8001346:	2100      	movs	r1, #0
 8001348:	b410      	push	{r4}
 800134a:	e943 010a 	strd	r0, r1, [r3, #-40]	@ 0x28
 800134e:	f1a3 0420 	sub.w	r4, r3, #32
  pp->cnt    = (size_t)0;
 8001352:	2100      	movs	r1, #0
  pp->wrptr  = buf;
 8001354:	e943 220e 	strd	r2, r2, [r3, #-56]	@ 0x38
 8001358:	f1a3 0010 	sub.w	r0, r3, #16
  pp->buffer = buf;
 800135c:	f843 2c40 	str.w	r2, [r3, #-64]
  pp->top    = &buf[n];
 8001360:	3208      	adds	r2, #8
 8001362:	e943 4408 	strd	r4, r4, [r3, #-32]
 8001366:	e943 0004 	strd	r0, r0, [r3, #-16]
 800136a:	e9c3 3300 	strd	r3, r3, [r3]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 800136e:	bc10      	pop	{r4}
 8001370:	f843 2c3c 	str.w	r2, [r3, #-60]
  pp->cnt    = (size_t)0;
 8001374:	f843 1c30 	str.w	r1, [r3, #-48]
  pp->reset  = false;
 8001378:	f803 1c2c 	strb.w	r1, [r3, #-44]
 800137c:	f843 1c18 	str.w	r1, [r3, #-24]
 8001380:	f843 1c08 	str.w	r1, [r3, #-8]
 8001384:	6099      	str	r1, [r3, #8]
 8001386:	4770      	bx	lr
 8001388:	20000878 	.word	0x20000878
 800138c:	2000098c 	.word	0x2000098c

08001390 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 8001390:	2000      	movs	r0, #0
 8001392:	4770      	bx	lr
	...

080013a0 <oslib_test_003_001_setup.lto_priv.0>:
  mp->next = NULL;
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <oslib_test_003_001_setup.lto_priv.0+0x10>)
  mp->object_size = size;
 80013a2:	2200      	movs	r2, #0
 80013a4:	2104      	movs	r1, #4
 80013a6:	e9c3 2100 	strd	r2, r1, [r3]
  mp->provider = provider;
 80013aa:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void oslib_test_003_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}
 80013ae:	4770      	bx	lr
 80013b0:	20000828 	.word	0x20000828
	...

080013c0 <oslib_test_003_001_execute.lto_priv.0>:

static void oslib_test_003_001_execute(void) {
 80013c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  unsigned i;

  /* [3.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 80013c4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8001568 <oslib_test_003_001_execute.lto_priv.0+0x1a8>
 80013c8:	4b68      	ldr	r3, [pc, #416]	@ (800156c <oslib_test_003_001_execute.lto_priv.0+0x1ac>)
 80013ca:	4c69      	ldr	r4, [pc, #420]	@ (8001570 <oslib_test_003_001_execute.lto_priv.0+0x1b0>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	f8c8 2000 	str.w	r2, [r8]
 80013d2:	2520      	movs	r5, #32
 80013d4:	2204      	movs	r2, #4
 80013d6:	2000      	movs	r0, #0
 80013d8:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 80013dc:	6821      	ldr	r1, [r4, #0]
 80013de:	6019      	str	r1, [r3, #0]
  mp->next = php;
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 80013e6:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 80013e8:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 80013ea:	440b      	add	r3, r1
  while (n != 0U) {
 80013ec:	d1f4      	bne.n	80013d8 <oslib_test_003_001_execute.lto_priv.0+0x18>
  {
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
  }

  /* [3.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c8 3000 	str.w	r3, [r8]
 80013f4:	2604      	movs	r6, #4
 80013f6:	f04f 0920 	mov.w	r9, #32
 80013fa:	4615      	mov	r5, r2
 80013fc:	f389 8811 	msr	BASEPRI, r9
  objp = mp->next;
 8001400:	6827      	ldr	r7, [r4, #0]
  if (objp != NULL) {
 8001402:	b1df      	cbz	r7, 800143c <oslib_test_003_001_execute.lto_priv.0+0x7c>
    mp->next = mp->next->next;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6023      	str	r3, [r4, #0]
 8001408:	f385 8811 	msr	BASEPRI, r5
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800140c:	3e01      	subs	r6, #1
 800140e:	d1f5      	bne.n	80013fc <oslib_test_003_001_execute.lto_priv.0+0x3c>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }

  /* [3.1.3] Now must be empty.*/
  test_set_step(3);
 8001410:	2303      	movs	r3, #3
 8001412:	f8c8 3000 	str.w	r3, [r8]
 8001416:	2320      	movs	r3, #32
 8001418:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800141c:	6823      	ldr	r3, [r4, #0]
  if (objp != NULL) {
 800141e:	b30b      	cbz	r3, 8001464 <oslib_test_003_001_execute.lto_priv.0+0xa4>
    mp->next = mp->next->next;
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6023      	str	r3, [r4, #0]
 8001424:	f386 8811 	msr	BASEPRI, r6
  test_local_fail      = true;
 8001428:	4c52      	ldr	r4, [pc, #328]	@ (8001574 <oslib_test_003_001_execute.lto_priv.0+0x1b4>)
  test_global_fail     = true;
 800142a:	4853      	ldr	r0, [pc, #332]	@ (8001578 <oslib_test_003_001_execute.lto_priv.0+0x1b8>)
  test_failure_message = msg;
 800142c:	4a53      	ldr	r2, [pc, #332]	@ (800157c <oslib_test_003_001_execute.lto_priv.0+0x1bc>)
 800142e:	4954      	ldr	r1, [pc, #336]	@ (8001580 <oslib_test_003_001_execute.lto_priv.0+0x1c0>)
 8001430:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8001432:	2301      	movs	r3, #1
 8001434:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8001436:	7003      	strb	r3, [r0, #0]
  test_set_step(7);
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  }
}
 8001438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  else if (mp->provider != NULL) {
 800143c:	68e3      	ldr	r3, [r4, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d055      	beq.n	80014ee <oslib_test_003_001_execute.lto_priv.0+0x12e>
    objp = mp->provider(mp->object_size, mp->align);
 8001442:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8001446:	4798      	blx	r3
 8001448:	f387 8811 	msr	BASEPRI, r7
  if (!condition)
 800144c:	2800      	cmp	r0, #0
 800144e:	d1dd      	bne.n	800140c <oslib_test_003_001_execute.lto_priv.0+0x4c>
  test_local_fail      = true;
 8001450:	4c48      	ldr	r4, [pc, #288]	@ (8001574 <oslib_test_003_001_execute.lto_priv.0+0x1b4>)
  test_global_fail     = true;
 8001452:	4849      	ldr	r0, [pc, #292]	@ (8001578 <oslib_test_003_001_execute.lto_priv.0+0x1b8>)
  test_failure_message = msg;
 8001454:	4a49      	ldr	r2, [pc, #292]	@ (800157c <oslib_test_003_001_execute.lto_priv.0+0x1bc>)
 8001456:	494b      	ldr	r1, [pc, #300]	@ (8001584 <oslib_test_003_001_execute.lto_priv.0+0x1c4>)
 8001458:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800145a:	2301      	movs	r3, #1
 800145c:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800145e:	7003      	strb	r3, [r0, #0]
 8001460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  else if (mp->provider != NULL) {
 8001464:	68e3      	ldr	r3, [r4, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d074      	beq.n	8001554 <oslib_test_003_001_execute.lto_priv.0+0x194>
    objp = mp->provider(mp->object_size, mp->align);
 800146a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800146e:	4798      	blx	r3
 8001470:	f386 8811 	msr	BASEPRI, r6
  if (!condition)
 8001474:	2800      	cmp	r0, #0
 8001476:	d1d7      	bne.n	8001428 <oslib_test_003_001_execute.lto_priv.0+0x68>
  test_set_step(4);
 8001478:	4b3c      	ldr	r3, [pc, #240]	@ (800156c <oslib_test_003_001_execute.lto_priv.0+0x1ac>)
 800147a:	2204      	movs	r2, #4
 800147c:	f8c8 2000 	str.w	r2, [r8]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001480:	f103 0610 	add.w	r6, r3, #16
 8001484:	2520      	movs	r5, #32
 8001486:	2000      	movs	r0, #0
      chPoolFree(&mp1, &objects[i]);
 8001488:	461a      	mov	r2, r3
 800148a:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
 800148e:	6821      	ldr	r1, [r4, #0]
 8001490:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 8001494:	6022      	str	r2, [r4, #0]
 8001496:	f380 8811 	msr	BASEPRI, r0
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800149a:	429e      	cmp	r6, r3
 800149c:	d1f4      	bne.n	8001488 <oslib_test_003_001_execute.lto_priv.0+0xc8>
  test_set_step(5);
 800149e:	2305      	movs	r3, #5
 80014a0:	f8c8 3000 	str.w	r3, [r8]
 80014a4:	2504      	movs	r5, #4
 80014a6:	2720      	movs	r7, #32
 80014a8:	f04f 0900 	mov.w	r9, #0
 80014ac:	f387 8811 	msr	BASEPRI, r7
  objp = mp->next;
 80014b0:	6826      	ldr	r6, [r4, #0]
  if (objp != NULL) {
 80014b2:	b196      	cbz	r6, 80014da <oslib_test_003_001_execute.lto_priv.0+0x11a>
    mp->next = mp->next->next;
 80014b4:	6833      	ldr	r3, [r6, #0]
 80014b6:	6023      	str	r3, [r4, #0]
 80014b8:	f389 8811 	msr	BASEPRI, r9
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80014bc:	3d01      	subs	r5, #1
 80014be:	d1f5      	bne.n	80014ac <oslib_test_003_001_execute.lto_priv.0+0xec>
  test_set_step(6);
 80014c0:	2306      	movs	r3, #6
 80014c2:	f8c8 3000 	str.w	r3, [r8]
 80014c6:	2320      	movs	r3, #32
 80014c8:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 80014cc:	6823      	ldr	r3, [r4, #0]
  if (objp != NULL) {
 80014ce:	b18b      	cbz	r3, 80014f4 <oslib_test_003_001_execute.lto_priv.0+0x134>
    mp->next = mp->next->next;
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6023      	str	r3, [r4, #0]
 80014d4:	f385 8811 	msr	BASEPRI, r5
 80014d8:	e7a6      	b.n	8001428 <oslib_test_003_001_execute.lto_priv.0+0x68>
  else if (mp->provider != NULL) {
 80014da:	68e3      	ldr	r3, [r4, #12]
 80014dc:	b13b      	cbz	r3, 80014ee <oslib_test_003_001_execute.lto_priv.0+0x12e>
    objp = mp->provider(mp->object_size, mp->align);
 80014de:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80014e2:	4798      	blx	r3
 80014e4:	f386 8811 	msr	BASEPRI, r6
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d0b1      	beq.n	8001450 <oslib_test_003_001_execute.lto_priv.0+0x90>
 80014ec:	e7e6      	b.n	80014bc <oslib_test_003_001_execute.lto_priv.0+0xfc>
 80014ee:	f383 8811 	msr	BASEPRI, r3
 80014f2:	e7ad      	b.n	8001450 <oslib_test_003_001_execute.lto_priv.0+0x90>
  else if (mp->provider != NULL) {
 80014f4:	68e3      	ldr	r3, [r4, #12]
 80014f6:	b383      	cbz	r3, 800155a <oslib_test_003_001_execute.lto_priv.0+0x19a>
    objp = mp->provider(mp->object_size, mp->align);
 80014f8:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80014fc:	4798      	blx	r3
 80014fe:	f385 8811 	msr	BASEPRI, r5
 8001502:	2800      	cmp	r0, #0
 8001504:	d190      	bne.n	8001428 <oslib_test_003_001_execute.lto_priv.0+0x68>
  mp->provider = provider;
 8001506:	4920      	ldr	r1, [pc, #128]	@ (8001588 <oslib_test_003_001_execute.lto_priv.0+0x1c8>)
  test_set_step(7);
 8001508:	2207      	movs	r2, #7
  mp->object_size = size;
 800150a:	2304      	movs	r3, #4
 800150c:	f8c8 2000 	str.w	r2, [r8]
  mp->next = NULL;
 8001510:	2200      	movs	r2, #0
  mp->object_size = size;
 8001512:	e9c4 2300 	strd	r2, r3, [r4]
  mp->provider = provider;
 8001516:	e9c4 3102 	strd	r3, r1, [r4, #8]
 800151a:	2320      	movs	r3, #32
 800151c:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8001520:	6825      	ldr	r5, [r4, #0]
  if (objp != NULL) {
 8001522:	b165      	cbz	r5, 800153e <oslib_test_003_001_execute.lto_priv.0+0x17e>
    mp->next = mp->next->next;
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	6023      	str	r3, [r4, #0]
 8001528:	f382 8811 	msr	BASEPRI, r2
  test_local_fail      = true;
 800152c:	4c11      	ldr	r4, [pc, #68]	@ (8001574 <oslib_test_003_001_execute.lto_priv.0+0x1b4>)
  test_global_fail     = true;
 800152e:	4812      	ldr	r0, [pc, #72]	@ (8001578 <oslib_test_003_001_execute.lto_priv.0+0x1b8>)
  test_failure_message = msg;
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <oslib_test_003_001_execute.lto_priv.0+0x1bc>)
 8001532:	4916      	ldr	r1, [pc, #88]	@ (800158c <oslib_test_003_001_execute.lto_priv.0+0x1cc>)
 8001534:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8001536:	2301      	movs	r3, #1
 8001538:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800153a:	7003      	strb	r3, [r0, #0]
    return _test_fail(msg);
 800153c:	e77c      	b.n	8001438 <oslib_test_003_001_execute.lto_priv.0+0x78>
  else if (mp->provider != NULL) {
 800153e:	68e3      	ldr	r3, [r4, #12]
 8001540:	b173      	cbz	r3, 8001560 <oslib_test_003_001_execute.lto_priv.0+0x1a0>
    objp = mp->provider(mp->object_size, mp->align);
 8001542:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8001546:	4798      	blx	r3
 8001548:	f385 8811 	msr	BASEPRI, r5
  if (!condition)
 800154c:	2800      	cmp	r0, #0
 800154e:	f43f af73 	beq.w	8001438 <oslib_test_003_001_execute.lto_priv.0+0x78>
 8001552:	e7eb      	b.n	800152c <oslib_test_003_001_execute.lto_priv.0+0x16c>
 8001554:	f386 8811 	msr	BASEPRI, r6
 8001558:	e78e      	b.n	8001478 <oslib_test_003_001_execute.lto_priv.0+0xb8>
 800155a:	f385 8811 	msr	BASEPRI, r5
 800155e:	e7d2      	b.n	8001506 <oslib_test_003_001_execute.lto_priv.0+0x146>
 8001560:	f383 8811 	msr	BASEPRI, r3
 8001564:	e768      	b.n	8001438 <oslib_test_003_001_execute.lto_priv.0+0x78>
 8001566:	bf00      	nop
 8001568:	200010b4 	.word	0x200010b4
 800156c:	2000097c 	.word	0x2000097c
 8001570:	20000828 	.word	0x20000828
 8001574:	200010d1 	.word	0x200010d1
 8001578:	200010d0 	.word	0x200010d0
 800157c:	200010cc 	.word	0x200010cc
 8001580:	0800b194 	.word	0x0800b194
 8001584:	0800b188 	.word	0x0800b188
 8001588:	08001391 	.word	0x08001391
 800158c:	0800b1a4 	.word	0x0800b1a4

08001590 <oslib_test_003_003_setup.lto_priv.0>:
 * - [3.3.1] Trying to allocate with 100mS timeout, must fail because
 *   the pool is empty.
 * .
 */

static void oslib_test_003_003_setup(void) {
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <oslib_test_003_003_setup.lto_priv.0+0x18>)
  mp->next = NULL;
 8001592:	2200      	movs	r2, #0
  mp->object_size = size;
 8001594:	2004      	movs	r0, #4
 8001596:	2104      	movs	r1, #4
 8001598:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800159c:	e9c3 3300 	strd	r3, r3, [r3]
  mp->next = NULL;
 80015a0:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
 80015a2:	619a      	str	r2, [r3, #24]
 80015a4:	609a      	str	r2, [r3, #8]
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 80015a6:	4770      	bx	lr
 80015a8:	20000808 	.word	0x20000808
 80015ac:	00000000 	.word	0x00000000

080015b0 <oslib_test_003_002_setup.lto_priv.0>:
static void oslib_test_003_002_setup(void) {
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <oslib_test_003_002_setup.lto_priv.0+0x18>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	2004      	movs	r0, #4
 80015b6:	2104      	movs	r1, #4
 80015b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80015bc:	e9c3 3300 	strd	r3, r3, [r3]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	619a      	str	r2, [r3, #24]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	4770      	bx	lr
 80015c8:	20000808 	.word	0x20000808
 80015cc:	00000000 	.word	0x00000000

080015d0 <oslib_test_004_001_setup.lto_priv.0>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80015d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <oslib_test_004_001_setup.lto_priv.0+0x30>)
 80015d2:	1dda      	adds	r2, r3, #7
 * - [4.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_004_001_setup(void) {
 80015d4:	b410      	push	{r4}
 80015d6:	f022 0207 	bic.w	r2, r2, #7
 80015da:	4c0a      	ldr	r4, [pc, #40]	@ (8001604 <oslib_test_004_001_setup.lto_priv.0+0x34>)
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80015dc:	1ad3      	subs	r3, r2, r3
  heapp->provider = NULL;
 80015de:	f1a4 010c 	sub.w	r1, r4, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80015e2:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
  heapp->provider = NULL;
 80015e6:	2000      	movs	r0, #0
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80015e8:	08db      	lsrs	r3, r3, #3
 80015ea:	6053      	str	r3, [r2, #4]
  heapp->provider = NULL;
 80015ec:	f844 0c0c 	str.w	r0, [r4, #-12]
  H_NEXT(hp) = NULL;
 80015f0:	6010      	str	r0, [r2, #0]
 80015f2:	60cc      	str	r4, [r1, #12]
  H_PAGES(&heapp->header) = 0;
 80015f4:	e944 2002 	strd	r2, r0, [r4, #-8]
 80015f8:	e9c4 4001 	strd	r4, r0, [r4, #4]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 80015fc:	bc10      	pop	{r4}
 80015fe:	4770      	bx	lr
 8001600:	200008e0 	.word	0x200008e0
 8001604:	2000096c 	.word	0x2000096c
	...

08001610 <chSchDoRescheduleBehind>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;
 8001610:	4a0e      	ldr	r2, [pc, #56]	@ (800164c <chSchDoRescheduleBehind+0x3c>)
  thread_t *tp = tqp->next;
 8001612:	6810      	ldr	r0, [r2, #0]
 8001614:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 8001616:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleBehind(void) {
 8001618:	b410      	push	{r4}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800161a:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	f880 4020 	strb.w	r4, [r0, #32]
  tp->state = CH_STATE_READY;
 8001622:	2400      	movs	r4, #0
 8001624:	f881 4020 	strb.w	r4, [r1, #32]
  tqp->next             = tp->queue.next;
 8001628:	6013      	str	r3, [r2, #0]
  } while (cp->prio >= tp->prio);
 800162a:	688c      	ldr	r4, [r1, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800162c:	6190      	str	r0, [r2, #24]
  } while (cp->prio >= tp->prio);
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	42a2      	cmp	r2, r4
 8001632:	d303      	bcc.n	800163c <chSchDoRescheduleBehind+0x2c>
    cp = cp->queue.next;
 8001634:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	42a2      	cmp	r2, r4
 800163a:	d2fb      	bcs.n	8001634 <chSchDoRescheduleBehind+0x24>
  tp->queue.prev             = cp->queue.prev;
 800163c:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 800163e:	bc10      	pop	{r4}
  tp->queue.prev             = cp->queue.prev;
 8001640:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8001644:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8001646:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8001648:	f7fe be3a 	b.w	80002c0 <_port_switch>
 800164c:	200011c0 	.word	0x200011c0

08001650 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001652:	4c21      	ldr	r4, [pc, #132]	@ (80016d8 <bmk_thread8+0x88>)
 8001654:	4607      	mov	r7, r0
 8001656:	2620      	movs	r6, #32
 8001658:	2500      	movs	r5, #0
 800165a:	e027      	b.n	80016ac <bmk_thread8+0x5c>
 800165c:	f385 8811 	msr	BASEPRI, r5
 8001660:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8001664:	6822      	ldr	r2, [r4, #0]
 8001666:	69a3      	ldr	r3, [r4, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8001668:	6892      	ldr	r2, [r2, #8]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	429a      	cmp	r2, r3
 800166e:	d22e      	bcs.n	80016ce <bmk_thread8+0x7e>
 8001670:	f385 8811 	msr	BASEPRI, r5
 8001674:	f386 8811 	msr	BASEPRI, r6
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8001678:	6822      	ldr	r2, [r4, #0]
 800167a:	69a3      	ldr	r3, [r4, #24]
  if (chSchCanYieldS()) {
 800167c:	6892      	ldr	r2, [r2, #8]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	d221      	bcs.n	80016c8 <bmk_thread8+0x78>
 8001684:	f385 8811 	msr	BASEPRI, r5
 8001688:	f386 8811 	msr	BASEPRI, r6
  return firstprio(&ch.rlist.queue) >= currp->prio;
 800168c:	6822      	ldr	r2, [r4, #0]
 800168e:	69a3      	ldr	r3, [r4, #24]
  if (chSchCanYieldS()) {
 8001690:	6892      	ldr	r2, [r2, #8]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	429a      	cmp	r2, r3
 8001696:	d214      	bcs.n	80016c2 <bmk_thread8+0x72>
 8001698:	f385 8811 	msr	BASEPRI, r5
    (*(uint32_t *)p) += 4;
 800169c:	683b      	ldr	r3, [r7, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800169e:	69a2      	ldr	r2, [r4, #24]
 80016a0:	3304      	adds	r3, #4
 80016a2:	603b      	str	r3, [r7, #0]
  } while(!chThdShouldTerminateX());
 80016a4:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80016a8:	075b      	lsls	r3, r3, #29
 80016aa:	d413      	bmi.n	80016d4 <bmk_thread8+0x84>
 80016ac:	f386 8811 	msr	BASEPRI, r6
  return firstprio(&ch.rlist.queue) >= currp->prio;
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	69a3      	ldr	r3, [r4, #24]
  if (chSchCanYieldS()) {
 80016b4:	6892      	ldr	r2, [r2, #8]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d3cf      	bcc.n	800165c <bmk_thread8+0xc>
    chSchDoRescheduleBehind();
 80016bc:	f7ff ffa8 	bl	8001610 <chSchDoRescheduleBehind>
 80016c0:	e7cc      	b.n	800165c <bmk_thread8+0xc>
 80016c2:	f7ff ffa5 	bl	8001610 <chSchDoRescheduleBehind>
 80016c6:	e7e7      	b.n	8001698 <bmk_thread8+0x48>
 80016c8:	f7ff ffa2 	bl	8001610 <chSchDoRescheduleBehind>
 80016cc:	e7da      	b.n	8001684 <bmk_thread8+0x34>
 80016ce:	f7ff ff9f 	bl	8001610 <chSchDoRescheduleBehind>
 80016d2:	e7cd      	b.n	8001670 <bmk_thread8+0x20>
}
 80016d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200011c0 	.word	0x200011c0
 80016dc:	00000000 	.word	0x00000000

080016e0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80016e0:	b530      	push	{r4, r5, lr}
  thread_t *tp = currp;
 80016e2:	4d1b      	ldr	r5, [pc, #108]	@ (8001750 <chThdExitS+0x70>)
 80016e4:	69a9      	ldr	r1, [r5, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 80016e6:	6a8c      	ldr	r4, [r1, #40]	@ 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 80016e8:	6248      	str	r0, [r1, #36]	@ 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 80016ea:	f101 0c28 	add.w	ip, r1, #40	@ 0x28
 80016ee:	4564      	cmp	r4, ip
 80016f0:	d013      	beq.n	800171a <chThdExitS+0x3a>
  tp->state = CH_STATE_READY;
 80016f2:	f04f 0e00 	mov.w	lr, #0
  tlp->next = tp->queue.next;
 80016f6:	6822      	ldr	r2, [r4, #0]
  cp = (thread_t *)&ch.rlist.queue;
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <chThdExitS+0x70>)
  } while (cp->prio >= tp->prio);
 80016fa:	68a0      	ldr	r0, [r4, #8]
 80016fc:	628a      	str	r2, [r1, #40]	@ 0x28
  tp->state = CH_STATE_READY;
 80016fe:	f884 e020 	strb.w	lr, [r4, #32]
    cp = cp->queue.next;
 8001702:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	4282      	cmp	r2, r0
 8001708:	d2fb      	bcs.n	8001702 <chThdExitS+0x22>
  tp->queue.prev             = cp->queue.prev;
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8001710:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001712:	605c      	str	r4, [r3, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001714:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8001716:	4564      	cmp	r4, ip
 8001718:	d1ed      	bne.n	80016f6 <chThdExitS+0x16>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 800171a:	f891 3022 	ldrb.w	r3, [r1, #34]	@ 0x22
 800171e:	b93b      	cbnz	r3, 8001730 <chThdExitS+0x50>
 8001720:	f891 3021 	ldrb.w	r3, [r1, #33]	@ 0x21
 8001724:	079b      	lsls	r3, r3, #30
 8001726:	d103      	bne.n	8001730 <chThdExitS+0x50>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8001728:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
 800172c:	6113      	str	r3, [r2, #16]
 800172e:	615a      	str	r2, [r3, #20]
  thread_t *tp = tqp->next;
 8001730:	6828      	ldr	r0, [r5, #0]
  otp->state = newstate;
 8001732:	230f      	movs	r3, #15
 8001734:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	602b      	str	r3, [r5, #0]
  currp->state = CH_STATE_CURRENT;
 800173c:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800173e:	605d      	str	r5, [r3, #4]
 8001740:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001744:	61a8      	str	r0, [r5, #24]
  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001746:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chSysSwitch(currp, otp);
 800174a:	f7fe bdb9 	b.w	80002c0 <_port_switch>
 800174e:	bf00      	nop
 8001750:	200011c0 	.word	0x200011c0
	...

08001760 <bmk_thread3>:
 8001760:	2320      	movs	r3, #32
 8001762:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8001766:	f7ff bfbb 	b.w	80016e0 <chThdExitS>
 800176a:	bf00      	nop
 800176c:	0000      	movs	r0, r0
	...

08001770 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 8001770:	b510      	push	{r4, lr}
 8001772:	2320      	movs	r3, #32
 8001774:	4604      	mov	r4, r0
 8001776:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 800177a:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <thread1.lto_priv.1+0x6c>)
 800177c:	6893      	ldr	r3, [r2, #8]
 800177e:	3b01      	subs	r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	6093      	str	r3, [r2, #8]
 8001784:	db12      	blt.n	80017ac <thread1.lto_priv.1+0x3c>
 8001786:	2300      	movs	r3, #0
 8001788:	f383 8811 	msr	BASEPRI, r3
 800178c:	2320      	movs	r3, #32
  test_emit_token(*(char *)p);
 800178e:	7820      	ldrb	r0, [r4, #0]
 8001790:	f383 8811 	msr	BASEPRI, r3
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <thread1.lto_priv.1+0x70>)
 8001796:	4913      	ldr	r1, [pc, #76]	@ (80017e4 <thread1.lto_priv.1+0x74>)
 8001798:	6813      	ldr	r3, [r2, #0]
 800179a:	428b      	cmp	r3, r1
 800179c:	d202      	bcs.n	80017a4 <thread1.lto_priv.1+0x34>
    *test_tokp++ = token;
 800179e:	1c59      	adds	r1, r3, #1
 80017a0:	6011      	str	r1, [r2, #0]
 80017a2:	7018      	strb	r0, [r3, #0]
 80017a4:	2300      	movs	r3, #0
 80017a6:	f383 8811 	msr	BASEPRI, r3
}
 80017aa:	bd10      	pop	{r4, pc}
    currp->u.wtsemp = sp;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <thread1.lto_priv.1+0x78>)
  tp->queue.prev             = tqp->prev;
 80017ae:	6850      	ldr	r0, [r2, #4]
 80017b0:	6999      	ldr	r1, [r3, #24]
 80017b2:	e9c1 2000 	strd	r2, r0, [r1]
 80017b6:	624a      	str	r2, [r1, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 80017b8:	6001      	str	r1, [r0, #0]
  thread_t *tp = tqp->next;
 80017ba:	6818      	ldr	r0, [r3, #0]
  tqp->prev                  = tp;
 80017bc:	6051      	str	r1, [r2, #4]
  otp->state = newstate;
 80017be:	f04f 0c05 	mov.w	ip, #5
 80017c2:	f881 c020 	strb.w	ip, [r1, #32]
  tqp->next             = tp->queue.next;
 80017c6:	6802      	ldr	r2, [r0, #0]
 80017c8:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80017ca:	6053      	str	r3, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 80017cc:	2201      	movs	r2, #1
 80017ce:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80017d2:	6198      	str	r0, [r3, #24]
  chSysSwitch(currp, otp);
 80017d4:	f7fe fd74 	bl	80002c0 <_port_switch>
    sem_insert(currp, &sp->queue);
    chSchGoSleepS(CH_STATE_WTSEM);

    return currp->u.rdymsg;
 80017d8:	e7d5      	b.n	8001786 <thread1.lto_priv.1+0x16>
 80017da:	bf00      	nop
 80017dc:	20001090 	.word	0x20001090
 80017e0:	200010c8 	.word	0x200010c8
 80017e4:	200010c8 	.word	0x200010c8
 80017e8:	200011c0 	.word	0x200011c0
 80017ec:	00000000 	.word	0x00000000

080017f0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 80017f0:	b570      	push	{r4, r5, r6, lr}
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 80017f2:	4c5f      	ldr	r4, [pc, #380]	@ (8001970 <msg_thread1+0x180>)
 80017f4:	4605      	mov	r5, r0
 80017f6:	69a3      	ldr	r3, [r4, #24]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f382 8811 	msr	BASEPRI, r2
  tp->queue.prev             = tqp->prev;
 80017fe:	6b02      	ldr	r2, [r0, #48]	@ 0x30

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->u.sentmsg = msg;
  msg_insert(ctp, &tp->msgqueue);
 8001800:	f100 062c 	add.w	r6, r0, #44	@ 0x2c
 8001804:	e9c3 6200 	strd	r6, r2, [r3]
  ctp->u.sentmsg = msg;
 8001808:	2141      	movs	r1, #65	@ 0x41
 800180a:	6259      	str	r1, [r3, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 800180c:	6013      	str	r3, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800180e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 8001812:	6303      	str	r3, [r0, #48]	@ 0x30
 8001814:	2a0e      	cmp	r2, #14
 8001816:	d071      	beq.n	80018fc <msg_thread1+0x10c>
  thread_t *otp = currp;
 8001818:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 800181a:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800181c:	230c      	movs	r3, #12
 800181e:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8001822:	6803      	ldr	r3, [r0, #0]
 8001824:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001826:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8001828:	2301      	movs	r3, #1
 800182a:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800182e:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8001830:	f7fe fd46 	bl	80002c0 <_port_switch>
 8001834:	2100      	movs	r1, #0
 8001836:	f381 8811 	msr	BASEPRI, r1
 800183a:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 800183c:	69a3      	ldr	r3, [r4, #24]
 800183e:	f382 8811 	msr	BASEPRI, r2
  tp->queue.prev             = tqp->prev;
 8001842:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
  tp->queue.next             = (thread_t *)tqp;
 8001844:	601e      	str	r6, [r3, #0]
  ctp->u.sentmsg = msg;
 8001846:	2042      	movs	r0, #66	@ 0x42
  tp->queue.prev             = tqp->prev;
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	6258      	str	r0, [r3, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 800184c:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 800184e:	632b      	str	r3, [r5, #48]	@ 0x30
  if (tp->state == CH_STATE_WTMSG) {
 8001850:	f895 3020 	ldrb.w	r3, [r5, #32]
 8001854:	2b0e      	cmp	r3, #14
 8001856:	d07c      	beq.n	8001952 <msg_thread1+0x162>
  thread_t *otp = currp;
 8001858:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 800185a:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800185c:	230c      	movs	r3, #12
 800185e:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8001862:	6803      	ldr	r3, [r0, #0]
 8001864:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001866:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8001868:	2301      	movs	r3, #1
 800186a:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800186e:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8001870:	f7fe fd26 	bl	80002c0 <_port_switch>
 8001874:	2100      	movs	r1, #0
 8001876:	f381 8811 	msr	BASEPRI, r1
 800187a:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 800187c:	69a3      	ldr	r3, [r4, #24]
 800187e:	f382 8811 	msr	BASEPRI, r2
  tp->queue.prev             = tqp->prev;
 8001882:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
  tp->queue.next             = (thread_t *)tqp;
 8001884:	601e      	str	r6, [r3, #0]
  ctp->u.sentmsg = msg;
 8001886:	2043      	movs	r0, #67	@ 0x43
  tp->queue.prev             = tqp->prev;
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	6258      	str	r0, [r3, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 800188c:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 800188e:	632b      	str	r3, [r5, #48]	@ 0x30
  if (tp->state == CH_STATE_WTMSG) {
 8001890:	f895 3020 	ldrb.w	r3, [r5, #32]
 8001894:	2b0e      	cmp	r3, #14
 8001896:	d04e      	beq.n	8001936 <msg_thread1+0x146>
  thread_t *otp = currp;
 8001898:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 800189a:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800189c:	230c      	movs	r3, #12
 800189e:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 80018a2:	6803      	ldr	r3, [r0, #0]
 80018a4:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80018a6:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80018ae:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 80018b0:	f7fe fd06 	bl	80002c0 <_port_switch>
 80018b4:	2100      	movs	r1, #0
 80018b6:	f381 8811 	msr	BASEPRI, r1
 80018ba:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 80018bc:	69a3      	ldr	r3, [r4, #24]
 80018be:	f382 8811 	msr	BASEPRI, r2
  tp->queue.prev             = tqp->prev;
 80018c2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
  tp->queue.next             = (thread_t *)tqp;
 80018c4:	601e      	str	r6, [r3, #0]
  ctp->u.sentmsg = msg;
 80018c6:	2044      	movs	r0, #68	@ 0x44
  tp->queue.prev             = tqp->prev;
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	6258      	str	r0, [r3, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 80018cc:	6013      	str	r3, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 80018ce:	f895 2020 	ldrb.w	r2, [r5, #32]
  tqp->prev                  = tp;
 80018d2:	632b      	str	r3, [r5, #48]	@ 0x30
 80018d4:	2a0e      	cmp	r2, #14
 80018d6:	d020      	beq.n	800191a <msg_thread1+0x12a>
  thread_t *otp = currp;
 80018d8:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 80018da:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80018dc:	230c      	movs	r3, #12
 80018de:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 80018e6:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80018e8:	605c      	str	r4, [r3, #4]
 80018ea:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80018ee:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 80018f0:	f7fe fce6 	bl	80002c0 <_port_switch>
 80018f4:	2300      	movs	r3, #0
 80018f6:	f383 8811 	msr	BASEPRI, r3

  chMsgSend(p, 'A');
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
  chMsgSend(p, 'D');
}
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
  tp->state = CH_STATE_READY;
 80018fc:	2300      	movs	r3, #0
  } while (cp->prio >= tp->prio);
 80018fe:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 8001900:	f880 3020 	strb.w	r3, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8001904:	4623      	mov	r3, r4
    cp = cp->queue.next;
 8001906:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	428a      	cmp	r2, r1
 800190c:	d2fb      	bcs.n	8001906 <msg_thread1+0x116>
  tp->queue.prev             = cp->queue.prev;
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8001914:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001916:	605d      	str	r5, [r3, #4]
  return tp;
 8001918:	e77e      	b.n	8001818 <msg_thread1+0x28>
  } while (cp->prio >= tp->prio);
 800191a:	68a8      	ldr	r0, [r5, #8]
  cp = (thread_t *)&ch.rlist.queue;
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <msg_thread1+0x180>)
  tp->state = CH_STATE_READY;
 800191e:	f885 1020 	strb.w	r1, [r5, #32]
    cp = cp->queue.next;
 8001922:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	4282      	cmp	r2, r0
 8001928:	d2fb      	bcs.n	8001922 <msg_thread1+0x132>
  tp->queue.prev             = cp->queue.prev;
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8001930:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001932:	605d      	str	r5, [r3, #4]
  return tp;
 8001934:	e7d0      	b.n	80018d8 <msg_thread1+0xe8>
  } while (cp->prio >= tp->prio);
 8001936:	68a8      	ldr	r0, [r5, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001938:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <msg_thread1+0x180>)
  tp->state = CH_STATE_READY;
 800193a:	f885 1020 	strb.w	r1, [r5, #32]
    cp = cp->queue.next;
 800193e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	4282      	cmp	r2, r0
 8001944:	d2fb      	bcs.n	800193e <msg_thread1+0x14e>
  tp->queue.prev             = cp->queue.prev;
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 800194c:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 800194e:	605d      	str	r5, [r3, #4]
  return tp;
 8001950:	e7a2      	b.n	8001898 <msg_thread1+0xa8>
  } while (cp->prio >= tp->prio);
 8001952:	68a8      	ldr	r0, [r5, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <msg_thread1+0x180>)
  tp->state = CH_STATE_READY;
 8001956:	f885 1020 	strb.w	r1, [r5, #32]
    cp = cp->queue.next;
 800195a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	4282      	cmp	r2, r0
 8001960:	d2fb      	bcs.n	800195a <msg_thread1+0x16a>
  tp->queue.prev             = cp->queue.prev;
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8001968:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 800196a:	605d      	str	r5, [r3, #4]
  return tp;
 800196c:	e774      	b.n	8001858 <msg_thread1+0x68>
 800196e:	bf00      	nop
 8001970:	200011c0 	.word	0x200011c0
	...

08001980 <bmk_thread4>:
static THD_FUNCTION(bmk_thread4, p) {
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8001982:	4c0d      	ldr	r4, [pc, #52]	@ (80019b8 <bmk_thread4+0x38>)
 8001984:	2320      	movs	r3, #32
 8001986:	69a7      	ldr	r7, [r4, #24]
 8001988:	f383 8811 	msr	BASEPRI, r3
  otp->state = newstate;
 800198c:	2603      	movs	r6, #3
  currp->state = CH_STATE_CURRENT;
 800198e:	2501      	movs	r5, #1
  thread_t *otp = currp;
 8001990:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8001992:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8001994:	f881 6020 	strb.w	r6, [r1, #32]
  tqp->next             = tp->queue.next;
 8001998:	6803      	ldr	r3, [r0, #0]
 800199a:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800199c:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 800199e:	f880 5020 	strb.w	r5, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80019a2:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 80019a4:	f7fe fc8c 	bl	80002c0 <_port_switch>
  } while (msg == MSG_OK);
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <bmk_thread4+0x10>
 80019ae:	2300      	movs	r3, #0
 80019b0:	f383 8811 	msr	BASEPRI, r3
}
 80019b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200011c0 	.word	0x200011c0
 80019bc:	00000000 	.word	0x00000000

080019c0 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 80019c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019c4:	4f17      	ldr	r7, [pc, #92]	@ (8001a24 <bmk_thread7+0x64>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80019c6:	69bb      	ldr	r3, [r7, #24]
  while (!chThdShouldTerminateX())
 80019c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019cc:	075a      	lsls	r2, r3, #29
 80019ce:	d427      	bmi.n	8001a20 <bmk_thread7+0x60>
 80019d0:	4c15      	ldr	r4, [pc, #84]	@ (8001a28 <bmk_thread7+0x68>)
 80019d2:	f04f 0820 	mov.w	r8, #32
  otp->state = newstate;
 80019d6:	2605      	movs	r6, #5
  currp->state = CH_STATE_CURRENT;
 80019d8:	2501      	movs	r5, #1
 80019da:	e007      	b.n	80019ec <bmk_thread7+0x2c>
 80019dc:	2300      	movs	r3, #0
 80019de:	f383 8811 	msr	BASEPRI, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019e8:	075b      	lsls	r3, r3, #29
 80019ea:	d419      	bmi.n	8001a20 <bmk_thread7+0x60>
 80019ec:	f388 8811 	msr	BASEPRI, r8
  if (--sp->cnt < (cnt_t)0) {
 80019f0:	68a3      	ldr	r3, [r4, #8]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	60a3      	str	r3, [r4, #8]
 80019f8:	daf0      	bge.n	80019dc <bmk_thread7+0x1c>
    currp->u.wtsemp = sp;
 80019fa:	69b9      	ldr	r1, [r7, #24]
  tp->queue.prev             = tqp->prev;
 80019fc:	6863      	ldr	r3, [r4, #4]
 80019fe:	624c      	str	r4, [r1, #36]	@ 0x24
 8001a00:	e9c1 4300 	strd	r4, r3, [r1]
  tp->queue.prev->queue.next = tp;
 8001a04:	6019      	str	r1, [r3, #0]
  thread_t *tp = tqp->next;
 8001a06:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 8001a08:	f881 6020 	strb.w	r6, [r1, #32]
  tqp->next             = tp->queue.next;
 8001a0c:	6803      	ldr	r3, [r0, #0]
  tqp->prev                  = tp;
 8001a0e:	6061      	str	r1, [r4, #4]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001a10:	605f      	str	r7, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8001a12:	f880 5020 	strb.w	r5, [r0, #32]
  tqp->next             = tp->queue.next;
 8001a16:	603b      	str	r3, [r7, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001a18:	61b8      	str	r0, [r7, #24]
  chSysSwitch(currp, otp);
 8001a1a:	f7fe fc51 	bl	80002c0 <_port_switch>
    return currp->u.rdymsg;
 8001a1e:	e7dd      	b.n	80019dc <bmk_thread7+0x1c>
}
 8001a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a24:	200011c0 	.word	0x200011c0
 8001a28:	200009e8 	.word	0x200009e8
 8001a2c:	00000000 	.word	0x00000000

08001a30 <dyn_create_object_pool.lto_priv.0>:
#endif /* CH_FACTORY_REQUIRES_HEAP */

#if CH_FACTORY_REQUIRES_POOLS || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_pool(const char *name,
                                             dyn_list_t *dlp,
                                             memory_pool_t *mp) {
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8001a32:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8001a34:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8001a36:	460d      	mov	r5, r1
 8001a38:	4606      	mov	r6, r0
 8001a3a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8001a3c:	d103      	bne.n	8001a46 <dyn_create_object_pool.lto_priv.0+0x16>
 8001a3e:	e00d      	b.n	8001a5c <dyn_create_object_pool.lto_priv.0+0x2c>
    p = p->next;
 8001a40:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8001a42:	42a5      	cmp	r5, r4
 8001a44:	d00a      	beq.n	8001a5c <dyn_create_object_pool.lto_priv.0+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8001a46:	2208      	movs	r2, #8
 8001a48:	4631      	mov	r1, r6
 8001a4a:	18a0      	adds	r0, r4, r2
 8001a4c:	f7fe fe48 	bl	80006e0 <strncmp>
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d1f5      	bne.n	8001a40 <dyn_create_object_pool.lto_priv.0+0x10>

  chDbgCheck(name != NULL);

  /* Checking if an object object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8001a54:	b114      	cbz	r4, 8001a5c <dyn_create_object_pool.lto_priv.0+0x2c>
    return NULL;
 8001a56:	2400      	movs	r4, #0

  /* Updating factory list.*/
  dlp->next = (dyn_element_t *)dep;

  return dep;
}
 8001a58:	4620      	mov	r0, r4
 8001a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8001a62:	683c      	ldr	r4, [r7, #0]
  if (objp != NULL) {
 8001a64:	b184      	cbz	r4, 8001a88 <dyn_create_object_pool.lto_priv.0+0x58>
    mp->next = mp->next->next;
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f383 8811 	msr	BASEPRI, r3
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8001a70:	2208      	movs	r2, #8
 8001a72:	18a0      	adds	r0, r4, r2
 8001a74:	4631      	mov	r1, r6
 8001a76:	f7fe fc37 	bl	80002e8 <strncpy>
  dep->next = dlp->next;
 8001a7a:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8001a7c:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8001a7e:	e9c4 3200 	strd	r3, r2, [r4]
}
 8001a82:	4620      	mov	r0, r4
  dlp->next = (dyn_element_t *)dep;
 8001a84:	602c      	str	r4, [r5, #0]
}
 8001a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (mp->provider != NULL) {
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	b14b      	cbz	r3, 8001aa0 <dyn_create_object_pool.lto_priv.0+0x70>
    objp = mp->provider(mp->object_size, mp->align);
 8001a8c:	e9d7 0101 	ldrd	r0, r1, [r7, #4]
 8001a90:	4798      	blx	r3
 8001a92:	2300      	movs	r3, #0
 8001a94:	4604      	mov	r4, r0
 8001a96:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d1e8      	bne.n	8001a70 <dyn_create_object_pool.lto_priv.0+0x40>
 8001a9e:	e7da      	b.n	8001a56 <dyn_create_object_pool.lto_priv.0+0x26>
 8001aa0:	f383 8811 	msr	BASEPRI, r3
 8001aa4:	e7d7      	b.n	8001a56 <dyn_create_object_pool.lto_priv.0+0x26>
 8001aa6:	bf00      	nop
	...

08001ab0 <rt_test_003_002_execute.lto_priv.0>:
 * - [3.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_003_002_execute(void) {
 8001ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8001ab4:	4e6b      	ldr	r6, [pc, #428]	@ (8001c64 <rt_test_003_002_execute.lto_priv.0+0x1b4>)

  /* [3.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8001ab6:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 8001c68 <rt_test_003_002_execute.lto_priv.0+0x1b8>
  return chThdGetSelfX()->prio;
 8001aba:	69b3      	ldr	r3, [r6, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001abc:	486b      	ldr	r0, [pc, #428]	@ (8001c6c <rt_test_003_002_execute.lto_priv.0+0x1bc>)
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8001c70 <rt_test_003_002_execute.lto_priv.0+0x1c0>)
 8001ac2:	4c6c      	ldr	r4, [pc, #432]	@ (8001c74 <rt_test_003_002_execute.lto_priv.0+0x1c4>)
  test_set_step(1);
 8001ac4:	2201      	movs	r2, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001ac6:	3905      	subs	r1, #5
  test_set_step(1);
 8001ac8:	f8c9 2000 	str.w	r2, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001acc:	4a6a      	ldr	r2, [pc, #424]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001ace:	f009 f837 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001ad2:	69b3      	ldr	r3, [r6, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001ad4:	4a68      	ldr	r2, [pc, #416]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001ad6:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001ad8:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001ada:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <rt_test_003_002_execute.lto_priv.0+0x1cc>)
 8001adc:	4868      	ldr	r0, [pc, #416]	@ (8001c80 <rt_test_003_002_execute.lto_priv.0+0x1d0>)
 8001ade:	3904      	subs	r1, #4
 8001ae0:	f009 f82e 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001ae4:	69b2      	ldr	r2, [r6, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001ae6:	4b67      	ldr	r3, [pc, #412]	@ (8001c84 <rt_test_003_002_execute.lto_priv.0+0x1d4>)
 8001ae8:	6891      	ldr	r1, [r2, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001aea:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001aec:	4a62      	ldr	r2, [pc, #392]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001aee:	4866      	ldr	r0, [pc, #408]	@ (8001c88 <rt_test_003_002_execute.lto_priv.0+0x1d8>)
 8001af0:	3903      	subs	r1, #3
 8001af2:	f009 f825 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001af6:	69b2      	ldr	r2, [r6, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001af8:	4b64      	ldr	r3, [pc, #400]	@ (8001c8c <rt_test_003_002_execute.lto_priv.0+0x1dc>)
 8001afa:	6891      	ldr	r1, [r2, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001afc:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001afe:	4a5e      	ldr	r2, [pc, #376]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001b00:	4863      	ldr	r0, [pc, #396]	@ (8001c90 <rt_test_003_002_execute.lto_priv.0+0x1e0>)
 8001b02:	3902      	subs	r1, #2
 8001b04:	f009 f81c 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001b08:	69b2      	ldr	r2, [r6, #24]
 8001b0a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001b0c:	6891      	ldr	r1, [r2, #8]
 8001b0e:	4b61      	ldr	r3, [pc, #388]	@ (8001c94 <rt_test_003_002_execute.lto_priv.0+0x1e4>)
 8001b10:	4a59      	ldr	r2, [pc, #356]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001b12:	4861      	ldr	r0, [pc, #388]	@ (8001c98 <rt_test_003_002_execute.lto_priv.0+0x1e8>)
 8001b14:	3901      	subs	r1, #1
 8001b16:	f009 f813 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001b1a:	4627      	mov	r7, r4
 8001b1c:	6120      	str	r0, [r4, #16]
 * Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8001b1e:	f104 0514 	add.w	r5, r4, #20
 8001b22:	46a0      	mov	r8, r4
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8001b24:	f04f 0a00 	mov.w	sl, #0
    if (threads[i] != NULL) {
 8001b28:	f854 0b04 	ldr.w	r0, [r4], #4
 8001b2c:	b118      	cbz	r0, 8001b36 <rt_test_003_002_execute.lto_priv.0+0x86>
      chThdWait(threads[i]);
 8001b2e:	f009 faaf 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8001b32:	f844 ac04 	str.w	sl, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8001b36:	42ac      	cmp	r4, r5
 8001b38:	d1f6      	bne.n	8001b28 <rt_test_003_002_execute.lto_priv.0+0x78>
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
 8001b3a:	4958      	ldr	r1, [pc, #352]	@ (8001c9c <rt_test_003_002_execute.lto_priv.0+0x1ec>)
 8001b3c:	4858      	ldr	r0, [pc, #352]	@ (8001ca0 <rt_test_003_002_execute.lto_priv.0+0x1f0>)
 8001b3e:	f7fe fff7 	bl	8000b30 <_test_assert_sequence>
 8001b42:	4682      	mov	sl, r0
 8001b44:	b108      	cbz	r0, 8001b4a <rt_test_003_002_execute.lto_priv.0+0x9a>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
    test_wait_threads();
    test_assert_sequence("ABCDE", "invalid sequence");
  }
}
 8001b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b4a:	69b3      	ldr	r3, [r6, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	4851      	ldr	r0, [pc, #324]	@ (8001c98 <rt_test_003_002_execute.lto_priv.0+0x1e8>)
  test_set_step(2);
 8001b52:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001b54:	3901      	subs	r1, #1
  test_set_step(2);
 8001b56:	f8c9 3000 	str.w	r3, [r9]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c94 <rt_test_003_002_execute.lto_priv.0+0x1e4>)
 8001b5c:	f008 fff0 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001b60:	69b3      	ldr	r3, [r6, #24]
 8001b62:	f8c8 0010 	str.w	r0, [r8, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	4a43      	ldr	r2, [pc, #268]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001b6a:	4b48      	ldr	r3, [pc, #288]	@ (8001c8c <rt_test_003_002_execute.lto_priv.0+0x1dc>)
 8001b6c:	4848      	ldr	r0, [pc, #288]	@ (8001c90 <rt_test_003_002_execute.lto_priv.0+0x1e0>)
 8001b6e:	3902      	subs	r1, #2
 8001b70:	f008 ffe6 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001b74:	69b3      	ldr	r3, [r6, #24]
 8001b76:	f8c8 000c 	str.w	r0, [r8, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001b7a:	6899      	ldr	r1, [r3, #8]
 8001b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001b7e:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <rt_test_003_002_execute.lto_priv.0+0x1d4>)
 8001b80:	4841      	ldr	r0, [pc, #260]	@ (8001c88 <rt_test_003_002_execute.lto_priv.0+0x1d8>)
 8001b82:	3903      	subs	r1, #3
 8001b84:	f008 ffdc 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001b88:	69b3      	ldr	r3, [r6, #24]
 8001b8a:	f8c8 0008 	str.w	r0, [r8, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	4a39      	ldr	r2, [pc, #228]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001b92:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <rt_test_003_002_execute.lto_priv.0+0x1cc>)
 8001b94:	483a      	ldr	r0, [pc, #232]	@ (8001c80 <rt_test_003_002_execute.lto_priv.0+0x1d0>)
 8001b96:	3904      	subs	r1, #4
 8001b98:	f008 ffd2 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001b9c:	69b3      	ldr	r3, [r6, #24]
 8001b9e:	f8c8 0004 	str.w	r0, [r8, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	4a34      	ldr	r2, [pc, #208]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001ba6:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <rt_test_003_002_execute.lto_priv.0+0x1c0>)
 8001ba8:	4830      	ldr	r0, [pc, #192]	@ (8001c6c <rt_test_003_002_execute.lto_priv.0+0x1bc>)
 8001baa:	3905      	subs	r1, #5
 8001bac:	f008 ffc8 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001bb0:	f8c8 0000 	str.w	r0, [r8]
 8001bb4:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8001c74 <rt_test_003_002_execute.lto_priv.0+0x1c4>
 8001bb8:	4644      	mov	r4, r8
    if (threads[i] != NULL) {
 8001bba:	f854 0b04 	ldr.w	r0, [r4], #4
 8001bbe:	b118      	cbz	r0, 8001bc8 <rt_test_003_002_execute.lto_priv.0+0x118>
      chThdWait(threads[i]);
 8001bc0:	f009 fa66 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8001bc4:	f844 ac04 	str.w	sl, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8001bc8:	42ac      	cmp	r4, r5
 8001bca:	d1f6      	bne.n	8001bba <rt_test_003_002_execute.lto_priv.0+0x10a>
    test_assert_sequence("ABCDE", "invalid sequence");
 8001bcc:	4933      	ldr	r1, [pc, #204]	@ (8001c9c <rt_test_003_002_execute.lto_priv.0+0x1ec>)
 8001bce:	4834      	ldr	r0, [pc, #208]	@ (8001ca0 <rt_test_003_002_execute.lto_priv.0+0x1f0>)
 8001bd0:	f7fe ffae 	bl	8000b30 <_test_assert_sequence>
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d1b5      	bne.n	8001b46 <rt_test_003_002_execute.lto_priv.0+0x96>
 8001bda:	69b3      	ldr	r3, [r6, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001bdc:	4a26      	ldr	r2, [pc, #152]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	4827      	ldr	r0, [pc, #156]	@ (8001c80 <rt_test_003_002_execute.lto_priv.0+0x1d0>)
  test_set_step(3);
 8001be2:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001be4:	3904      	subs	r1, #4
  test_set_step(3);
 8001be6:	f8c9 3000 	str.w	r3, [r9]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <rt_test_003_002_execute.lto_priv.0+0x1cc>)
 8001bec:	f008 ffa8 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001bf0:	69b3      	ldr	r3, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001bf2:	4a21      	ldr	r2, [pc, #132]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001bf4:	6899      	ldr	r1, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8001bf6:	f8c8 0004 	str.w	r0, [r8, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <rt_test_003_002_execute.lto_priv.0+0x1c0>)
 8001bfc:	481b      	ldr	r0, [pc, #108]	@ (8001c6c <rt_test_003_002_execute.lto_priv.0+0x1bc>)
 8001bfe:	3905      	subs	r1, #5
 8001c00:	f008 ff9e 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001c04:	69b3      	ldr	r3, [r6, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001c06:	4a1c      	ldr	r2, [pc, #112]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001c08:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8001c0a:	f8c8 0000 	str.w	r0, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001c0e:	4b21      	ldr	r3, [pc, #132]	@ (8001c94 <rt_test_003_002_execute.lto_priv.0+0x1e4>)
 8001c10:	4821      	ldr	r0, [pc, #132]	@ (8001c98 <rt_test_003_002_execute.lto_priv.0+0x1e8>)
 8001c12:	3901      	subs	r1, #1
 8001c14:	f008 ff94 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001c18:	69b3      	ldr	r3, [r6, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001c1a:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001c1c:	6899      	ldr	r1, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8001c1e:	f8c8 0010 	str.w	r0, [r8, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <rt_test_003_002_execute.lto_priv.0+0x1dc>)
 8001c24:	481a      	ldr	r0, [pc, #104]	@ (8001c90 <rt_test_003_002_execute.lto_priv.0+0x1e0>)
 8001c26:	3902      	subs	r1, #2
 8001c28:	f008 ff8a 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001c2c:	69b3      	ldr	r3, [r6, #24]
 8001c2e:	f8c8 000c 	str.w	r0, [r8, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8001c32:	6899      	ldr	r1, [r3, #8]
 8001c34:	4a10      	ldr	r2, [pc, #64]	@ (8001c78 <rt_test_003_002_execute.lto_priv.0+0x1c8>)
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <rt_test_003_002_execute.lto_priv.0+0x1d4>)
 8001c38:	4813      	ldr	r0, [pc, #76]	@ (8001c88 <rt_test_003_002_execute.lto_priv.0+0x1d8>)
 8001c3a:	3903      	subs	r1, #3
 8001c3c:	f008 ff80 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001c40:	f8c8 0008 	str.w	r0, [r8, #8]
    if (threads[i] != NULL) {
 8001c44:	f857 0b04 	ldr.w	r0, [r7], #4
 8001c48:	b118      	cbz	r0, 8001c52 <rt_test_003_002_execute.lto_priv.0+0x1a2>
      chThdWait(threads[i]);
 8001c4a:	f009 fa21 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8001c4e:	f847 4c04 	str.w	r4, [r7, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8001c52:	42af      	cmp	r7, r5
 8001c54:	d1f6      	bne.n	8001c44 <rt_test_003_002_execute.lto_priv.0+0x194>
}
 8001c56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8001c5a:	4910      	ldr	r1, [pc, #64]	@ (8001c9c <rt_test_003_002_execute.lto_priv.0+0x1ec>)
 8001c5c:	4810      	ldr	r0, [pc, #64]	@ (8001ca0 <rt_test_003_002_execute.lto_priv.0+0x1f0>)
 8001c5e:	f7fe bf67 	b.w	8000b30 <_test_assert_sequence>
 8001c62:	bf00      	nop
 8001c64:	200011c0 	.word	0x200011c0
 8001c68:	200010b4 	.word	0x200010b4
 8001c6c:	20000a08 	.word	0x20000a08
 8001c70:	0800b1d4 	.word	0x0800b1d4
 8001c74:	200010a0 	.word	0x200010a0
 8001c78:	08000d21 	.word	0x08000d21
 8001c7c:	0800b1c0 	.word	0x0800b1c0
 8001c80:	20000b50 	.word	0x20000b50
 8001c84:	0800b1c4 	.word	0x0800b1c4
 8001c88:	20000c98 	.word	0x20000c98
 8001c8c:	0800b1c8 	.word	0x0800b1c8
 8001c90:	20000de0 	.word	0x20000de0
 8001c94:	0800b1cc 	.word	0x0800b1cc
 8001c98:	20000f28 	.word	0x20000f28
 8001c9c:	0800b170 	.word	0x0800b170
 8001ca0:	0800b1d0 	.word	0x0800b1d0
	...

08001cb0 <rt_test_005_005_teardown.lto_priv.0>:

static void rt_test_005_005_teardown(void) {
 8001cb0:	b570      	push	{r4, r5, r6, lr}
 8001cb2:	4c07      	ldr	r4, [pc, #28]	@ (8001cd0 <rt_test_005_005_teardown.lto_priv.0+0x20>)
 8001cb4:	2600      	movs	r6, #0
 8001cb6:	f104 0514 	add.w	r5, r4, #20
 8001cba:	f854 0b04 	ldr.w	r0, [r4], #4
 8001cbe:	b118      	cbz	r0, 8001cc8 <rt_test_005_005_teardown.lto_priv.0+0x18>
 8001cc0:	f009 f9e6 	bl	800b090 <chThdWait.isra.0>
 8001cc4:	f844 6c04 	str.w	r6, [r4, #-4]
 8001cc8:	42ac      	cmp	r4, r5
 8001cca:	d1f6      	bne.n	8001cba <rt_test_005_005_teardown.lto_priv.0+0xa>
 8001ccc:	bd70      	pop	{r4, r5, r6, pc}
 8001cce:	bf00      	nop
 8001cd0:	200010a0 	.word	0x200010a0
	...

08001ce0 <rt_test_005_006_teardown.lto_priv.0>:
 * - [5.6.6] Signaling the binary semaphore again, the internal state
 *   must not change from "not taken".
 * .
 */

static void rt_test_005_006_teardown(void) {
 8001ce0:	b570      	push	{r4, r5, r6, lr}
 8001ce2:	4c07      	ldr	r4, [pc, #28]	@ (8001d00 <rt_test_005_006_teardown.lto_priv.0+0x20>)
      threads[i] = NULL;
 8001ce4:	2600      	movs	r6, #0
 8001ce6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8001cea:	f854 0b04 	ldr.w	r0, [r4], #4
 8001cee:	b118      	cbz	r0, 8001cf8 <rt_test_005_006_teardown.lto_priv.0+0x18>
      chThdWait(threads[i]);
 8001cf0:	f009 f9ce 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8001cf4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8001cf8:	42ac      	cmp	r4, r5
 8001cfa:	d1f6      	bne.n	8001cea <rt_test_005_006_teardown.lto_priv.0+0xa>
  test_wait_threads();
}
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
 8001cfe:	bf00      	nop
 8001d00:	200010a0 	.word	0x200010a0
	...

08001d10 <rt_test_006_004_teardown.lto_priv.0>:
static void rt_test_006_004_teardown(void) {
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	4c07      	ldr	r4, [pc, #28]	@ (8001d30 <rt_test_006_004_teardown.lto_priv.0+0x20>)
 8001d14:	2600      	movs	r6, #0
 8001d16:	f104 0514 	add.w	r5, r4, #20
 8001d1a:	f854 0b04 	ldr.w	r0, [r4], #4
 8001d1e:	b118      	cbz	r0, 8001d28 <rt_test_006_004_teardown.lto_priv.0+0x18>
 8001d20:	f009 f9b6 	bl	800b090 <chThdWait.isra.0>
 8001d24:	f844 6c04 	str.w	r6, [r4, #-4]
 8001d28:	42ac      	cmp	r4, r5
 8001d2a:	d1f6      	bne.n	8001d1a <rt_test_006_004_teardown.lto_priv.0+0xa>
 8001d2c:	bd70      	pop	{r4, r5, r6, pc}
 8001d2e:	bf00      	nop
 8001d30:	200010a0 	.word	0x200010a0
	...

08001d40 <rt_test_005_005_execute.lto_priv.0>:
static void rt_test_005_005_execute(void) {
 8001d40:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <rt_test_005_005_execute.lto_priv.0+0x6c>)
  test_set_step(1);
 8001d44:	4c1a      	ldr	r4, [pc, #104]	@ (8001db0 <rt_test_005_005_execute.lto_priv.0+0x70>)
  return chThdGetSelfX()->prio;
 8001d46:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001d48:	4a1a      	ldr	r2, [pc, #104]	@ (8001db4 <rt_test_005_005_execute.lto_priv.0+0x74>)
 8001d4a:	6899      	ldr	r1, [r3, #8]
 8001d4c:	481a      	ldr	r0, [pc, #104]	@ (8001db8 <rt_test_005_005_execute.lto_priv.0+0x78>)
  test_set_step(1);
 8001d4e:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001d50:	4429      	add	r1, r5
 8001d52:	2300      	movs	r3, #0
  test_set_step(1);
 8001d54:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001d56:	f008 fef3 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8001d5a:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <rt_test_005_005_execute.lto_priv.0+0x7c>)
  test_set_step(2);
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8001d60:	6010      	str	r0, [r2, #0]
    chSemSignalWait(&sem1, &sem1);
 8001d62:	f009 f945 	bl	800aff0 <chSemSignalWait.constprop.0.isra.0>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8001d66:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <rt_test_005_005_execute.lto_priv.0+0x80>)
  if (!condition)
 8001d68:	681d      	ldr	r5, [r3, #0]
 8001d6a:	429d      	cmp	r5, r3
 8001d6c:	d114      	bne.n	8001d98 <rt_test_005_005_execute.lto_priv.0+0x58>
 8001d6e:	68ab      	ldr	r3, [r5, #8]
 8001d70:	b94b      	cbnz	r3, 8001d86 <rt_test_005_005_execute.lto_priv.0+0x46>
  test_set_step(3);
 8001d72:	2303      	movs	r3, #3
 8001d74:	6023      	str	r3, [r4, #0]
    chSemSignalWait(&sem1, &sem1);
 8001d76:	f009 f93b 	bl	800aff0 <chSemSignalWait.constprop.0.isra.0>
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	42ab      	cmp	r3, r5
 8001d7e:	d10b      	bne.n	8001d98 <rt_test_005_005_execute.lto_priv.0+0x58>
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	b903      	cbnz	r3, 8001d86 <rt_test_005_005_execute.lto_priv.0+0x46>
}
 8001d84:	bd38      	pop	{r3, r4, r5, pc}
  test_local_fail      = true;
 8001d86:	4c0f      	ldr	r4, [pc, #60]	@ (8001dc4 <rt_test_005_005_execute.lto_priv.0+0x84>)
  test_global_fail     = true;
 8001d88:	480f      	ldr	r0, [pc, #60]	@ (8001dc8 <rt_test_005_005_execute.lto_priv.0+0x88>)
  test_failure_message = msg;
 8001d8a:	4a10      	ldr	r2, [pc, #64]	@ (8001dcc <rt_test_005_005_execute.lto_priv.0+0x8c>)
 8001d8c:	4910      	ldr	r1, [pc, #64]	@ (8001dd0 <rt_test_005_005_execute.lto_priv.0+0x90>)
 8001d8e:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8001d90:	2301      	movs	r3, #1
 8001d92:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8001d94:	7003      	strb	r3, [r0, #0]
 8001d96:	bd38      	pop	{r3, r4, r5, pc}
  test_local_fail      = true;
 8001d98:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc4 <rt_test_005_005_execute.lto_priv.0+0x84>)
  test_global_fail     = true;
 8001d9a:	480b      	ldr	r0, [pc, #44]	@ (8001dc8 <rt_test_005_005_execute.lto_priv.0+0x88>)
  test_failure_message = msg;
 8001d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dcc <rt_test_005_005_execute.lto_priv.0+0x8c>)
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <rt_test_005_005_execute.lto_priv.0+0x94>)
 8001da0:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8001da2:	2301      	movs	r3, #1
 8001da4:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8001da6:	7003      	strb	r3, [r0, #0]
 8001da8:	bd38      	pop	{r3, r4, r5, pc}
 8001daa:	bf00      	nop
 8001dac:	200011c0 	.word	0x200011c0
 8001db0:	200010b4 	.word	0x200010b4
 8001db4:	08003af1 	.word	0x08003af1
 8001db8:	20000a08 	.word	0x20000a08
 8001dbc:	200010a0 	.word	0x200010a0
 8001dc0:	20001090 	.word	0x20001090
 8001dc4:	200010d1 	.word	0x200010d1
 8001dc8:	200010d0 	.word	0x200010d0
 8001dcc:	200010cc 	.word	0x200010cc
 8001dd0:	0800b1e8 	.word	0x0800b1e8
 8001dd4:	0800b1d8 	.word	0x0800b1d8
	...

08001de0 <rt_test_009_002_execute.lto_priv.0>:

static void rt_test_009_002_execute(void) {
 8001de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de4:	4b5b      	ldr	r3, [pc, #364]	@ (8001f54 <rt_test_009_002_execute.lto_priv.0+0x174>)
  unsigned i;
  tprio_t prio;

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8001de6:	4f5c      	ldr	r7, [pc, #368]	@ (8001f58 <rt_test_009_002_execute.lto_priv.0+0x178>)
 8001de8:	4d5c      	ldr	r5, [pc, #368]	@ (8001f5c <rt_test_009_002_execute.lto_priv.0+0x17c>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	603a      	str	r2, [r7, #0]
  {
    for (i = 0; i < 4; i++)
 8001dee:	f103 0610 	add.w	r6, r3, #16
 8001df2:	2420      	movs	r4, #32
 8001df4:	2000      	movs	r0, #0
      chPoolFree(&mp1, wa[i]);
 8001df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dfa:	f384 8811 	msr	BASEPRI, r4
  php->next = mp->next;
 8001dfe:	6829      	ldr	r1, [r5, #0]
 8001e00:	6011      	str	r1, [r2, #0]
  mp->next = php;
 8001e02:	602a      	str	r2, [r5, #0]
 8001e04:	f380 8811 	msr	BASEPRI, r0
    for (i = 0; i < 4; i++)
 8001e08:	42b3      	cmp	r3, r6
 8001e0a:	d1f4      	bne.n	8001df6 <rt_test_009_002_execute.lto_priv.0+0x16>
  return ch.rlist.current;
 8001e0c:	4a54      	ldr	r2, [pc, #336]	@ (8001f60 <rt_test_009_002_execute.lto_priv.0+0x180>)
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8001e0e:	4855      	ldr	r0, [pc, #340]	@ (8001f64 <rt_test_009_002_execute.lto_priv.0+0x184>)
  return chThdGetSelfX()->prio;
 8001e10:	6991      	ldr	r1, [r2, #24]
 8001e12:	4a55      	ldr	r2, [pc, #340]	@ (8001f68 <rt_test_009_002_execute.lto_priv.0+0x188>)
 8001e14:	688e      	ldr	r6, [r1, #8]
 8001e16:	4c55      	ldr	r4, [pc, #340]	@ (8001f6c <rt_test_009_002_execute.lto_priv.0+0x18c>)
  test_set_step(3);
 8001e18:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8001e1a:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 8001e1c:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8001e1e:	f008 fd6f 	bl	800a900 <chThdCreateFromMemoryPool.constprop.0>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8001e22:	1eb1      	subs	r1, r6, #2
 8001e24:	4a52      	ldr	r2, [pc, #328]	@ (8001f70 <rt_test_009_002_execute.lto_priv.0+0x190>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8001e26:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8001e28:	4852      	ldr	r0, [pc, #328]	@ (8001f74 <rt_test_009_002_execute.lto_priv.0+0x194>)
 8001e2a:	f008 fd69 	bl	800a900 <chThdCreateFromMemoryPool.constprop.0>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8001e2e:	1ef1      	subs	r1, r6, #3
 8001e30:	4a51      	ldr	r2, [pc, #324]	@ (8001f78 <rt_test_009_002_execute.lto_priv.0+0x198>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8001e32:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8001e34:	4851      	ldr	r0, [pc, #324]	@ (8001f7c <rt_test_009_002_execute.lto_priv.0+0x19c>)
 8001e36:	f008 fd63 	bl	800a900 <chThdCreateFromMemoryPool.constprop.0>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8001e3a:	1f31      	subs	r1, r6, #4
 8001e3c:	4a50      	ldr	r2, [pc, #320]	@ (8001f80 <rt_test_009_002_execute.lto_priv.0+0x1a0>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8001e3e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8001e40:	4850      	ldr	r0, [pc, #320]	@ (8001f84 <rt_test_009_002_execute.lto_priv.0+0x1a4>)
 8001e42:	f008 fd5d 	bl	800a900 <chThdCreateFromMemoryPool.constprop.0>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8001e46:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8001e48:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8001e4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001f88 <rt_test_009_002_execute.lto_priv.0+0x1a8>)
 8001e4c:	484f      	ldr	r0, [pc, #316]	@ (8001f8c <rt_test_009_002_execute.lto_priv.0+0x1ac>)
 8001e4e:	f008 fd57 	bl	800a900 <chThdCreateFromMemoryPool.constprop.0>
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 8001e52:	2304      	movs	r3, #4
 8001e54:	603b      	str	r3, [r7, #0]
  {
    test_assert((threads[0] != NULL) &&
 8001e56:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8001e58:	6120      	str	r0, [r4, #16]
 8001e5a:	4606      	mov	r6, r0
    test_assert((threads[0] != NULL) &&
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d041      	beq.n	8001ee4 <rt_test_009_002_execute.lto_priv.0+0x104>
 8001e60:	6863      	ldr	r3, [r4, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d03e      	beq.n	8001ee4 <rt_test_009_002_execute.lto_priv.0+0x104>
 8001e66:	68a3      	ldr	r3, [r4, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03b      	beq.n	8001ee4 <rt_test_009_002_execute.lto_priv.0+0x104>
 8001e6c:	68e3      	ldr	r3, [r4, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d038      	beq.n	8001ee4 <rt_test_009_002_execute.lto_priv.0+0x104>
  if (!condition)
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d140      	bne.n	8001ef8 <rt_test_009_002_execute.lto_priv.0+0x118>
                "thread creation not failed");
  }

  /* [9.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 8001e76:	2305      	movs	r3, #5
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	f104 0814 	add.w	r8, r4, #20
    if (threads[i] != NULL) {
 8001e7e:	f854 0b04 	ldr.w	r0, [r4], #4
 8001e82:	b118      	cbz	r0, 8001e8c <rt_test_009_002_execute.lto_priv.0+0xac>
      chThdWait(threads[i]);
 8001e84:	f009 f904 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8001e88:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8001e8c:	4544      	cmp	r4, r8
 8001e8e:	d1f6      	bne.n	8001e7e <rt_test_009_002_execute.lto_priv.0+0x9e>
  {
    test_wait_threads();
    test_assert_sequence("ABCD", "invalid sequence");
 8001e90:	493f      	ldr	r1, [pc, #252]	@ (8001f90 <rt_test_009_002_execute.lto_priv.0+0x1b0>)
 8001e92:	4840      	ldr	r0, [pc, #256]	@ (8001f94 <rt_test_009_002_execute.lto_priv.0+0x1b4>)
 8001e94:	f7fe fe4c 	bl	8000b30 <_test_assert_sequence>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	d12b      	bne.n	8001ef4 <rt_test_009_002_execute.lto_priv.0+0x114>
  }

  /* [9.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
 8001e9c:	2306      	movs	r3, #6
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	2404      	movs	r4, #4
 8001ea2:	f04f 0820 	mov.w	r8, #32
 8001ea6:	4606      	mov	r6, r0
 8001ea8:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 8001eac:	682f      	ldr	r7, [r5, #0]
  if (objp != NULL) {
 8001eae:	2f00      	cmp	r7, #0
 8001eb0:	d02c      	beq.n	8001f0c <rt_test_009_002_execute.lto_priv.0+0x12c>
    mp->next = mp->next->next;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	602b      	str	r3, [r5, #0]
 8001eb6:	f386 8811 	msr	BASEPRI, r6
  {
    for (i = 0; i < 4; i++)
 8001eba:	3c01      	subs	r4, #1
 8001ebc:	d1f4      	bne.n	8001ea8 <rt_test_009_002_execute.lto_priv.0+0xc8>
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8001ec4:	682b      	ldr	r3, [r5, #0]
  if (objp != NULL) {
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d033      	beq.n	8001f32 <rt_test_009_002_execute.lto_priv.0+0x152>
    mp->next = mp->next->next;
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	602b      	str	r3, [r5, #0]
 8001ece:	f384 8811 	msr	BASEPRI, r4
  test_local_fail      = true;
 8001ed2:	4c31      	ldr	r4, [pc, #196]	@ (8001f98 <rt_test_009_002_execute.lto_priv.0+0x1b8>)
  test_global_fail     = true;
 8001ed4:	4831      	ldr	r0, [pc, #196]	@ (8001f9c <rt_test_009_002_execute.lto_priv.0+0x1bc>)
  test_failure_message = msg;
 8001ed6:	4a32      	ldr	r2, [pc, #200]	@ (8001fa0 <rt_test_009_002_execute.lto_priv.0+0x1c0>)
 8001ed8:	4932      	ldr	r1, [pc, #200]	@ (8001fa4 <rt_test_009_002_execute.lto_priv.0+0x1c4>)
 8001eda:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8001edc:	2301      	movs	r3, #1
 8001ede:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8001ee0:	7003      	strb	r3, [r0, #0]
    return _test_fail(msg);
 8001ee2:	e007      	b.n	8001ef4 <rt_test_009_002_execute.lto_priv.0+0x114>
  test_local_fail      = true;
 8001ee4:	4c2c      	ldr	r4, [pc, #176]	@ (8001f98 <rt_test_009_002_execute.lto_priv.0+0x1b8>)
  test_global_fail     = true;
 8001ee6:	482d      	ldr	r0, [pc, #180]	@ (8001f9c <rt_test_009_002_execute.lto_priv.0+0x1bc>)
  test_failure_message = msg;
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa0 <rt_test_009_002_execute.lto_priv.0+0x1c0>)
 8001eea:	492f      	ldr	r1, [pc, #188]	@ (8001fa8 <rt_test_009_002_execute.lto_priv.0+0x1c8>)
 8001eec:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8001ef2:	7003      	strb	r3, [r0, #0]
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
}
 8001ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_local_fail      = true;
 8001ef8:	4c27      	ldr	r4, [pc, #156]	@ (8001f98 <rt_test_009_002_execute.lto_priv.0+0x1b8>)
  test_global_fail     = true;
 8001efa:	4828      	ldr	r0, [pc, #160]	@ (8001f9c <rt_test_009_002_execute.lto_priv.0+0x1bc>)
  test_failure_message = msg;
 8001efc:	4a28      	ldr	r2, [pc, #160]	@ (8001fa0 <rt_test_009_002_execute.lto_priv.0+0x1c0>)
 8001efe:	492b      	ldr	r1, [pc, #172]	@ (8001fac <rt_test_009_002_execute.lto_priv.0+0x1cc>)
 8001f00:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8001f02:	2301      	movs	r3, #1
 8001f04:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8001f06:	7003      	strb	r3, [r0, #0]
 8001f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8001f0c:	68eb      	ldr	r3, [r5, #12]
 8001f0e:	b1d3      	cbz	r3, 8001f46 <rt_test_009_002_execute.lto_priv.0+0x166>
    objp = mp->provider(mp->object_size, mp->align);
 8001f10:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8001f14:	4798      	blx	r3
 8001f16:	f387 8811 	msr	BASEPRI, r7
  if (!condition)
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d1cd      	bne.n	8001eba <rt_test_009_002_execute.lto_priv.0+0xda>
  test_local_fail      = true;
 8001f1e:	4c1e      	ldr	r4, [pc, #120]	@ (8001f98 <rt_test_009_002_execute.lto_priv.0+0x1b8>)
  test_global_fail     = true;
 8001f20:	481e      	ldr	r0, [pc, #120]	@ (8001f9c <rt_test_009_002_execute.lto_priv.0+0x1bc>)
  test_failure_message = msg;
 8001f22:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <rt_test_009_002_execute.lto_priv.0+0x1c0>)
 8001f24:	4922      	ldr	r1, [pc, #136]	@ (8001fb0 <rt_test_009_002_execute.lto_priv.0+0x1d0>)
 8001f26:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8001f2c:	7003      	strb	r3, [r0, #0]
 8001f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8001f32:	68eb      	ldr	r3, [r5, #12]
 8001f34:	b153      	cbz	r3, 8001f4c <rt_test_009_002_execute.lto_priv.0+0x16c>
    objp = mp->provider(mp->object_size, mp->align);
 8001f36:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8001f3a:	4798      	blx	r3
 8001f3c:	f384 8811 	msr	BASEPRI, r4
  if (!condition)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d0d7      	beq.n	8001ef4 <rt_test_009_002_execute.lto_priv.0+0x114>
 8001f44:	e7c5      	b.n	8001ed2 <rt_test_009_002_execute.lto_priv.0+0xf2>
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	e7e8      	b.n	8001f1e <rt_test_009_002_execute.lto_priv.0+0x13e>
 8001f4c:	f384 8811 	msr	BASEPRI, r4
 8001f50:	e7d0      	b.n	8001ef4 <rt_test_009_002_execute.lto_priv.0+0x114>
 8001f52:	bf00      	nop
 8001f54:	0800ccf8 	.word	0x0800ccf8
 8001f58:	200010b4 	.word	0x200010b4
 8001f5c:	200009f8 	.word	0x200009f8
 8001f60:	200011c0 	.word	0x200011c0
 8001f64:	0800b1fc 	.word	0x0800b1fc
 8001f68:	0800b1cc 	.word	0x0800b1cc
 8001f6c:	200010a0 	.word	0x200010a0
 8001f70:	0800b1c8 	.word	0x0800b1c8
 8001f74:	0800b204 	.word	0x0800b204
 8001f78:	0800b1c4 	.word	0x0800b1c4
 8001f7c:	0800b20c 	.word	0x0800b20c
 8001f80:	0800b1c0 	.word	0x0800b1c0
 8001f84:	0800b214 	.word	0x0800b214
 8001f88:	0800b1d4 	.word	0x0800b1d4
 8001f8c:	0800b21c 	.word	0x0800b21c
 8001f90:	0800b170 	.word	0x0800b170
 8001f94:	0800b258 	.word	0x0800b258
 8001f98:	200010d1 	.word	0x200010d1
 8001f9c:	200010d0 	.word	0x200010d0
 8001fa0:	200010cc 	.word	0x200010cc
 8001fa4:	0800b270 	.word	0x0800b270
 8001fa8:	0800b224 	.word	0x0800b224
 8001fac:	0800b23c 	.word	0x0800b23c
 8001fb0:	0800b260 	.word	0x0800b260
	...

08001fc0 <oslib_test_001_003_teardown.lto_priv.0>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
 8001fc0:	f008 bc26 	b.w	800a810 <chMBReset.constprop.0>
	...

08001fd0 <oslib_test_001_001_teardown.lto_priv.0>:
static void oslib_test_001_001_teardown(void) {
 8001fd0:	f008 bc1e 	b.w	800a810 <chMBReset.constprop.0>
	...

08001fe0 <oslib_test_001_002_teardown.lto_priv.0>:
static void oslib_test_001_002_teardown(void) {
 8001fe0:	f008 bc16 	b.w	800a810 <chMBReset.constprop.0>
	...

08001ff0 <oslib_test_001_003_execute.lto_priv.0>:
}

static void oslib_test_001_003_execute(void) {
 8001ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
 8001ff4:	4e43      	ldr	r6, [pc, #268]	@ (8002104 <oslib_test_001_003_execute.lto_priv.0+0x114>)
 8001ff6:	2301      	movs	r3, #1
static void oslib_test_001_003_execute(void) {
 8001ff8:	b082      	sub	sp, #8
  test_set_step(1);
 8001ffa:	6033      	str	r3, [r6, #0]
 8001ffc:	2442      	movs	r4, #66	@ 0x42
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8001ffe:	4620      	mov	r0, r4
 8002000:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002004:	f008 fb9c 	bl	800a740 <chMBPostTimeout.constprop.0>
    for (i = 0; i < MB_SIZE; i++) {
 8002008:	3401      	adds	r4, #1
 800200a:	4605      	mov	r5, r0
 800200c:	2800      	cmp	r0, #0
 800200e:	d13d      	bne.n	800208c <oslib_test_001_003_execute.lto_priv.0+0x9c>
 8002010:	2c46      	cmp	r4, #70	@ 0x46
 8002012:	d1f4      	bne.n	8001ffe <oslib_test_001_003_execute.lto_priv.0+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8002014:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8002016:	2101      	movs	r1, #1
 8002018:	2058      	movs	r0, #88	@ 0x58
  test_set_step(2);
 800201a:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800201c:	f008 fb90 	bl	800a740 <chMBPostTimeout.constprop.0>
 8002020:	3001      	adds	r0, #1
 8002022:	d133      	bne.n	800208c <oslib_test_001_003_execute.lto_priv.0+0x9c>
 8002024:	f04f 0820 	mov.w	r8, #32
 8002028:	f388 8811 	msr	BASEPRI, r8

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800202c:	4c36      	ldr	r4, [pc, #216]	@ (8002108 <oslib_test_001_003_execute.lto_priv.0+0x118>)
 800202e:	7d27      	ldrb	r7, [r4, #20]
 8002030:	2f00      	cmp	r7, #0
 8002032:	d163      	bne.n	80020fc <oslib_test_001_003_execute.lto_priv.0+0x10c>
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 8002034:	e9d4 2100 	ldrd	r2, r1, [r4]
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return mbp->cnt;
 8002038:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800203a:	1a88      	subs	r0, r1, r2
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800203c:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 8002040:	d02f      	beq.n	80020a2 <oslib_test_001_003_execute.lto_priv.0+0xb2>
    *mbp->wrptr++ = msg;
 8002042:	68a5      	ldr	r5, [r4, #8]
 8002044:	1d28      	adds	r0, r5, #4
 8002046:	60a0      	str	r0, [r4, #8]
    if (mbp->wrptr >= mbp->top) {
 8002048:	4281      	cmp	r1, r0
    *mbp->wrptr++ = msg;
 800204a:	f04f 0658 	mov.w	r6, #88	@ 0x58
  return (bool)(tqp->next != (const thread_t *)tqp);
 800204e:	6a21      	ldr	r1, [r4, #32]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8002050:	482e      	ldr	r0, [pc, #184]	@ (800210c <oslib_test_001_003_execute.lto_priv.0+0x11c>)
 8002052:	602e      	str	r6, [r5, #0]
      mbp->wrptr = mbp->buffer;
 8002054:	bf88      	it	hi
 8002056:	68a2      	ldrhi	r2, [r4, #8]
 8002058:	60a2      	str	r2, [r4, #8]
    }
    mbp->cnt++;
 800205a:	3301      	adds	r3, #1
 800205c:	4281      	cmp	r1, r0
 800205e:	6123      	str	r3, [r4, #16]
 8002060:	d048      	beq.n	80020f4 <oslib_test_001_003_execute.lto_priv.0+0x104>
  tqp->next             = tp->queue.next;
 8002062:	680b      	ldr	r3, [r1, #0]
 8002064:	6223      	str	r3, [r4, #32]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002066:	2200      	movs	r2, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8002068:	6058      	str	r0, [r3, #4]
  } while (cp->prio >= tp->prio);
 800206a:	6888      	ldr	r0, [r1, #8]
  cp = (thread_t *)&ch.rlist.queue;
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <oslib_test_001_003_execute.lto_priv.0+0x120>)
 800206e:	624a      	str	r2, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8002070:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 8002074:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4282      	cmp	r2, r0
 800207a:	d2fb      	bcs.n	8002074 <oslib_test_001_003_execute.lto_priv.0+0x84>
  tp->queue.prev             = cp->queue.prev;
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	2000      	movs	r0, #0
 8002080:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8002084:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8002086:	6059      	str	r1, [r3, #4]
 8002088:	f380 8811 	msr	BASEPRI, r0
  test_local_fail      = true;
 800208c:	4c21      	ldr	r4, [pc, #132]	@ (8002114 <oslib_test_001_003_execute.lto_priv.0+0x124>)
  test_global_fail     = true;
 800208e:	4822      	ldr	r0, [pc, #136]	@ (8002118 <oslib_test_001_003_execute.lto_priv.0+0x128>)
  test_failure_message = msg;
 8002090:	4a22      	ldr	r2, [pc, #136]	@ (800211c <oslib_test_001_003_execute.lto_priv.0+0x12c>)
 8002092:	4923      	ldr	r1, [pc, #140]	@ (8002120 <oslib_test_001_003_execute.lto_priv.0+0x130>)
 8002094:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002096:	2301      	movs	r3, #1
 8002098:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800209a:	7003      	strb	r3, [r0, #0]
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 800209c:	b002      	add	sp, #8
 800209e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020a2:	f387 8811 	msr	BASEPRI, r7
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 80020a6:	2101      	movs	r1, #1
 80020a8:	2058      	movs	r0, #88	@ 0x58
 80020aa:	f008 fae1 	bl	800a670 <chMBPostAheadTimeout.constprop.0>
  if (!condition)
 80020ae:	3001      	adds	r0, #1
 80020b0:	d1ec      	bne.n	800208c <oslib_test_001_003_execute.lto_priv.0+0x9c>
 80020b2:	f388 8811 	msr	BASEPRI, r8
    msg1 = chMBPostAheadI(&mb1, 'X');
 80020b6:	2058      	movs	r0, #88	@ 0x58
 80020b8:	f008 fa9a 	bl	800a5f0 <chMBPostAheadI.constprop.0>
 80020bc:	f387 8811 	msr	BASEPRI, r7
 80020c0:	3001      	adds	r0, #1
 80020c2:	d1e3      	bne.n	800208c <oslib_test_001_003_execute.lto_priv.0+0x9c>
  test_set_step(3);
 80020c4:	2303      	movs	r3, #3
 80020c6:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 80020c8:	f008 fba2 	bl	800a810 <chMBReset.constprop.0>
  test_set_step(4);
 80020cc:	2304      	movs	r3, #4
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 80020ce:	2101      	movs	r1, #1
 80020d0:	eb0d 0003 	add.w	r0, sp, r3
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 80020d4:	7527      	strb	r7, [r4, #20]
  test_set_step(4);
 80020d6:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 80020d8:	f008 fa2a 	bl	800a530 <chMBFetchTimeout.constprop.0>
 80020dc:	3001      	adds	r0, #1
 80020de:	d1d5      	bne.n	800208c <oslib_test_001_003_execute.lto_priv.0+0x9c>
 80020e0:	f388 8811 	msr	BASEPRI, r8
    msg1 = chMBFetchI(&mb1, &msg2);
 80020e4:	a801      	add	r0, sp, #4
 80020e6:	f008 f9eb 	bl	800a4c0 <chMBFetchI.constprop.0>
 80020ea:	f387 8811 	msr	BASEPRI, r7
 80020ee:	3001      	adds	r0, #1
 80020f0:	d0d4      	beq.n	800209c <oslib_test_001_003_execute.lto_priv.0+0xac>
 80020f2:	e7cb      	b.n	800208c <oslib_test_001_003_execute.lto_priv.0+0x9c>
 80020f4:	2300      	movs	r3, #0
 80020f6:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80020fa:	e7c7      	b.n	800208c <oslib_test_001_003_execute.lto_priv.0+0x9c>
 80020fc:	f385 8811 	msr	BASEPRI, r5
 8002100:	e7c4      	b.n	800208c <oslib_test_001_003_execute.lto_priv.0+0x9c>
 8002102:	bf00      	nop
 8002104:	200010b4 	.word	0x200010b4
 8002108:	20000888 	.word	0x20000888
 800210c:	200008a8 	.word	0x200008a8
 8002110:	200011c0 	.word	0x200011c0
 8002114:	200010d1 	.word	0x200010d1
 8002118:	200010d0 	.word	0x200010d0
 800211c:	200010cc 	.word	0x200010cc
 8002120:	0800b284 	.word	0x0800b284
	...

08002130 <oslib_test_002_002_execute.lto_priv.0>:

static void oslib_test_002_002_execute(void) {
 8002130:	b530      	push	{r4, r5, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8002132:	4c25      	ldr	r4, [pc, #148]	@ (80021c8 <oslib_test_002_002_execute.lto_priv.0+0x98>)

  /* [2.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8002134:	4d25      	ldr	r5, [pc, #148]	@ (80021cc <oslib_test_002_002_execute.lto_priv.0+0x9c>)
 8002136:	7d23      	ldrb	r3, [r4, #20]
 8002138:	2201      	movs	r2, #1
static void oslib_test_002_002_execute(void) {
 800213a:	b085      	sub	sp, #20
  test_set_step(1);
 800213c:	602a      	str	r2, [r5, #0]
 800213e:	b16b      	cbz	r3, 800215c <oslib_test_002_002_execute.lto_priv.0+0x2c>
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
    test_assert(n == 0, "wrong size");
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8002140:	6822      	ldr	r2, [r4, #0]
 8002142:	68e3      	ldr	r3, [r4, #12]
 8002144:	4293      	cmp	r3, r2
 8002146:	d011      	beq.n	800216c <oslib_test_002_002_execute.lto_priv.0+0x3c>
 8002148:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <oslib_test_002_002_execute.lto_priv.0+0xa0>)
  test_local_fail      = true;
 800214a:	4c22      	ldr	r4, [pc, #136]	@ (80021d4 <oslib_test_002_002_execute.lto_priv.0+0xa4>)
  test_global_fail     = true;
 800214c:	4822      	ldr	r0, [pc, #136]	@ (80021d8 <oslib_test_002_002_execute.lto_priv.0+0xa8>)
  test_failure_message = msg;
 800214e:	4923      	ldr	r1, [pc, #140]	@ (80021dc <oslib_test_002_002_execute.lto_priv.0+0xac>)
  test_local_fail      = true;
 8002150:	2301      	movs	r3, #1
 8002152:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002154:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 8002156:	600a      	str	r2, [r1, #0]
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
}
 8002158:	b005      	add	sp, #20
 800215a:	bd30      	pop	{r4, r5, pc}
 800215c:	2110      	movs	r1, #16
 800215e:	4668      	mov	r0, sp
 8002160:	f008 f88e 	bl	800a280 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition)
 8002164:	2800      	cmp	r0, #0
 8002166:	d0eb      	beq.n	8002140 <oslib_test_002_002_execute.lto_priv.0+0x10>
 8002168:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <oslib_test_002_002_execute.lto_priv.0+0xb0>)
 800216a:	e7ee      	b.n	800214a <oslib_test_002_002_execute.lto_priv.0+0x1a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800216c:	68a2      	ldr	r2, [r4, #8]
 800216e:	4293      	cmp	r3, r2
 8002170:	d1ea      	bne.n	8002148 <oslib_test_002_002_execute.lto_priv.0+0x18>
 8002172:	6923      	ldr	r3, [r4, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e7      	bne.n	8002148 <oslib_test_002_002_execute.lto_priv.0+0x18>
  if (pp->reset) {
 8002178:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(2);
 800217a:	2202      	movs	r2, #2
 800217c:	602a      	str	r2, [r5, #0]
 800217e:	b993      	cbnz	r3, 80021a6 <oslib_test_002_002_execute.lto_priv.0+0x76>
 8002180:	2010      	movs	r0, #16
 8002182:	f008 f8ed 	bl	800a360 <chPipeWriteTimeout.part.0.constprop.0>
 8002186:	2808      	cmp	r0, #8
 8002188:	d10d      	bne.n	80021a6 <oslib_test_002_002_execute.lto_priv.0+0x76>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800218a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <oslib_test_002_002_execute.lto_priv.0+0x8a>
  test_local_fail      = true;
 8002192:	4c10      	ldr	r4, [pc, #64]	@ (80021d4 <oslib_test_002_002_execute.lto_priv.0+0xa4>)
  test_global_fail     = true;
 8002194:	4810      	ldr	r0, [pc, #64]	@ (80021d8 <oslib_test_002_002_execute.lto_priv.0+0xa8>)
  test_failure_message = msg;
 8002196:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <oslib_test_002_002_execute.lto_priv.0+0xac>)
 8002198:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <oslib_test_002_002_execute.lto_priv.0+0xa0>)
 800219a:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800219c:	2301      	movs	r3, #1
 800219e:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80021a0:	7003      	strb	r3, [r0, #0]
}
 80021a2:	b005      	add	sp, #20
 80021a4:	bd30      	pop	{r4, r5, pc}
  test_local_fail      = true;
 80021a6:	4c0b      	ldr	r4, [pc, #44]	@ (80021d4 <oslib_test_002_002_execute.lto_priv.0+0xa4>)
  test_global_fail     = true;
 80021a8:	480b      	ldr	r0, [pc, #44]	@ (80021d8 <oslib_test_002_002_execute.lto_priv.0+0xa8>)
  test_failure_message = msg;
 80021aa:	4a0c      	ldr	r2, [pc, #48]	@ (80021dc <oslib_test_002_002_execute.lto_priv.0+0xac>)
 80021ac:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <oslib_test_002_002_execute.lto_priv.0+0xb0>)
 80021ae:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80021b0:	2301      	movs	r3, #1
 80021b2:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80021b4:	7003      	strb	r3, [r0, #0]
 80021b6:	b005      	add	sp, #20
 80021b8:	bd30      	pop	{r4, r5, pc}
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	4293      	cmp	r3, r2
 80021be:	d1e8      	bne.n	8002192 <oslib_test_002_002_execute.lto_priv.0+0x62>
 80021c0:	6923      	ldr	r3, [r4, #16]
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d1e5      	bne.n	8002192 <oslib_test_002_002_execute.lto_priv.0+0x62>
 80021c6:	e7c7      	b.n	8002158 <oslib_test_002_002_execute.lto_priv.0+0x28>
 80021c8:	20000838 	.word	0x20000838
 80021cc:	200010b4 	.word	0x200010b4
 80021d0:	0800b29c 	.word	0x0800b29c
 80021d4:	200010d1 	.word	0x200010d1
 80021d8:	200010d0 	.word	0x200010d0
 80021dc:	200010cc 	.word	0x200010cc
 80021e0:	0800b2b0 	.word	0x0800b2b0
	...

080021f0 <oslib_test_003_003_execute.lto_priv.0>:

static void oslib_test_003_003_execute(void) {

  /* [3.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <oslib_test_003_003_execute.lto_priv.0+0x24>)
static void oslib_test_003_003_execute(void) {
 80021f2:	b510      	push	{r4, lr}
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80021f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  test_set_step(1);
 80021f8:	2401      	movs	r4, #1
 80021fa:	601c      	str	r4, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80021fc:	f008 f928 	bl	800a450 <chGuardedPoolAllocTimeout.constprop.0>
  if (!condition)
 8002200:	b900      	cbnz	r0, 8002204 <oslib_test_003_003_execute.lto_priv.0+0x14>
  }
}
 8002202:	bd10      	pop	{r4, pc}
  test_local_fail      = true;
 8002204:	4804      	ldr	r0, [pc, #16]	@ (8002218 <oslib_test_003_003_execute.lto_priv.0+0x28>)
  test_global_fail     = true;
 8002206:	4905      	ldr	r1, [pc, #20]	@ (800221c <oslib_test_003_003_execute.lto_priv.0+0x2c>)
  test_failure_message = msg;
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <oslib_test_003_003_execute.lto_priv.0+0x30>)
 800220a:	4a06      	ldr	r2, [pc, #24]	@ (8002224 <oslib_test_003_003_execute.lto_priv.0+0x34>)
  test_local_fail      = true;
 800220c:	7004      	strb	r4, [r0, #0]
  test_global_fail     = true;
 800220e:	700c      	strb	r4, [r1, #0]
  test_failure_message = msg;
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	bd10      	pop	{r4, pc}
 8002214:	200010b4 	.word	0x200010b4
 8002218:	200010d1 	.word	0x200010d1
 800221c:	200010d0 	.word	0x200010d0
 8002220:	200010cc 	.word	0x200010cc
 8002224:	0800b194 	.word	0x0800b194
	...

08002230 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
	...

08002240 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
	...

08002250 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8002250:	e7fe      	b.n	8002250 <__default_exit>
 8002252:	bf00      	nop
	...

08002260 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4d13      	ldr	r5, [pc, #76]	@ (80022b0 <__init_ram_areas+0x50>)
 8002264:	f105 0480 	add.w	r4, r5, #128	@ 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8002268:	e955 0103 	ldrd	r0, r1, [r5, #-12]
 800226c:	4288      	cmp	r0, r1
    uint32_t *tp = rap->init_text_area;
 800226e:	f855 2c10 	ldr.w	r2, [r5, #-16]
    while (p < rap->clear_area) {
 8002272:	d20d      	bcs.n	8002290 <__init_ram_areas+0x30>
 8002274:	3a04      	subs	r2, #4
    uint32_t *p = rap->init_area;
 8002276:	4603      	mov	r3, r0
      *p = *tp;
 8002278:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800227c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8002280:	428b      	cmp	r3, r1
 8002282:	d3f9      	bcc.n	8002278 <__init_ram_areas+0x18>
 8002284:	1e4b      	subs	r3, r1, #1
 8002286:	1a1b      	subs	r3, r3, r0
 8002288:	f023 0303 	bic.w	r3, r3, #3
 800228c:	3304      	adds	r3, #4
 800228e:	4418      	add	r0, r3
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8002290:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8002294:	4282      	cmp	r2, r0
 8002296:	d907      	bls.n	80022a8 <__init_ram_areas+0x48>
      *p = 0;
 8002298:	3a01      	subs	r2, #1
 800229a:	1a12      	subs	r2, r2, r0
 800229c:	f022 0203 	bic.w	r2, r2, #3
 80022a0:	3204      	adds	r2, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	f7fe f854 	bl	8000350 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80022a8:	3510      	adds	r5, #16
 80022aa:	42a5      	cmp	r5, r4
 80022ac:	d1dc      	bne.n	8002268 <__init_ram_areas+0x8>
#endif
}
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	0800cd1c 	.word	0x0800cd1c
	...

080022c0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80022c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80022c4:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	079b      	lsls	r3, r3, #30
 80022cc:	d40b      	bmi.n	80022e6 <VectorB0+0x26>
 80022ce:	2320      	movs	r3, #32
 80022d0:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80022d4:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <VectorB0+0xf0>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80022dc:	d150      	bne.n	8002380 <VectorB0+0xc0>
 80022de:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80022e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    STM32_ST_TIM->SR = 0U;
 80022e6:	2400      	movs	r4, #0
 80022e8:	613c      	str	r4, [r7, #16]
 80022ea:	2320      	movs	r3, #32
 80022ec:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80022f0:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80023b4 <VectorB0+0xf4>
 80022f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022f6:	f8d8 301c 	ldr.w	r3, [r8, #28]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80022fa:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80022fe:	6899      	ldr	r1, [r3, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002300:	eba0 0902 	sub.w	r9, r0, r2
 8002304:	4589      	cmp	r9, r1
 8002306:	f108 0a1c 	add.w	sl, r8, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 800230a:	bf28      	it	cs
 800230c:	4626      	movcs	r6, r4
    if (nowdelta < vtp->delta) {
 800230e:	d324      	bcc.n	800235a <VectorB0+0x9a>
 8002310:	2520      	movs	r5, #32
 8002312:	e001      	b.n	8002318 <VectorB0+0x58>
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8002314:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002318:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 800231a:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800231c:	4550      	cmp	r0, sl
      ch.vtlist.lasttime += vtp->delta;
 800231e:	f8c8 2028 	str.w	r2, [r8, #40]	@ 0x28
      nowdelta -= vtp->delta;
 8002322:	eba9 0901 	sub.w	r9, r9, r1
      fn = vtp->func;
 8002326:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002328:	f8c0 a004 	str.w	sl, [r0, #4]
      ch.vtlist.next = vtp->next;
 800232c:	f8c8 001c 	str.w	r0, [r8, #28]
      vtp->func = NULL;
 8002330:	60dc      	str	r4, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002332:	bf08      	it	eq
 8002334:	60fc      	streq	r4, [r7, #12]
 8002336:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800233a:	6918      	ldr	r0, [r3, #16]
 800233c:	4790      	blx	r2
 800233e:	f385 8811 	msr	BASEPRI, r5
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8002342:	f8d8 301c 	ldr.w	r3, [r8, #28]
    }
    while (vtp->delta <= nowdelta);
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	4589      	cmp	r9, r1
 800234a:	d2e3      	bcs.n	8002314 <VectorB0+0x54>
  return (systime_t)STM32_ST_TIM->CNT;
 800234c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800234e:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 8002352:	eba0 0902 	sub.w	r9, r0, r2
    if (nowdelta < vtp->delta) {
 8002356:	4589      	cmp	r9, r1
 8002358:	d2da      	bcs.n	8002310 <VectorB0+0x50>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800235a:	4553      	cmp	r3, sl
 800235c:	d00c      	beq.n	8002378 <VectorB0+0xb8>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800235e:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8002360:	f8c8 0028 	str.w	r0, [r8, #40]	@ 0x28
  ch.vtlist.next->delta -= nowdelta;
 8002364:	1a09      	subs	r1, r1, r0
 8002366:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002368:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  return systime + (systime_t)interval;
 800236c:	2a02      	cmp	r2, #2
 800236e:	bf2c      	ite	cs
 8002370:	1880      	addcs	r0, r0, r2
 8002372:	3002      	addcc	r0, #2
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	6348      	str	r0, [r1, #52]	@ 0x34
 8002378:	2300      	movs	r3, #0
 800237a:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void osalSysUnlockFromISR(void) {

  chSysUnlockFromISR();
}
 800237e:	e7a6      	b.n	80022ce <VectorB0+0xe>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002380:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002384:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002388:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 800238c:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002390:	f382 8809 	msr	PSP, r2
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8002394:	4a07      	ldr	r2, [pc, #28]	@ (80023b4 <VectorB0+0xf4>)
 8002396:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8002398:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800239a:	6889      	ldr	r1, [r1, #8]
 800239c:	6892      	ldr	r2, [r2, #8]
 800239e:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80023a0:	bf8c      	ite	hi
 80023a2:	4a05      	ldrhi	r2, [pc, #20]	@ (80023b8 <VectorB0+0xf8>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80023a4:	4a05      	ldrls	r2, [pc, #20]	@ (80023bc <VectorB0+0xfc>)
 80023a6:	f843 2c08 	str.w	r2, [r3, #-8]
}
 80023aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00
 80023b4:	200011c0 	.word	0x200011c0
 80023b8:	080002e1 	.word	0x080002e1
 80023bc:	080002e4 	.word	0x080002e4

080023c0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80023c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 80023c4:	4c8c      	ldr	r4, [pc, #560]	@ (80025f8 <VectorD8+0x238>)
 80023c6:	f8d4 a074 	ldr.w	sl, [r4, #116]	@ 0x74
  uint16_t cr1 = u->CR1;
 80023ca:	f8da 900c 	ldr.w	r9, [sl, #12]
  uint16_t sr = u->SR;
 80023ce:	f8da 3000 	ldr.w	r3, [sl]
  if (sr & USART_SR_LBD) {
 80023d2:	05d9      	lsls	r1, r3, #23
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80023d4:	b083      	sub	sp, #12
  uint16_t sr = u->SR;
 80023d6:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80023d8:	f100 809c 	bmi.w	8002514 <VectorD8+0x154>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80023dc:	2320      	movs	r3, #32
 80023de:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80023e2:	f015 0f2f 	tst.w	r5, #47	@ 0x2f
 80023e6:	d05d      	beq.n	80024a4 <VectorD8+0xe4>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80023e8:	4f84      	ldr	r7, [pc, #528]	@ (80025fc <VectorD8+0x23c>)
 80023ea:	f04f 0800 	mov.w	r8, #0
 80023ee:	f107 0608 	add.w	r6, r7, #8
 80023f2:	e00b      	b.n	800240c <VectorD8+0x4c>
    if (sr & USART_SR_RXNE)
 80023f4:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80023f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80023fa:	f894 b078 	ldrb.w	fp, [r4, #120]	@ 0x78
    if (sr & USART_SR_RXNE)
 80023fe:	d420      	bmi.n	8002442 <VectorD8+0x82>
    sr = u->SR;
 8002400:	f8da 3000 	ldr.w	r3, [sl]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002404:	f013 0f2f 	tst.w	r3, #47	@ 0x2f
    sr = u->SR;
 8002408:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800240a:	d04b      	beq.n	80024a4 <VectorD8+0xe4>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800240c:	072a      	lsls	r2, r5, #28
 800240e:	d0f1      	beq.n	80023f4 <VectorD8+0x34>
  if (sr & USART_SR_PE)
 8002410:	f345 0100 	sbfx	r1, r5, #0, #1
  if (sr & USART_SR_ORE)
 8002414:	f3c5 03c0 	ubfx	r3, r5, #3, #1
  if (sr & USART_SR_PE)
 8002418:	f001 0120 	and.w	r1, r1, #32
 800241c:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
  if (sr & USART_SR_FE)
 8002420:	07ab      	lsls	r3, r5, #30
    sts |= SD_FRAMING_ERROR;
 8002422:	bf48      	it	mi
 8002424:	f041 0140 	orrmi.w	r1, r1, #64	@ 0x40
  if (sr & USART_SR_NE)
 8002428:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
 800242a:	bf48      	it	mi
 800242c:	f441 7180 	orrmi.w	r1, r1, #256	@ 0x100
 8002430:	4638      	mov	r0, r7
 8002432:	f7fe faed 	bl	8000a10 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8002436:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002438:	f8da 3004 	ldr.w	r3, [sl, #4]
 800243c:	f894 b078 	ldrb.w	fp, [r4, #120]	@ 0x78
    if (sr & USART_SR_RXNE)
 8002440:	d5de      	bpl.n	8002400 <VectorD8+0x40>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002442:	6962      	ldr	r2, [r4, #20]
 8002444:	2a00      	cmp	r2, #0
 8002446:	d047      	beq.n	80024d8 <VectorD8+0x118>
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8002448:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 800244c:	428a      	cmp	r2, r1
 800244e:	d04d      	beq.n	80024ec <VectorD8+0x12c>
    iqp->q_counter++;
 8002450:	6961      	ldr	r1, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8002452:	ea0b 0b03 	and.w	fp, fp, r3
 8002456:	3101      	adds	r1, #1
    *iqp->q_wrptr++ = b;
 8002458:	1c53      	adds	r3, r2, #1
 800245a:	6223      	str	r3, [r4, #32]
    iqp->q_counter++;
 800245c:	6161      	str	r1, [r4, #20]
    *iqp->q_wrptr++ = b;
 800245e:	f882 b000 	strb.w	fp, [r2]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002462:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002466:	68e1      	ldr	r1, [r4, #12]
 8002468:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800246a:	bf24      	itt	cs
 800246c:	69a3      	ldrcs	r3, [r4, #24]
 800246e:	6223      	strcs	r3, [r4, #32]
 8002470:	42b1      	cmp	r1, r6
 8002472:	d0c5      	beq.n	8002400 <VectorD8+0x40>
  tqp->next             = tp->queue.next;
 8002474:	680b      	ldr	r3, [r1, #0]
 8002476:	60e3      	str	r3, [r4, #12]
  } while (cp->prio >= tp->prio);
 8002478:	6888      	ldr	r0, [r1, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 800247a:	605e      	str	r6, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
 800247c:	4b60      	ldr	r3, [pc, #384]	@ (8002600 <VectorD8+0x240>)
 800247e:	f8c1 8024 	str.w	r8, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8002482:	f881 8020 	strb.w	r8, [r1, #32]
    cp = cp->queue.next;
 8002486:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	4282      	cmp	r2, r0
 800248c:	d2fb      	bcs.n	8002486 <VectorD8+0xc6>
  tp->queue.prev             = cp->queue.prev;
 800248e:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8002490:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8002492:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8002494:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8002496:	6059      	str	r1, [r3, #4]
    sr = u->SR;
 8002498:	f8da 3000 	ldr.w	r3, [sl]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800249c:	f013 0f2f 	tst.w	r3, #47	@ 0x2f
    sr = u->SR;
 80024a0:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80024a2:	d1b3      	bne.n	800240c <VectorD8+0x4c>
 80024a4:	2300      	movs	r3, #0
 80024a6:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80024aa:	f019 0f80 	tst.w	r9, #128	@ 0x80
 80024ae:	d001      	beq.n	80024b4 <VectorD8+0xf4>
 80024b0:	062a      	lsls	r2, r5, #24
 80024b2:	d457      	bmi.n	8002564 <VectorD8+0x1a4>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80024b4:	f019 0f40 	tst.w	r9, #64	@ 0x40
 80024b8:	d001      	beq.n	80024be <VectorD8+0xfe>
 80024ba:	066b      	lsls	r3, r5, #25
 80024bc:	d41f      	bmi.n	80024fe <VectorD8+0x13e>
 80024be:	2320      	movs	r3, #32
 80024c0:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80024c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002604 <VectorD8+0x244>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 80024cc:	d132      	bne.n	8002534 <VectorD8+0x174>
 80024ce:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 80024d2:	b003      	add	sp, #12
 80024d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024d8:	2104      	movs	r1, #4
 80024da:	4848      	ldr	r0, [pc, #288]	@ (80025fc <VectorD8+0x23c>)
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	f7fe fa97 	bl	8000a10 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80024e2:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 80024e6:	428a      	cmp	r2, r1
 80024e8:	9b01      	ldr	r3, [sp, #4]
 80024ea:	d1b1      	bne.n	8002450 <VectorD8+0x90>
 80024ec:	6961      	ldr	r1, [r4, #20]
 80024ee:	2900      	cmp	r1, #0
 80024f0:	d0ae      	beq.n	8002450 <VectorD8+0x90>
 80024f2:	4842      	ldr	r0, [pc, #264]	@ (80025fc <VectorD8+0x23c>)
 80024f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024f8:	f7fe fa8a 	bl	8000a10 <chEvtBroadcastFlagsI>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 80024fc:	e780      	b.n	8002400 <VectorD8+0x40>
 80024fe:	2320      	movs	r3, #32
 8002500:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002504:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8002508:	429a      	cmp	r2, r3
 800250a:	d059      	beq.n	80025c0 <VectorD8+0x200>
 800250c:	2300      	movs	r3, #0
 800250e:	f383 8811 	msr	BASEPRI, r3
}
 8002512:	e7d4      	b.n	80024be <VectorD8+0xfe>
 8002514:	2320      	movs	r3, #32
 8002516:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 800251a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800251e:	1d20      	adds	r0, r4, #4
 8002520:	f7fe fa76 	bl	8000a10 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8002524:	f46f 7380 	mvn.w	r3, #256	@ 0x100
 8002528:	f8ca 3000 	str.w	r3, [sl]
 800252c:	2300      	movs	r3, #0
 800252e:	f383 8811 	msr	BASEPRI, r3
}
 8002532:	e753      	b.n	80023dc <VectorD8+0x1c>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002534:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 8002538:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800253c:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8002540:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002544:	f382 8809 	msr	PSP, r2
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8002548:	4a2d      	ldr	r2, [pc, #180]	@ (8002600 <VectorD8+0x240>)
 800254a:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800254c:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800254e:	6889      	ldr	r1, [r1, #8]
 8002550:	6892      	ldr	r2, [r2, #8]
 8002552:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002554:	bf8c      	ite	hi
 8002556:	4a2c      	ldrhi	r2, [pc, #176]	@ (8002608 <VectorD8+0x248>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002558:	4a2c      	ldrls	r2, [pc, #176]	@ (800260c <VectorD8+0x24c>)
 800255a:	f843 2c08 	str.w	r2, [r3, #-8]
}
 800255e:	b003      	add	sp, #12
 8002560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002564:	2320      	movs	r3, #32
 8002566:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 800256a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 800256e:	429a      	cmp	r2, r3
 8002570:	d034      	beq.n	80025dc <VectorD8+0x21c>
    uint8_t b;

    oqp->q_counter++;
 8002572:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002574:	3201      	adds	r2, #1
 8002576:	63a2      	str	r2, [r4, #56]	@ 0x38
    b = *oqp->q_rdptr++;
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	64a2      	str	r2, [r4, #72]	@ 0x48
 800257c:	781e      	ldrb	r6, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800257e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002580:	429a      	cmp	r2, r3
 8002582:	d301      	bcc.n	8002588 <VectorD8+0x1c8>
      oqp->q_rdptr = oqp->q_buffer;
 8002584:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002586:	64a3      	str	r3, [r4, #72]	@ 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002588:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800258a:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <VectorD8+0x250>)
 800258c:	4299      	cmp	r1, r3
 800258e:	d011      	beq.n	80025b4 <VectorD8+0x1f4>
  tqp->next             = tp->queue.next;
 8002590:	680a      	ldr	r2, [r1, #0]
 8002592:	6322      	str	r2, [r4, #48]	@ 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8002594:	6053      	str	r3, [r2, #4]
 8002596:	2300      	movs	r3, #0
 8002598:	624b      	str	r3, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800259a:	f881 3020 	strb.w	r3, [r1, #32]
  } while (cp->prio >= tp->prio);
 800259e:	6888      	ldr	r0, [r1, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <VectorD8+0x240>)
    cp = cp->queue.next;
 80025a2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	4282      	cmp	r2, r0
 80025a8:	d2fb      	bcs.n	80025a2 <VectorD8+0x1e2>
  tp->queue.prev             = cp->queue.prev;
 80025aa:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80025ac:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 80025ae:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 80025b0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80025b2:	6059      	str	r1, [r3, #4]
      u->DR = b;
 80025b4:	f8ca 6004 	str.w	r6, [sl, #4]
 80025b8:	2300      	movs	r3, #0
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	e779      	b.n	80024b4 <VectorD8+0xf4>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80025c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0a2      	beq.n	800250c <VectorD8+0x14c>
  chEvtBroadcastFlagsI(esp, flags);
 80025c6:	480d      	ldr	r0, [pc, #52]	@ (80025fc <VectorD8+0x23c>)
 80025c8:	2110      	movs	r1, #16
 80025ca:	f7fe fa21 	bl	8000a10 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80025ce:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 80025d2:	ea09 0303 	and.w	r3, r9, r3
 80025d6:	f8ca 300c 	str.w	r3, [sl, #12]
 80025da:	e797      	b.n	800250c <VectorD8+0x14c>
  if (!oqIsEmptyI(oqp)) {
 80025dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80025de:	2a00      	cmp	r2, #0
 80025e0:	d0c7      	beq.n	8002572 <VectorD8+0x1b2>
 80025e2:	4806      	ldr	r0, [pc, #24]	@ (80025fc <VectorD8+0x23c>)
 80025e4:	2108      	movs	r1, #8
 80025e6:	f7fe fa13 	bl	8000a10 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80025ea:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80025ee:	ea09 0303 	and.w	r3, r9, r3
 80025f2:	f8ca 300c 	str.w	r3, [sl, #12]
 80025f6:	e7df      	b.n	80025b8 <VectorD8+0x1f8>
 80025f8:	20001144 	.word	0x20001144
 80025fc:	20001148 	.word	0x20001148
 8002600:	200011c0 	.word	0x200011c0
 8002604:	e000ed00 	.word	0xe000ed00
 8002608:	080002e1 	.word	0x080002e1
 800260c:	080002e4 	.word	0x080002e4
 8002610:	20001174 	.word	0x20001174
	...

08002620 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002620:	4a87      	ldr	r2, [pc, #540]	@ (8002840 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 8002622:	4888      	ldr	r0, [pc, #544]	@ (8002844 <__early_init+0x224>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002624:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8002626:	f8df c220 	ldr.w	ip, [pc, #544]	@ 8002848 <__early_init+0x228>
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800262a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800262e:	f240 14ff 	movw	r4, #511	@ 0x1ff
 8002632:	4323      	orrs	r3, r4
 8002634:	6113      	str	r3, [r2, #16]
 8002636:	6911      	ldr	r1, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8002638:	f8df 9210 	ldr.w	r9, [pc, #528]	@ 800284c <__early_init+0x22c>
  gpiop->PUPDR   = config->pupdr;
 800263c:	f8df a210 	ldr.w	sl, [pc, #528]	@ 8002850 <__early_init+0x230>
  gpiop->OTYPER  = config->otyper;
 8002640:	f8df 8210 	ldr.w	r8, [pc, #528]	@ 8002854 <__early_init+0x234>
 8002644:	f8df e210 	ldr.w	lr, [pc, #528]	@ 8002858 <__early_init+0x238>
 8002648:	4f84      	ldr	r7, [pc, #528]	@ (800285c <__early_init+0x23c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800264a:	f36f 0108 	bfc	r1, #0, #9
 800264e:	6111      	str	r1, [r2, #16]
 8002650:	6911      	ldr	r1, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002652:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002654:	4321      	orrs	r1, r4
 8002656:	6311      	str	r1, [r2, #48]	@ 0x30
 8002658:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 800265a:	4321      	orrs	r1, r4
  gpiop->OTYPER  = config->otyper;
 800265c:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 800265e:	6511      	str	r1, [r2, #80]	@ 0x50
  gpiop->PUPDR   = config->pupdr;
 8002660:	4c7f      	ldr	r4, [pc, #508]	@ (8002860 <__early_init+0x240>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002662:	6d16      	ldr	r6, [r2, #80]	@ 0x50
  gpiop->OTYPER  = config->otyper;
 8002664:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002666:	f46f 45a8 	mvn.w	r5, #21504	@ 0x5400
 800266a:	6085      	str	r5, [r0, #8]
  gpiop->ODR     = config->odr;
 800266c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
  gpiop->PUPDR   = config->pupdr;
 8002670:	60c4      	str	r4, [r0, #12]
  gpiop->AFRL    = config->afrl;
 8002672:	4c7c      	ldr	r4, [pc, #496]	@ (8002864 <__early_init+0x244>)
  gpiop->ODR     = config->odr;
 8002674:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8002676:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8002678:	4c7b      	ldr	r4, [pc, #492]	@ (8002868 <__early_init+0x248>)
 800267a:	6244      	str	r4, [r0, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 800267c:	f104 542a 	add.w	r4, r4, #713031680	@ 0x2a800000
 8002680:	f504 14b0 	add.w	r4, r4, #1441792	@ 0x160000
 8002684:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8002686:	f44f 7010 	mov.w	r0, #576	@ 0x240
 800268a:	f8c9 0004 	str.w	r0, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800268e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002692:	f8c9 0008 	str.w	r0, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 8002696:	f8c9 a00c 	str.w	sl, [r9, #12]
  gpiop->AFRL    = config->afrl;
 800269a:	f04f 6a80 	mov.w	sl, #67108864	@ 0x4000000
  gpiop->ODR     = config->odr;
 800269e:	f8c9 1014 	str.w	r1, [r9, #20]
  gpiop->AFRH    = config->afrh;
 80026a2:	f04f 0b40 	mov.w	fp, #64	@ 0x40
  gpiop->AFRL    = config->afrl;
 80026a6:	f8c9 a020 	str.w	sl, [r9, #32]
  gpiop->MODER   = config->moder;
 80026aa:	f8df a1c0 	ldr.w	sl, [pc, #448]	@ 800286c <__early_init+0x24c>
  gpiop->AFRH    = config->afrh;
 80026ae:	f8c9 b024 	str.w	fp, [r9, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 80026b2:	f8c9 a000 	str.w	sl, [r9]
  gpiop->PUPDR   = config->pupdr;
 80026b6:	f109 59a2 	add.w	r9, r9, #339738624	@ 0x14400000
 80026ba:	f509 3944 	add.w	r9, r9, #200704	@ 0x31000
 80026be:	f509 79aa 	add.w	r9, r9, #340	@ 0x154
  gpiop->OTYPER  = config->otyper;
 80026c2:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80026c6:	f8c8 0008 	str.w	r0, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 80026ca:	f8c8 900c 	str.w	r9, [r8, #12]
  gpiop->AFRL    = config->afrl;
 80026ce:	f04f 49c0 	mov.w	r9, #1610612736	@ 0x60000000
  gpiop->ODR     = config->odr;
 80026d2:	f8c8 1014 	str.w	r1, [r8, #20]
  gpiop->AFRL    = config->afrl;
 80026d6:	f8c8 9020 	str.w	r9, [r8, #32]
  gpiop->AFRH    = config->afrh;
 80026da:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 8002870 <__early_init+0x250>
 80026de:	f8c8 9024 	str.w	r9, [r8, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 80026e2:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 8002874 <__early_init+0x254>
 80026e6:	f8c8 9000 	str.w	r9, [r8]
  gpiop->PUPDR   = config->pupdr;
 80026ea:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8002878 <__early_init+0x258>
  gpiop->OTYPER  = config->otyper;
 80026ee:	f8ce 3004 	str.w	r3, [lr, #4]
 80026f2:	4e62      	ldr	r6, [pc, #392]	@ (800287c <__early_init+0x25c>)
  gpiop->OSPEEDR = config->ospeedr;
 80026f4:	f8ce 0008 	str.w	r0, [lr, #8]
  gpiop->OTYPER  = config->otyper;
 80026f8:	4d61      	ldr	r5, [pc, #388]	@ (8002880 <__early_init+0x260>)
  gpiop->PUPDR   = config->pupdr;
 80026fa:	f8ce 800c 	str.w	r8, [lr, #12]
  gpiop->OTYPER  = config->otyper;
 80026fe:	4c61      	ldr	r4, [pc, #388]	@ (8002884 <__early_init+0x264>)
  gpiop->ODR     = config->odr;
 8002700:	f640 78ff 	movw	r8, #4095	@ 0xfff
 8002704:	f8ce 8014 	str.w	r8, [lr, #20]
  gpiop->MODER   = config->moder;
 8002708:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8002888 <__early_init+0x268>
  gpiop->AFRL    = config->afrl;
 800270c:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8002710:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8002714:	f8ce 8000 	str.w	r8, [lr]
  gpiop->OTYPER  = config->otyper;
 8002718:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800271c:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8002720:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 8002724:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8002728:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800272c:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8002730:	f8cc b000 	str.w	fp, [ip]
  gpiop->OTYPER  = config->otyper;
 8002734:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002736:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8002738:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 800273a:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800273c:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 8002740:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 8002742:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002744:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8002746:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8002748:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800274a:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800274c:	6273      	str	r3, [r6, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 800274e:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8002750:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002752:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002754:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8002756:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8002758:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800275a:	626b      	str	r3, [r5, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 800275c:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 800275e:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002760:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8002762:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8002764:	6161      	str	r1, [r4, #20]
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002766:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
  gpiop->AFRL    = config->afrl;
 800276a:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800276c:	6263      	str	r3, [r4, #36]	@ 0x24
  gpiop->MODER   = config->moder;
 800276e:	6023      	str	r3, [r4, #0]
 8002770:	6411      	str	r1, [r2, #64]	@ 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002772:	4946      	ldr	r1, [pc, #280]	@ (800288c <__early_init+0x26c>)
 8002774:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002778:	600b      	str	r3, [r1, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002782:	6813      	ldr	r3, [r2, #0]
 8002784:	079d      	lsls	r5, r3, #30
 8002786:	d5fc      	bpl.n	8002782 <__early_init+0x162>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8002788:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800278a:	492d      	ldr	r1, [pc, #180]	@ (8002840 <__early_init+0x220>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800278c:	f023 0303 	bic.w	r3, r3, #3
 8002790:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002792:	688b      	ldr	r3, [r1, #8]
 8002794:	f013 030c 	ands.w	r3, r3, #12
 8002798:	d1fb      	bne.n	8002792 <__early_init+0x172>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800279a:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800279c:	4828      	ldr	r0, [pc, #160]	@ (8002840 <__early_init+0x220>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800279e:	f002 02f9 	and.w	r2, r2, #249	@ 0xf9
 80027a2:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80027a4:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON;
 80027a6:	680b      	ldr	r3, [r1, #0]
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ac:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	039c      	lsls	r4, r3, #14
 80027b2:	d5fc      	bpl.n	80027ae <__early_init+0x18e>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80027b4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80027b6:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <__early_init+0x220>)
  RCC->CSR |= RCC_CSR_LSION;
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6743      	str	r3, [r0, #116]	@ 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80027be:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80027c0:	0799      	lsls	r1, r3, #30
 80027c2:	d5fc      	bpl.n	80027be <__early_init+0x19e>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <__early_init+0x270>)
 80027c6:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80027c8:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80027ca:	4930      	ldr	r1, [pc, #192]	@ (800288c <__early_init+0x26c>)
  RCC->CR |= RCC_CR_PLLON;
 80027cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d0:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80027d2:	684b      	ldr	r3, [r1, #4]
 80027d4:	045a      	lsls	r2, r3, #17
 80027d6:	d5fc      	bpl.n	80027d2 <__early_init+0x1b2>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80027d8:	4a19      	ldr	r2, [pc, #100]	@ (8002840 <__early_init+0x220>)
 80027da:	6813      	ldr	r3, [r2, #0]
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	d5fc      	bpl.n	80027da <__early_init+0x1ba>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80027e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002894 <__early_init+0x274>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80027e2:	492d      	ldr	r1, [pc, #180]	@ (8002898 <__early_init+0x278>)
 80027e4:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b2c      	ldr	r3, [pc, #176]	@ (800289c <__early_init+0x27c>)
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d01e      	beq.n	800282c <__early_init+0x20c>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <__early_init+0x280>)
 80027f0:	f240 7205 	movw	r2, #1797	@ 0x705
 80027f4:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80027f6:	4a2a      	ldr	r2, [pc, #168]	@ (80028a0 <__early_init+0x280>)
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d1fa      	bne.n	80027f8 <__early_init+0x1d8>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002802:	4a0f      	ldr	r2, [pc, #60]	@ (8002840 <__early_init+0x220>)
 8002804:	6893      	ldr	r3, [r2, #8]
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800280c:	6893      	ldr	r3, [r2, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b08      	cmp	r3, #8
 8002814:	d1fa      	bne.n	800280c <__early_init+0x1ec>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8002816:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800281c:	6453      	str	r3, [r2, #68]	@ 0x44
 800281e:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8002820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002824:	6653      	str	r3, [r2, #100]	@ 0x64
 8002826:	6e53      	ldr	r3, [r2, #100]	@ 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8002828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800282c:	4a1d      	ldr	r2, [pc, #116]	@ (80028a4 <__early_init+0x284>)
 800282e:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <__early_init+0x288>)
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d1db      	bne.n	80027ee <__early_init+0x1ce>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8002836:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <__early_init+0x280>)
 8002838:	f240 1205 	movw	r2, #261	@ 0x105
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e7da      	b.n	80027f6 <__early_init+0x1d6>
 8002840:	40023800 	.word	0x40023800
 8002844:	40020000 	.word	0x40020000
 8002848:	40021000 	.word	0x40021000
 800284c:	40020400 	.word	0x40020400
 8002850:	55514515 	.word	0x55514515
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021400 	.word	0x40021400
 8002860:	40010054 	.word	0x40010054
 8002864:	55560000 	.word	0x55560000
 8002868:	000aaa00 	.word	0x000aaa00
 800286c:	00082080 	.word	0x00082080
 8002870:	00060600 	.word	0x00060600
 8002874:	02208001 	.word	0x02208001
 8002878:	00555055 	.word	0x00555055
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40022000 	.word	0x40022000
 8002888:	55000100 	.word	0x55000100
 800288c:	40007000 	.word	0x40007000
 8002890:	07405408 	.word	0x07405408
 8002894:	e0042000 	.word	0xe0042000
 8002898:	38889400 	.word	0x38889400
 800289c:	20006411 	.word	0x20006411
 80028a0:	40023c00 	.word	0x40023c00
 80028a4:	e000ed00 	.word	0xe000ed00
 80028a8:	410fc241 	.word	0x410fc241
 80028ac:	00000000 	.word	0x00000000

080028b0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 80028b0:	b530      	push	{r4, r5, lr}
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80028b2:	4c21      	ldr	r4, [pc, #132]	@ (8002938 <chVTDoSetI+0x88>)
 80028b4:	46a6      	mov	lr, r4
  vtp->func = vtfunc;
 80028b6:	e9c0 2303 	strd	r2, r3, [r0, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80028ba:	f85e 3f1c 	ldr.w	r3, [lr, #28]!
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80028be:	2902      	cmp	r1, #2
  return (systime_t)STM32_ST_TIM->CNT;
 80028c0:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 80028c4:	bf38      	it	cc
 80028c6:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80028c8:	4573      	cmp	r3, lr
 80028ca:	f8dc 2024 	ldr.w	r2, [ip, #36]	@ 0x24
 80028ce:	d022      	beq.n	8002916 <chVTDoSetI+0x66>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80028d0:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
  return (sysinterval_t)((systime_t)(end - start));
 80028d2:	1b52      	subs	r2, r2, r5
 80028d4:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80028d6:	689a      	ldr	r2, [r3, #8]
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80028d8:	d215      	bcs.n	8002906 <chVTDoSetI+0x56>
      p = p->next;
    }
    else if (delta < p->delta) {
 80028da:	4291      	cmp	r1, r2
 80028dc:	d317      	bcc.n	800290e <chVTDoSetI+0x5e>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80028de:	4291      	cmp	r1, r2
 80028e0:	d904      	bls.n	80028ec <chVTDoSetI+0x3c>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 80028e2:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 80028e4:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	428a      	cmp	r2, r1
 80028ea:	d3fa      	bcc.n	80028e2 <chVTDoSetI+0x32>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	e9c0 3200 	strd	r3, r2, [r0]
  vtp->prev->next = vtp;
 80028f2:	6010      	str	r0, [r2, #0]
  p->prev = vtp;
 80028f4:	6058      	str	r0, [r3, #4]
  vtp->delta = delta;
 80028f6:	6081      	str	r1, [r0, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 80028f8:	689a      	ldr	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80028fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  p->delta -= delta;
 80028fe:	1a52      	subs	r2, r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002902:	6260      	str	r0, [r4, #36]	@ 0x24
}
 8002904:	bd30      	pop	{r4, r5, pc}
      p = p->next;
 8002906:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 8002908:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	e7e7      	b.n	80028de <chVTDoSetI+0x2e>
  return systime + (systime_t)interval;
 800290e:	440d      	add	r5, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002910:	f8cc 5034 	str.w	r5, [ip, #52]	@ 0x34
 8002914:	e7ea      	b.n	80028ec <chVTDoSetI+0x3c>
      ch.vtlist.lasttime = now;
 8002916:	62a2      	str	r2, [r4, #40]	@ 0x28
      ch.vtlist.next = vtp;
 8002918:	e9c4 0007 	strd	r0, r0, [r4, #28]
 800291c:	440a      	add	r2, r1
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 800291e:	e9c0 3300 	strd	r3, r3, [r0]
  STM32_ST_TIM->SR     = 0;
 8002922:	2400      	movs	r4, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002924:	2302      	movs	r3, #2
      vtp->delta = delay;
 8002926:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002928:	f8cc 2034 	str.w	r2, [ip, #52]	@ 0x34
  STM32_ST_TIM->SR     = 0;
 800292c:	f8cc 4010 	str.w	r4, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002930:	f8cc 300c 	str.w	r3, [ip, #12]
}
 8002934:	bd30      	pop	{r4, r5, pc}
 8002936:	bf00      	nop
 8002938:	200011c0 	.word	0x200011c0
 800293c:	00000000 	.word	0x00000000

08002940 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8002940:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <chVTDoResetI+0x6c>)
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8002942:	6803      	ldr	r3, [r0, #0]
  if (ch.vtlist.next != vtp) {
 8002944:	69d1      	ldr	r1, [r2, #28]
 8002946:	4281      	cmp	r1, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8002948:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 800294a:	d00d      	beq.n	8002968 <chVTDoResetI+0x28>
    vtp->prev->next = vtp->next;
 800294c:	6841      	ldr	r1, [r0, #4]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800294e:	321c      	adds	r2, #28
    vtp->func = NULL;
 8002950:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8002952:	4293      	cmp	r3, r2
    vtp->prev->next = vtp->next;
 8002954:	600b      	str	r3, [r1, #0]
    vtp->next->prev = vtp->prev;
 8002956:	6059      	str	r1, [r3, #4]
    vtp->func = NULL;
 8002958:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800295a:	d003      	beq.n	8002964 <chVTDoResetI+0x24>
      vtp->next->delta += vtp->delta;
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	6881      	ldr	r1, [r0, #8]
 8002960:	440a      	add	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002964:	bc10      	pop	{r4}
 8002966:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 8002968:	4610      	mov	r0, r2
  vtp->func = NULL;
 800296a:	2400      	movs	r4, #0
  ch.vtlist.next = vtp->next;
 800296c:	f840 3f1c 	str.w	r3, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002970:	4283      	cmp	r3, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8002972:	6058      	str	r0, [r3, #4]
  vtp->func = NULL;
 8002974:	60cc      	str	r4, [r1, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002976:	d015      	beq.n	80029a4 <chVTDoResetI+0x64>
  ch.vtlist.next->delta += vtp->delta;
 8002978:	6898      	ldr	r0, [r3, #8]
 800297a:	6889      	ldr	r1, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800297c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
  ch.vtlist.next->delta += vtp->delta;
 800297e:	4401      	add	r1, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8002980:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8002984:	6099      	str	r1, [r3, #8]
 8002986:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002988:	1a98      	subs	r0, r3, r2
  if (nowdelta >= ch.vtlist.next->delta) {
 800298a:	4281      	cmp	r1, r0
 800298c:	d9ea      	bls.n	8002964 <chVTDoResetI+0x24>
  delta = ch.vtlist.next->delta - nowdelta;
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	440b      	add	r3, r1
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8002992:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002994:	bf98      	it	ls
 8002996:	1c81      	addls	r1, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002998:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  return systime + (systime_t)interval;
 800299c:	440a      	add	r2, r1
}
 800299e:	bc10      	pop	{r4}
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029a2:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0;
 80029a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029a8:	60dc      	str	r4, [r3, #12]
    return;
 80029aa:	e7db      	b.n	8002964 <chVTDoResetI+0x24>
 80029ac:	200011c0 	.word	0x200011c0

080029b0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 80029b0:	b530      	push	{r4, r5, lr}
 80029b2:	2320      	movs	r3, #32
 80029b4:	b087      	sub	sp, #28
 80029b6:	f383 8811 	msr	BASEPRI, r3
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80029ba:	4c14      	ldr	r4, [pc, #80]	@ (8002a0c <test_wait_tick+0x5c>)
 80029bc:	4a14      	ldr	r2, [pc, #80]	@ (8002a10 <test_wait_tick+0x60>)
 80029be:	69a5      	ldr	r5, [r4, #24]
 80029c0:	2101      	movs	r1, #1
 80029c2:	462b      	mov	r3, r5
 80029c4:	a801      	add	r0, sp, #4
 80029c6:	f7ff ff73 	bl	80028b0 <chVTDoSetI>
  thread_t *tp = tqp->next;
 80029ca:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80029cc:	2308      	movs	r3, #8
 80029ce:	f885 3020 	strb.w	r3, [r5, #32]
  tqp->next             = tp->queue.next;
 80029d2:	6803      	ldr	r3, [r0, #0]
 80029d4:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80029d6:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80029d8:	2301      	movs	r3, #1
 80029da:	f880 3020 	strb.w	r3, [r0, #32]
  chSysSwitch(currp, otp);
 80029de:	4629      	mov	r1, r5
  currp = queue_fifo_remove(&ch.rlist.queue);
 80029e0:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 80029e2:	f7fd fc6d 	bl	80002c0 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 80029e6:	9b04      	ldr	r3, [sp, #16]
 80029e8:	b113      	cbz	r3, 80029f0 <test_wait_tick+0x40>
      chVTDoResetI(&vt);
 80029ea:	a801      	add	r0, sp, #4
 80029ec:	f7ff ffa8 	bl	8002940 <chVTDoResetI>
 80029f0:	2300      	movs	r3, #0
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	2220      	movs	r2, #32
 80029f8:	f382 8811 	msr	BASEPRI, r2
  return (systime_t)STM32_ST_TIM->CNT;
 80029fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a00:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8002a02:	f383 8811 	msr	BASEPRI, r3

  chThdSleep(1);
  return chVTGetSystemTime();
}
 8002a06:	b007      	add	sp, #28
 8002a08:	bd30      	pop	{r4, r5, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200011c0 	.word	0x200011c0
 8002a10:	08000931 	.word	0x08000931
	...

08002a20 <rt_test_008_003_execute.lto_priv.0>:
static void rt_test_008_003_execute(void) {
 8002a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8002a24:	4d40      	ldr	r5, [pc, #256]	@ (8002b28 <rt_test_008_003_execute.lto_priv.0+0x108>)
 8002a26:	2301      	movs	r3, #1
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	2720      	movs	r7, #32
 8002a2c:	f387 8811 	msr	BASEPRI, r7
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8002a30:	4e3e      	ldr	r6, [pc, #248]	@ (8002b2c <rt_test_008_003_execute.lto_priv.0+0x10c>)
 8002a32:	69b2      	ldr	r2, [r6, #24]
 8002a34:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002a36:	f043 0307 	orr.w	r3, r3, #7
 8002a3a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a3c:	f04f 0800 	mov.w	r8, #0
 8002a40:	f388 8811 	msr	BASEPRI, r8
  test_set_step(2);
 8002a44:	2302      	movs	r3, #2
 8002a46:	602b      	str	r3, [r5, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8002a48:	f008 f852 	bl	800aaf0 <chEvtWaitOne.constprop.0>
  if (!condition)
 8002a4c:	2801      	cmp	r0, #1
 8002a4e:	d147      	bne.n	8002ae0 <rt_test_008_003_execute.lto_priv.0+0xc0>
    m = chEvtWaitOne(ALL_EVENTS);
 8002a50:	4604      	mov	r4, r0
 8002a52:	f008 f84d 	bl	800aaf0 <chEvtWaitOne.constprop.0>
 8002a56:	2802      	cmp	r0, #2
 8002a58:	d142      	bne.n	8002ae0 <rt_test_008_003_execute.lto_priv.0+0xc0>
    m = chEvtWaitOne(ALL_EVENTS);
 8002a5a:	f008 f849 	bl	800aaf0 <chEvtWaitOne.constprop.0>
 8002a5e:	2804      	cmp	r0, #4
 8002a60:	4681      	mov	r9, r0
 8002a62:	d13d      	bne.n	8002ae0 <rt_test_008_003_execute.lto_priv.0+0xc0>
 8002a64:	f387 8811 	msr	BASEPRI, r7
  m = currp->epending & events;
 8002a68:	69b3      	ldr	r3, [r6, #24]
 8002a6a:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
  currp->epending &= ~events;
 8002a6e:	f8c3 8034 	str.w	r8, [r3, #52]	@ 0x34
 8002a72:	f388 8811 	msr	BASEPRI, r8
 8002a76:	f1ba 0f00 	cmp.w	sl, #0
 8002a7a:	d13b      	bne.n	8002af4 <rt_test_008_003_execute.lto_priv.0+0xd4>
  test_set_step(3);
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8002a80:	f7ff ff96 	bl	80029b0 <test_wait_tick>
  return ch.rlist.current;
 8002a84:	69b3      	ldr	r3, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002a86:	4a2a      	ldr	r2, [pc, #168]	@ (8002b30 <rt_test_008_003_execute.lto_priv.0+0x110>)
 8002a88:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8002a8a:	4680      	mov	r8, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002a8c:	3901      	subs	r1, #1
 8002a8e:	4829      	ldr	r0, [pc, #164]	@ (8002b34 <rt_test_008_003_execute.lto_priv.0+0x114>)
 8002a90:	f008 f856 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 8002a94:	f8c5 9000 	str.w	r9, [r5]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002a98:	4d27      	ldr	r5, [pc, #156]	@ (8002b38 <rt_test_008_003_execute.lto_priv.0+0x118>)
 8002a9a:	6028      	str	r0, [r5, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8002a9c:	f008 f828 	bl	800aaf0 <chEvtWaitOne.constprop.0>
 8002aa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8002aa6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002aaa:	eba3 0308 	sub.w	r3, r3, r8
 8002aae:	2b13      	cmp	r3, #19
 8002ab0:	d831      	bhi.n	8002b16 <rt_test_008_003_execute.lto_priv.0+0xf6>
 8002ab2:	2801      	cmp	r0, #1
 8002ab4:	d127      	bne.n	8002b06 <rt_test_008_003_execute.lto_priv.0+0xe6>
 8002ab6:	f387 8811 	msr	BASEPRI, r7
  m = currp->epending & events;
 8002aba:	69b3      	ldr	r3, [r6, #24]
 8002abc:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  currp->epending &= ~events;
 8002abe:	f8c3 a034 	str.w	sl, [r3, #52]	@ 0x34
 8002ac2:	f38a 8811 	msr	BASEPRI, sl
 8002ac6:	b9ac      	cbnz	r4, 8002af4 <rt_test_008_003_execute.lto_priv.0+0xd4>
 8002ac8:	f105 0614 	add.w	r6, r5, #20
    if (threads[i] != NULL) {
 8002acc:	f855 0b04 	ldr.w	r0, [r5], #4
 8002ad0:	b118      	cbz	r0, 8002ada <rt_test_008_003_execute.lto_priv.0+0xba>
      chThdWait(threads[i]);
 8002ad2:	f008 fadd 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8002ad6:	f845 4c04 	str.w	r4, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8002ada:	42ae      	cmp	r6, r5
 8002adc:	d1f6      	bne.n	8002acc <rt_test_008_003_execute.lto_priv.0+0xac>
 8002ade:	e007      	b.n	8002af0 <rt_test_008_003_execute.lto_priv.0+0xd0>
  test_local_fail      = true;
 8002ae0:	4c16      	ldr	r4, [pc, #88]	@ (8002b3c <rt_test_008_003_execute.lto_priv.0+0x11c>)
  test_global_fail     = true;
 8002ae2:	4817      	ldr	r0, [pc, #92]	@ (8002b40 <rt_test_008_003_execute.lto_priv.0+0x120>)
  test_failure_message = msg;
 8002ae4:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <rt_test_008_003_execute.lto_priv.0+0x124>)
 8002ae6:	4918      	ldr	r1, [pc, #96]	@ (8002b48 <rt_test_008_003_execute.lto_priv.0+0x128>)
 8002ae8:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002aea:	2301      	movs	r3, #1
 8002aec:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002aee:	7003      	strb	r3, [r0, #0]
}
 8002af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  test_local_fail      = true;
 8002af4:	4c11      	ldr	r4, [pc, #68]	@ (8002b3c <rt_test_008_003_execute.lto_priv.0+0x11c>)
  test_global_fail     = true;
 8002af6:	4812      	ldr	r0, [pc, #72]	@ (8002b40 <rt_test_008_003_execute.lto_priv.0+0x120>)
  test_failure_message = msg;
 8002af8:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <rt_test_008_003_execute.lto_priv.0+0x124>)
 8002afa:	4914      	ldr	r1, [pc, #80]	@ (8002b4c <rt_test_008_003_execute.lto_priv.0+0x12c>)
 8002afc:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002afe:	2301      	movs	r3, #1
 8002b00:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002b02:	7003      	strb	r3, [r0, #0]
  return true;
 8002b04:	e7f4      	b.n	8002af0 <rt_test_008_003_execute.lto_priv.0+0xd0>
  test_local_fail      = true;
 8002b06:	480d      	ldr	r0, [pc, #52]	@ (8002b3c <rt_test_008_003_execute.lto_priv.0+0x11c>)
  test_global_fail     = true;
 8002b08:	490d      	ldr	r1, [pc, #52]	@ (8002b40 <rt_test_008_003_execute.lto_priv.0+0x120>)
  test_failure_message = msg;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <rt_test_008_003_execute.lto_priv.0+0x124>)
 8002b0c:	4a10      	ldr	r2, [pc, #64]	@ (8002b50 <rt_test_008_003_execute.lto_priv.0+0x130>)
  test_local_fail      = true;
 8002b0e:	7004      	strb	r4, [r0, #0]
  test_global_fail     = true;
 8002b10:	700c      	strb	r4, [r1, #0]
  test_failure_message = msg;
 8002b12:	601a      	str	r2, [r3, #0]
  return true;
 8002b14:	e7ec      	b.n	8002af0 <rt_test_008_003_execute.lto_priv.0+0xd0>
  test_local_fail      = true;
 8002b16:	4809      	ldr	r0, [pc, #36]	@ (8002b3c <rt_test_008_003_execute.lto_priv.0+0x11c>)
  test_global_fail     = true;
 8002b18:	4909      	ldr	r1, [pc, #36]	@ (8002b40 <rt_test_008_003_execute.lto_priv.0+0x120>)
  test_failure_message = msg;
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <rt_test_008_003_execute.lto_priv.0+0x124>)
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <rt_test_008_003_execute.lto_priv.0+0x134>)
  test_local_fail      = true;
 8002b1e:	7004      	strb	r4, [r0, #0]
  test_global_fail     = true;
 8002b20:	700c      	strb	r4, [r1, #0]
  test_failure_message = msg;
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e7e4      	b.n	8002af0 <rt_test_008_003_execute.lto_priv.0+0xd0>
 8002b26:	bf00      	nop
 8002b28:	200010b4 	.word	0x200010b4
 8002b2c:	200011c0 	.word	0x200011c0
 8002b30:	08004e71 	.word	0x08004e71
 8002b34:	20000a08 	.word	0x20000a08
 8002b38:	200010a0 	.word	0x200010a0
 8002b3c:	200010d1 	.word	0x200010d1
 8002b40:	200010d0 	.word	0x200010d0
 8002b44:	200010cc 	.word	0x200010cc
 8002b48:	0800b2bc 	.word	0x0800b2bc
 8002b4c:	0800b2d0 	.word	0x0800b2d0
 8002b50:	0800b2f0 	.word	0x0800b2f0
 8002b54:	0800b2dc 	.word	0x0800b2dc
	...

08002b60 <rt_test_008_004_execute.lto_priv.0>:
static void rt_test_008_004_execute(void) {
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8002b62:	4e55      	ldr	r6, [pc, #340]	@ (8002cb8 <rt_test_008_004_execute.lto_priv.0+0x158>)
 8002b64:	2701      	movs	r7, #1
 8002b66:	6037      	str	r7, [r6, #0]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f382 8811 	msr	BASEPRI, r2
 8002b6e:	4c53      	ldr	r4, [pc, #332]	@ (8002cbc <rt_test_008_004_execute.lto_priv.0+0x15c>)
 8002b70:	69a1      	ldr	r1, [r4, #24]
 8002b72:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8002b74:	f043 0305 	orr.w	r3, r3, #5
 8002b78:	2000      	movs	r0, #0
 8002b7a:	634b      	str	r3, [r1, #52]	@ 0x34
 8002b7c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8002b80:	2302      	movs	r3, #2
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8002b82:	69a5      	ldr	r5, [r4, #24]
 8002b84:	6033      	str	r3, [r6, #0]
 8002b86:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8002b8a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  if (m == (eventmask_t)0) {
 8002b8c:	2a00      	cmp	r2, #0
 8002b8e:	d052      	beq.n	8002c36 <rt_test_008_004_execute.lto_priv.0+0xd6>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8002b90:	2300      	movs	r3, #0
 8002b92:	636b      	str	r3, [r5, #52]	@ 0x34
 8002b94:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 8002b98:	2a05      	cmp	r2, #5
 8002b9a:	d143      	bne.n	8002c24 <rt_test_008_004_execute.lto_priv.0+0xc4>
 8002b9c:	2520      	movs	r5, #32
 8002b9e:	f385 8811 	msr	BASEPRI, r5
  m = currp->epending & events;
 8002ba2:	69a2      	ldr	r2, [r4, #24]
 8002ba4:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  currp->epending &= ~events;
 8002ba6:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	2900      	cmp	r1, #0
 8002bae:	d154      	bne.n	8002c5a <rt_test_008_004_execute.lto_priv.0+0xfa>
  test_set_step(3);
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	6033      	str	r3, [r6, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8002bb4:	f7ff fefc 	bl	80029b0 <test_wait_tick>
 8002bb8:	69a3      	ldr	r3, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002bba:	4a41      	ldr	r2, [pc, #260]	@ (8002cc0 <rt_test_008_004_execute.lto_priv.0+0x160>)
 8002bbc:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8002bbe:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002bc0:	3901      	subs	r1, #1
 8002bc2:	4840      	ldr	r0, [pc, #256]	@ (8002cc4 <rt_test_008_004_execute.lto_priv.0+0x164>)
 8002bc4:	f007 ffbc 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8002bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc8 <rt_test_008_004_execute.lto_priv.0+0x168>)
 8002bca:	6018      	str	r0, [r3, #0]
  test_set_step(4);
 8002bcc:	2304      	movs	r3, #4
 8002bce:	6033      	str	r3, [r6, #0]
  thread_t *ctp = currp;
 8002bd0:	69a6      	ldr	r6, [r4, #24]
 8002bd2:	f385 8811 	msr	BASEPRI, r5
  m = ctp->epending & events;
 8002bd6:	6b72      	ldr	r2, [r6, #52]	@ 0x34
  if (m == (eventmask_t)0) {
 8002bd8:	2a00      	cmp	r2, #0
 8002bda:	d050      	beq.n	8002c7e <rt_test_008_004_execute.lto_priv.0+0x11e>
  ctp->epending &= ~m;
 8002bdc:	2100      	movs	r1, #0
 8002bde:	6371      	str	r1, [r6, #52]	@ 0x34
 8002be0:	f381 8811 	msr	BASEPRI, r1
 8002be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002bee:	1bd8      	subs	r0, r3, r7
 8002bf0:	2813      	cmp	r0, #19
 8002bf2:	d83b      	bhi.n	8002c6c <rt_test_008_004_execute.lto_priv.0+0x10c>
 8002bf4:	2a01      	cmp	r2, #1
 8002bf6:	d155      	bne.n	8002ca4 <rt_test_008_004_execute.lto_priv.0+0x144>
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	f383 8811 	msr	BASEPRI, r3
  m = currp->epending & events;
 8002bfe:	69a3      	ldr	r3, [r4, #24]
 8002c00:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  currp->epending &= ~events;
 8002c02:	6359      	str	r1, [r3, #52]	@ 0x34
 8002c04:	f381 8811 	msr	BASEPRI, r1
 8002c08:	bb3d      	cbnz	r5, 8002c5a <rt_test_008_004_execute.lto_priv.0+0xfa>
 8002c0a:	4c2f      	ldr	r4, [pc, #188]	@ (8002cc8 <rt_test_008_004_execute.lto_priv.0+0x168>)
 8002c0c:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8002c10:	f854 0b04 	ldr.w	r0, [r4], #4
 8002c14:	b118      	cbz	r0, 8002c1e <rt_test_008_004_execute.lto_priv.0+0xbe>
      chThdWait(threads[i]);
 8002c16:	f008 fa3b 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8002c1a:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8002c1e:	42a6      	cmp	r6, r4
 8002c20:	d1f6      	bne.n	8002c10 <rt_test_008_004_execute.lto_priv.0+0xb0>
}
 8002c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8002c24:	4c29      	ldr	r4, [pc, #164]	@ (8002ccc <rt_test_008_004_execute.lto_priv.0+0x16c>)
  test_global_fail     = true;
 8002c26:	482a      	ldr	r0, [pc, #168]	@ (8002cd0 <rt_test_008_004_execute.lto_priv.0+0x170>)
  test_failure_message = msg;
 8002c28:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd4 <rt_test_008_004_execute.lto_priv.0+0x174>)
 8002c2a:	492b      	ldr	r1, [pc, #172]	@ (8002cd8 <rt_test_008_004_execute.lto_priv.0+0x178>)
 8002c2c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002c32:	7003      	strb	r3, [r0, #0]
 8002c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  thread_t *otp = currp;
 8002c36:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8002c38:	6820      	ldr	r0, [r4, #0]
    ctp->u.ewmask = events;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c3e:	626b      	str	r3, [r5, #36]	@ 0x24
  otp->state = newstate;
 8002c40:	230a      	movs	r3, #10
 8002c42:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8002c46:	6803      	ldr	r3, [r0, #0]
 8002c48:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002c4a:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002c4c:	f880 7020 	strb.w	r7, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002c50:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8002c52:	f7fd fb35 	bl	80002c0 <_port_switch>
    m = ctp->epending & events;
 8002c56:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002c58:	e79a      	b.n	8002b90 <rt_test_008_004_execute.lto_priv.0+0x30>
  test_local_fail      = true;
 8002c5a:	4c1c      	ldr	r4, [pc, #112]	@ (8002ccc <rt_test_008_004_execute.lto_priv.0+0x16c>)
  test_global_fail     = true;
 8002c5c:	481c      	ldr	r0, [pc, #112]	@ (8002cd0 <rt_test_008_004_execute.lto_priv.0+0x170>)
  test_failure_message = msg;
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <rt_test_008_004_execute.lto_priv.0+0x174>)
 8002c60:	491e      	ldr	r1, [pc, #120]	@ (8002cdc <rt_test_008_004_execute.lto_priv.0+0x17c>)
 8002c62:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002c64:	2301      	movs	r3, #1
 8002c66:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002c68:	7003      	strb	r3, [r0, #0]
 8002c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8002c6c:	4c17      	ldr	r4, [pc, #92]	@ (8002ccc <rt_test_008_004_execute.lto_priv.0+0x16c>)
  test_global_fail     = true;
 8002c6e:	4818      	ldr	r0, [pc, #96]	@ (8002cd0 <rt_test_008_004_execute.lto_priv.0+0x170>)
  test_failure_message = msg;
 8002c70:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <rt_test_008_004_execute.lto_priv.0+0x174>)
 8002c72:	491b      	ldr	r1, [pc, #108]	@ (8002ce0 <rt_test_008_004_execute.lto_priv.0+0x180>)
 8002c74:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002c76:	2301      	movs	r3, #1
 8002c78:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002c7a:	7003      	strb	r3, [r0, #0]
 8002c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  thread_t *otp = currp;
 8002c7e:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8002c80:	6820      	ldr	r0, [r4, #0]
    ctp->u.ewmask = events;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c86:	6273      	str	r3, [r6, #36]	@ 0x24
  otp->state = newstate;
 8002c88:	230a      	movs	r3, #10
 8002c8a:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002c92:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002c9a:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8002c9c:	f7fd fb10 	bl	80002c0 <_port_switch>
    m = ctp->epending & events;
 8002ca0:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 8002ca2:	e79b      	b.n	8002bdc <rt_test_008_004_execute.lto_priv.0+0x7c>
  test_local_fail      = true;
 8002ca4:	4c09      	ldr	r4, [pc, #36]	@ (8002ccc <rt_test_008_004_execute.lto_priv.0+0x16c>)
  test_global_fail     = true;
 8002ca6:	480a      	ldr	r0, [pc, #40]	@ (8002cd0 <rt_test_008_004_execute.lto_priv.0+0x170>)
  test_failure_message = msg;
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd4 <rt_test_008_004_execute.lto_priv.0+0x174>)
 8002caa:	490e      	ldr	r1, [pc, #56]	@ (8002ce4 <rt_test_008_004_execute.lto_priv.0+0x184>)
 8002cac:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002cb2:	7003      	strb	r3, [r0, #0]
 8002cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200010b4 	.word	0x200010b4
 8002cbc:	200011c0 	.word	0x200011c0
 8002cc0:	08004e71 	.word	0x08004e71
 8002cc4:	20000a08 	.word	0x20000a08
 8002cc8:	200010a0 	.word	0x200010a0
 8002ccc:	200010d1 	.word	0x200010d1
 8002cd0:	200010d0 	.word	0x200010d0
 8002cd4:	200010cc 	.word	0x200010cc
 8002cd8:	0800b304 	.word	0x0800b304
 8002cdc:	0800b2d0 	.word	0x0800b2d0
 8002ce0:	0800b2dc 	.word	0x0800b2dc
 8002ce4:	0800b2f0 	.word	0x0800b2f0
	...

08002cf0 <rt_test_008_005_execute.lto_priv.0>:
static void rt_test_008_005_execute(void) {
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8002cf2:	4d52      	ldr	r5, [pc, #328]	@ (8002e3c <rt_test_008_005_execute.lto_priv.0+0x14c>)
 8002cf4:	2701      	movs	r7, #1
 8002cf6:	602f      	str	r7, [r5, #0]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f382 8811 	msr	BASEPRI, r2
 8002cfe:	4c50      	ldr	r4, [pc, #320]	@ (8002e40 <rt_test_008_005_execute.lto_priv.0+0x150>)
 8002d00:	69a1      	ldr	r1, [r4, #24]
 8002d02:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8002d04:	f043 0305 	orr.w	r3, r3, #5
 8002d08:	2000      	movs	r0, #0
 8002d0a:	634b      	str	r3, [r1, #52]	@ 0x34
 8002d0c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8002d10:	2302      	movs	r3, #2
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8002d12:	69a6      	ldr	r6, [r4, #24]
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 8002d1a:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8002d1c:	f003 0205 	and.w	r2, r3, #5
 8002d20:	2a05      	cmp	r2, #5
 8002d22:	d00f      	beq.n	8002d44 <rt_test_008_005_execute.lto_priv.0+0x54>
  thread_t *otp = currp;
 8002d24:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8002d26:	6820      	ldr	r0, [r4, #0]
    ctp->u.ewmask = events;
 8002d28:	2305      	movs	r3, #5
 8002d2a:	6273      	str	r3, [r6, #36]	@ 0x24
  otp->state = newstate;
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8002d32:	6803      	ldr	r3, [r0, #0]
 8002d34:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002d36:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002d38:	f880 7020 	strb.w	r7, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002d3c:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8002d3e:	f7fd fabf 	bl	80002c0 <_port_switch>
    chSchGoSleepS(CH_STATE_WTANDEVT);
  }
  ctp->epending &= ~events;
 8002d42:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8002d44:	f023 0305 	bic.w	r3, r3, #5
 8002d48:	6373      	str	r3, [r6, #52]	@ 0x34
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	2620      	movs	r6, #32
 8002d52:	f386 8811 	msr	BASEPRI, r6
  m = currp->epending & events;
 8002d56:	69a2      	ldr	r2, [r4, #24]
 8002d58:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  currp->epending &= ~events;
 8002d5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d5c:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 8002d60:	2900      	cmp	r1, #0
 8002d62:	d161      	bne.n	8002e28 <rt_test_008_005_execute.lto_priv.0+0x138>
  test_set_step(3);
 8002d64:	2303      	movs	r3, #3
 8002d66:	602b      	str	r3, [r5, #0]
 8002d68:	f386 8811 	msr	BASEPRI, r6
 8002d6c:	69a2      	ldr	r2, [r4, #24]
 8002d6e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d76:	f381 8811 	msr	BASEPRI, r1
  test_set_step(4);
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8002d7e:	f7ff fe17 	bl	80029b0 <test_wait_tick>
 8002d82:	69a3      	ldr	r3, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002d84:	4a2f      	ldr	r2, [pc, #188]	@ (8002e44 <rt_test_008_005_execute.lto_priv.0+0x154>)
 8002d86:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8002d88:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002d8a:	3901      	subs	r1, #1
 8002d8c:	482e      	ldr	r0, [pc, #184]	@ (8002e48 <rt_test_008_005_execute.lto_priv.0+0x158>)
 8002d8e:	f007 fed7 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8002d92:	4b2e      	ldr	r3, [pc, #184]	@ (8002e4c <rt_test_008_005_execute.lto_priv.0+0x15c>)
  test_set_step(5);
 8002d94:	2205      	movs	r2, #5
 8002d96:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002d98:	6018      	str	r0, [r3, #0]
  thread_t *ctp = currp;
 8002d9a:	69a5      	ldr	r5, [r4, #24]
 8002d9c:	f386 8811 	msr	BASEPRI, r6
  if ((ctp->epending & events) != events) {
 8002da0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002da2:	ea03 0102 	and.w	r1, r3, r2
 8002da6:	4291      	cmp	r1, r2
 8002da8:	d124      	bne.n	8002df4 <rt_test_008_005_execute.lto_priv.0+0x104>
  ctp->epending &= ~events;
 8002daa:	f023 0305 	bic.w	r3, r3, #5
 8002dae:	636b      	str	r3, [r5, #52]	@ 0x34
 8002db0:	2200      	movs	r2, #0
 8002db2:	f382 8811 	msr	BASEPRI, r2
 8002db6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002dc0:	1bdb      	subs	r3, r3, r7
 8002dc2:	2b13      	cmp	r3, #19
 8002dc4:	d827      	bhi.n	8002e16 <rt_test_008_005_execute.lto_priv.0+0x126>
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	f383 8811 	msr	BASEPRI, r3
  m = currp->epending & events;
 8002dcc:	69a3      	ldr	r3, [r4, #24]
 8002dce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  currp->epending &= ~events;
 8002dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dd2:	f382 8811 	msr	BASEPRI, r2
 8002dd6:	bb39      	cbnz	r1, 8002e28 <rt_test_008_005_execute.lto_priv.0+0x138>
 8002dd8:	4c1c      	ldr	r4, [pc, #112]	@ (8002e4c <rt_test_008_005_execute.lto_priv.0+0x15c>)
 8002dda:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8002dde:	f854 0b04 	ldr.w	r0, [r4], #4
 8002de2:	b120      	cbz	r0, 8002dee <rt_test_008_005_execute.lto_priv.0+0xfe>
      chThdWait(threads[i]);
 8002de4:	f008 f954 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f844 3c04 	str.w	r3, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8002dee:	42a5      	cmp	r5, r4
 8002df0:	d1f5      	bne.n	8002dde <rt_test_008_005_execute.lto_priv.0+0xee>
}
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  thread_t *otp = currp;
 8002df4:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8002df6:	6820      	ldr	r0, [r4, #0]
    ctp->u.ewmask = events;
 8002df8:	626a      	str	r2, [r5, #36]	@ 0x24
  otp->state = newstate;
 8002dfa:	230b      	movs	r3, #11
 8002dfc:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8002e00:	6803      	ldr	r3, [r0, #0]
 8002e02:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002e04:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002e0c:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8002e0e:	f7fd fa57 	bl	80002c0 <_port_switch>
  ctp->epending &= ~events;
 8002e12:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
}
 8002e14:	e7c9      	b.n	8002daa <rt_test_008_005_execute.lto_priv.0+0xba>
  test_local_fail      = true;
 8002e16:	4c0e      	ldr	r4, [pc, #56]	@ (8002e50 <rt_test_008_005_execute.lto_priv.0+0x160>)
  test_global_fail     = true;
 8002e18:	480e      	ldr	r0, [pc, #56]	@ (8002e54 <rt_test_008_005_execute.lto_priv.0+0x164>)
  test_failure_message = msg;
 8002e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e58 <rt_test_008_005_execute.lto_priv.0+0x168>)
 8002e1c:	490f      	ldr	r1, [pc, #60]	@ (8002e5c <rt_test_008_005_execute.lto_priv.0+0x16c>)
 8002e1e:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002e20:	2301      	movs	r3, #1
 8002e22:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002e24:	7003      	strb	r3, [r0, #0]
 8002e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8002e28:	4c09      	ldr	r4, [pc, #36]	@ (8002e50 <rt_test_008_005_execute.lto_priv.0+0x160>)
  test_global_fail     = true;
 8002e2a:	480a      	ldr	r0, [pc, #40]	@ (8002e54 <rt_test_008_005_execute.lto_priv.0+0x164>)
  test_failure_message = msg;
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <rt_test_008_005_execute.lto_priv.0+0x168>)
 8002e2e:	490c      	ldr	r1, [pc, #48]	@ (8002e60 <rt_test_008_005_execute.lto_priv.0+0x170>)
 8002e30:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8002e32:	2301      	movs	r3, #1
 8002e34:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8002e36:	7003      	strb	r3, [r0, #0]
 8002e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200010b4 	.word	0x200010b4
 8002e40:	200011c0 	.word	0x200011c0
 8002e44:	08004e71 	.word	0x08004e71
 8002e48:	20000a08 	.word	0x20000a08
 8002e4c:	200010a0 	.word	0x200010a0
 8002e50:	200010d1 	.word	0x200010d1
 8002e54:	200010d0 	.word	0x200010d0
 8002e58:	200010cc 	.word	0x200010cc
 8002e5c:	0800b2dc 	.word	0x0800b2dc
 8002e60:	0800b2d0 	.word	0x0800b2d0
	...

08002e70 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002e72:	4c19      	ldr	r4, [pc, #100]	@ (8002ed8 <chSchGoSleepTimeoutS+0x68>)
  if (TIME_INFINITE != timeout) {
 8002e74:	1c4b      	adds	r3, r1, #1
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002e76:	69a7      	ldr	r7, [r4, #24]
  thread_t *tp = tqp->next;
 8002e78:	6825      	ldr	r5, [r4, #0]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	4606      	mov	r6, r0
  if (TIME_INFINITE != timeout) {
 8002e7e:	d01a      	beq.n	8002eb6 <chSchGoSleepTimeoutS+0x46>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002e80:	4a16      	ldr	r2, [pc, #88]	@ (8002edc <chSchGoSleepTimeoutS+0x6c>)
 8002e82:	463b      	mov	r3, r7
 8002e84:	a801      	add	r0, sp, #4
 8002e86:	f7ff fd13 	bl	80028b0 <chVTDoSetI>
  otp->state = newstate;
 8002e8a:	f887 6020 	strb.w	r6, [r7, #32]
  tqp->next             = tp->queue.next;
 8002e8e:	682b      	ldr	r3, [r5, #0]
 8002e90:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002e92:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f885 3020 	strb.w	r3, [r5, #32]
  chSysSwitch(currp, otp);
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	4628      	mov	r0, r5
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002e9e:	61a5      	str	r5, [r4, #24]
  chSysSwitch(currp, otp);
 8002ea0:	f7fd fa0e 	bl	80002c0 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8002ea4:	9b04      	ldr	r3, [sp, #16]
 8002ea6:	b113      	cbz	r3, 8002eae <chSchGoSleepTimeoutS+0x3e>
      chVTDoResetI(&vt);
 8002ea8:	a801      	add	r0, sp, #4
 8002eaa:	f7ff fd49 	bl	8002940 <chVTDoResetI>
  return currp->u.rdymsg;
 8002eae:	69a3      	ldr	r3, [r4, #24]
}
 8002eb0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002eb2:	b007      	add	sp, #28
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  otp->state = newstate;
 8002eb6:	f887 0020 	strb.w	r0, [r7, #32]
  tqp->next             = tp->queue.next;
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8002ebe:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002ec0:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	4639      	mov	r1, r7
  currp->state = CH_STATE_CURRENT;
 8002ec6:	f885 2020 	strb.w	r2, [r5, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002eca:	61a5      	str	r5, [r4, #24]
  chSysSwitch(currp, otp);
 8002ecc:	f7fd f9f8 	bl	80002c0 <_port_switch>
  return currp->u.rdymsg;
 8002ed0:	69a3      	ldr	r3, [r4, #24]
}
 8002ed2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002ed4:	b007      	add	sp, #28
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed8:	200011c0 	.word	0x200011c0
 8002edc:	08000931 	.word	0x08000931

08002ee0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee4:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
 8002ee6:	f8d0 801c 	ldr.w	r8, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	4616      	mov	r6, r2
 8002eee:	f04f 0920 	mov.w	r9, #32
 8002ef2:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002ef6:	b38a      	cbz	r2, 8002f5c <oqWriteTimeout+0x7c>
 8002ef8:	4646      	mov	r6, r8
 8002efa:	4604      	mov	r4, r0
 8002efc:	4692      	mov	sl, r2
 8002efe:	f04f 0b00 	mov.w	fp, #0
 8002f02:	9203      	str	r2, [sp, #12]
 8002f04:	4688      	mov	r8, r1
  if (n > oqGetEmptyI(oqp)) {
 8002f06:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002f08:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8002f0c:	4552      	cmp	r2, sl
    n = oqGetEmptyI(oqp);
 8002f0e:	bf34      	ite	cc
 8002f10:	68a5      	ldrcc	r5, [r4, #8]
 8002f12:	4655      	movcs	r5, sl
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002f14:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8002f16:	42af      	cmp	r7, r5
 8002f18:	d84a      	bhi.n	8002fb0 <oqWriteTimeout+0xd0>
  else if (n > s1) {
 8002f1a:	d226      	bcs.n	8002f6a <oqWriteTimeout+0x8a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002f1c:	463a      	mov	r2, r7
 8002f1e:	4641      	mov	r1, r8
 8002f20:	f7fd fc52 	bl	80007c8 <memcpy>
    s2 = n - s1;
 8002f24:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002f26:	eb08 0107 	add.w	r1, r8, r7
 8002f2a:	68e0      	ldr	r0, [r4, #12]
 8002f2c:	9202      	str	r2, [sp, #8]
 8002f2e:	f7fd fc4b 	bl	80007c8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002f32:	9a02      	ldr	r2, [sp, #8]
 8002f34:	68e1      	ldr	r1, [r4, #12]
 8002f36:	4411      	add	r1, r2
  oqp->q_counter -= n;
 8002f38:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002f3a:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 8002f3c:	1b52      	subs	r2, r2, r5
 8002f3e:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002f40:	b10e      	cbz	r6, 8002f46 <oqWriteTimeout+0x66>
        nfy(oqp);
 8002f42:	4620      	mov	r0, r4
 8002f44:	47b0      	blx	r6
 8002f46:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002f4a:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8002f4e:	44a8      	add	r8, r5
 8002f50:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002f54:	f1ba 0f00 	cmp.w	sl, #0
 8002f58:	d1d5      	bne.n	8002f06 <oqWriteTimeout+0x26>
 8002f5a:	9e03      	ldr	r6, [sp, #12]
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002f64:	b005      	add	sp, #20
 8002f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	462a      	mov	r2, r5
 8002f6e:	f7fd fc2b 	bl	80007c8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002f72:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 8002f74:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr += n;
 8002f76:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 8002f78:	1b52      	subs	r2, r2, r5
 8002f7a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002f7c:	2d00      	cmp	r5, #0
 8002f7e:	d1df      	bne.n	8002f40 <oqWriteTimeout+0x60>
  if (TIME_IMMEDIATE == timeout) {
 8002f80:	9b01      	ldr	r3, [sp, #4]
 8002f82:	b163      	cbz	r3, 8002f9e <oqWriteTimeout+0xbe>
  queue_insert(currp, tqp);
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <oqWriteTimeout+0xe0>)
  tp->queue.prev             = tqp->prev;
 8002f86:	6860      	ldr	r0, [r4, #4]
 8002f88:	699a      	ldr	r2, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002f8a:	9901      	ldr	r1, [sp, #4]
 8002f8c:	e9c2 4000 	strd	r4, r0, [r2]
  tp->queue.prev->queue.next = tp;
 8002f90:	6002      	str	r2, [r0, #0]
  tqp->prev                  = tp;
 8002f92:	6062      	str	r2, [r4, #4]
 8002f94:	2004      	movs	r0, #4
 8002f96:	f7ff ff6b 	bl	8002e70 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d0b3      	beq.n	8002f06 <oqWriteTimeout+0x26>
  return max - n;
 8002f9e:	9e03      	ldr	r6, [sp, #12]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	eba6 000a 	sub.w	r0, r6, sl
 8002fa6:	f383 8811 	msr	BASEPRI, r3
}
 8002faa:	b005      	add	sp, #20
 8002fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	462a      	mov	r2, r5
 8002fb4:	f7fd fc08 	bl	80007c8 <memcpy>
    oqp->q_wrptr += n;
 8002fb8:	6961      	ldr	r1, [r4, #20]
 8002fba:	4429      	add	r1, r5
 8002fbc:	e7da      	b.n	8002f74 <oqWriteTimeout+0x94>
 8002fbe:	bf00      	nop
 8002fc0:	200011c0 	.word	0x200011c0
	...

08002fd0 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fd4:	3030      	adds	r0, #48	@ 0x30
 8002fd6:	f7ff bf83 	b.w	8002ee0 <oqWriteTimeout>
 8002fda:	bf00      	nop
 8002fdc:	0000      	movs	r0, r0
	...

08002fe0 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002fe0:	3030      	adds	r0, #48	@ 0x30
 8002fe2:	f7ff bf7d 	b.w	8002ee0 <oqWriteTimeout>
 8002fe6:	bf00      	nop
	...

08002ff0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	f383 8811 	msr	BASEPRI, r3
  while (iqIsEmptyI(iqp)) {
 8002ffa:	6883      	ldr	r3, [r0, #8]
 8002ffc:	b98b      	cbnz	r3, 8003022 <iqGetTimeout+0x32>
  if (TIME_IMMEDIATE == timeout) {
 8002ffe:	460d      	mov	r5, r1
 8003000:	b329      	cbz	r1, 800304e <iqGetTimeout+0x5e>
 8003002:	4e16      	ldr	r6, [pc, #88]	@ (800305c <iqGetTimeout+0x6c>)
  queue_insert(currp, tqp);
 8003004:	69b3      	ldr	r3, [r6, #24]
  tp->queue.prev             = tqp->prev;
 8003006:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003008:	4629      	mov	r1, r5
 800300a:	e9c3 4200 	strd	r4, r2, [r3]
 800300e:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8003010:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8003012:	6063      	str	r3, [r4, #4]
 8003014:	f7ff ff2c 	bl	8002e70 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8003018:	2800      	cmp	r0, #0
 800301a:	db1a      	blt.n	8003052 <iqGetTimeout+0x62>
  while (iqIsEmptyI(iqp)) {
 800301c:	68a3      	ldr	r3, [r4, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <iqGetTimeout+0x14>
  iqp->q_counter--;
 8003022:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003024:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8003026:	3b01      	subs	r3, #1
 8003028:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800302a:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 800302c:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800302e:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8003030:	bf28      	it	cs
 8003032:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8003034:	61a2      	str	r2, [r4, #24]
 8003036:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8003038:	bf28      	it	cs
 800303a:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800303c:	69e3      	ldr	r3, [r4, #28]
 800303e:	b10b      	cbz	r3, 8003044 <iqGetTimeout+0x54>
    iqp->q_notify(iqp);
 8003040:	4620      	mov	r0, r4
 8003042:	4798      	blx	r3
 8003044:	2300      	movs	r3, #0
 8003046:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 800304a:	4628      	mov	r0, r5
}
 800304c:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_TIMEOUT;
 800304e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003052:	2300      	movs	r3, #0
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	bf00      	nop
 800305c:	200011c0 	.word	0x200011c0

08003060 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003060:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003064:	300c      	adds	r0, #12
 8003066:	f7ff bfc3 	b.w	8002ff0 <iqGetTimeout>
 800306a:	bf00      	nop
 800306c:	0000      	movs	r0, r0
	...

08003070 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003070:	300c      	adds	r0, #12
 8003072:	f7ff bfbd 	b.w	8002ff0 <iqGetTimeout>
 8003076:	bf00      	nop
	...

08003080 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8003080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003084:	b085      	sub	sp, #20
  qnotify_t nfy = iqp->q_notify;
 8003086:	f8d0 801c 	ldr.w	r8, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	4616      	mov	r6, r2
 800308e:	f04f 0920 	mov.w	r9, #32
 8003092:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8003096:	2a00      	cmp	r2, #0
 8003098:	d031      	beq.n	80030fe <iqReadTimeout+0x7e>
 800309a:	4646      	mov	r6, r8
 800309c:	4604      	mov	r4, r0
 800309e:	4692      	mov	sl, r2
 80030a0:	f04f 0b00 	mov.w	fp, #0
 80030a4:	9203      	str	r2, [sp, #12]
 80030a6:	4688      	mov	r8, r1
  if (n > iqGetFullI(iqp)) {
 80030a8:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80030aa:	69a1      	ldr	r1, [r4, #24]
 80030ac:	6927      	ldr	r7, [r4, #16]
  if (n > iqGetFullI(iqp)) {
 80030ae:	4552      	cmp	r2, sl
    n = iqGetFullI(iqp);
 80030b0:	bf34      	ite	cc
 80030b2:	68a5      	ldrcc	r5, [r4, #8]
 80030b4:	4655      	movcs	r5, sl
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80030b6:	1a7f      	subs	r7, r7, r1
  if (n < s1) {
 80030b8:	42af      	cmp	r7, r5
 80030ba:	d84a      	bhi.n	8003152 <iqReadTimeout+0xd2>
  else if (n > s1) {
 80030bc:	d226      	bcs.n	800310c <iqReadTimeout+0x8c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80030be:	463a      	mov	r2, r7
 80030c0:	4640      	mov	r0, r8
 80030c2:	f7fd fb81 	bl	80007c8 <memcpy>
    s2 = n - s1;
 80030c6:	1bea      	subs	r2, r5, r7
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80030c8:	68e1      	ldr	r1, [r4, #12]
 80030ca:	9202      	str	r2, [sp, #8]
 80030cc:	eb08 0007 	add.w	r0, r8, r7
 80030d0:	f7fd fb7a 	bl	80007c8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80030d4:	9a02      	ldr	r2, [sp, #8]
 80030d6:	68e1      	ldr	r1, [r4, #12]
 80030d8:	4411      	add	r1, r2
  iqp->q_counter -= n;
 80030da:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80030dc:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 80030de:	1b52      	subs	r2, r2, r5
 80030e0:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 80030e2:	b10e      	cbz	r6, 80030e8 <iqReadTimeout+0x68>
        nfy(iqp);
 80030e4:	4620      	mov	r0, r4
 80030e6:	47b0      	blx	r6
 80030e8:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 80030ec:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 80030f0:	44a8      	add	r8, r5
 80030f2:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80030f6:	f1ba 0f00 	cmp.w	sl, #0
 80030fa:	d1d5      	bne.n	80030a8 <iqReadTimeout+0x28>
 80030fc:	9e03      	ldr	r6, [sp, #12]
 80030fe:	4630      	mov	r0, r6
 8003100:	2300      	movs	r3, #0
 8003102:	f383 8811 	msr	BASEPRI, r3
}
 8003106:	b005      	add	sp, #20
 8003108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800310c:	462a      	mov	r2, r5
 800310e:	4640      	mov	r0, r8
 8003110:	f7fd fb5a 	bl	80007c8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003114:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 8003116:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr += n;
 8003118:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 800311a:	1b52      	subs	r2, r2, r5
 800311c:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 800311e:	2d00      	cmp	r5, #0
 8003120:	d1df      	bne.n	80030e2 <iqReadTimeout+0x62>
  if (TIME_IMMEDIATE == timeout) {
 8003122:	9b01      	ldr	r3, [sp, #4]
 8003124:	b163      	cbz	r3, 8003140 <iqReadTimeout+0xc0>
  queue_insert(currp, tqp);
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <iqReadTimeout+0xe0>)
  tp->queue.prev             = tqp->prev;
 8003128:	6860      	ldr	r0, [r4, #4]
 800312a:	699a      	ldr	r2, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800312c:	9901      	ldr	r1, [sp, #4]
 800312e:	e9c2 4000 	strd	r4, r0, [r2]
  tp->queue.prev->queue.next = tp;
 8003132:	6002      	str	r2, [r0, #0]
  tqp->prev                  = tp;
 8003134:	6062      	str	r2, [r4, #4]
 8003136:	2004      	movs	r0, #4
 8003138:	f7ff fe9a 	bl	8002e70 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 800313c:	2800      	cmp	r0, #0
 800313e:	d0b3      	beq.n	80030a8 <iqReadTimeout+0x28>
  return max - n;
 8003140:	9e03      	ldr	r6, [sp, #12]
 8003142:	2300      	movs	r3, #0
 8003144:	eba6 000a 	sub.w	r0, r6, sl
 8003148:	f383 8811 	msr	BASEPRI, r3
}
 800314c:	b005      	add	sp, #20
 800314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003152:	462a      	mov	r2, r5
 8003154:	4640      	mov	r0, r8
 8003156:	f7fd fb37 	bl	80007c8 <memcpy>
    iqp->q_rdptr += n;
 800315a:	69a1      	ldr	r1, [r4, #24]
 800315c:	4429      	add	r1, r5
 800315e:	e7da      	b.n	8003116 <iqReadTimeout+0x96>
 8003160:	200011c0 	.word	0x200011c0
	...

08003170 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003170:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003174:	300c      	adds	r0, #12
 8003176:	f7ff bf83 	b.w	8003080 <iqReadTimeout>
 800317a:	bf00      	nop
 800317c:	0000      	movs	r0, r0
	...

08003180 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003180:	300c      	adds	r0, #12
 8003182:	f7ff bf7d 	b.w	8003080 <iqReadTimeout>
 8003186:	bf00      	nop
	...

08003190 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	4604      	mov	r4, r0
 8003194:	460f      	mov	r7, r1
 8003196:	2320      	movs	r3, #32
 8003198:	f383 8811 	msr	BASEPRI, r3
  while (oqIsFullI(oqp)) {
 800319c:	6883      	ldr	r3, [r0, #8]
 800319e:	b98b      	cbnz	r3, 80031c4 <oqPutTimeout+0x34>
  if (TIME_IMMEDIATE == timeout) {
 80031a0:	4615      	mov	r5, r2
 80031a2:	b322      	cbz	r2, 80031ee <oqPutTimeout+0x5e>
 80031a4:	4e15      	ldr	r6, [pc, #84]	@ (80031fc <oqPutTimeout+0x6c>)
  tp->queue.prev             = tqp->prev;
 80031a6:	6860      	ldr	r0, [r4, #4]
  queue_insert(currp, tqp);
 80031a8:	69b3      	ldr	r3, [r6, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80031aa:	4629      	mov	r1, r5
 80031ac:	e9c3 4000 	strd	r4, r0, [r3]
  tp->queue.prev->queue.next = tp;
 80031b0:	6003      	str	r3, [r0, #0]
 80031b2:	2004      	movs	r0, #4
  tqp->prev                  = tp;
 80031b4:	6063      	str	r3, [r4, #4]
 80031b6:	f7ff fe5b 	bl	8002e70 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 80031ba:	2800      	cmp	r0, #0
 80031bc:	db19      	blt.n	80031f2 <oqPutTimeout+0x62>
  while (oqIsFullI(oqp)) {
 80031be:	68a3      	ldr	r3, [r4, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <oqPutTimeout+0x16>
  *oqp->q_wrptr++ = b;
 80031c4:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80031c6:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80031c8:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80031ca:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80031cc:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80031ce:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80031d0:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80031d2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80031d6:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80031d8:	bf24      	itt	cs
 80031da:	68e3      	ldrcs	r3, [r4, #12]
 80031dc:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 80031de:	69e3      	ldr	r3, [r4, #28]
 80031e0:	b10b      	cbz	r3, 80031e6 <oqPutTimeout+0x56>
    oqp->q_notify(oqp);
 80031e2:	4620      	mov	r0, r4
 80031e4:	4798      	blx	r3
 80031e6:	2000      	movs	r0, #0
 80031e8:	f380 8811 	msr	BASEPRI, r0
}
 80031ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return MSG_TIMEOUT;
 80031ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031f2:	2300      	movs	r3, #0
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200011c0 	.word	0x200011c0

08003200 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003200:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003204:	3030      	adds	r0, #48	@ 0x30
 8003206:	f7ff bfc3 	b.w	8003190 <oqPutTimeout>
 800320a:	bf00      	nop
 800320c:	0000      	movs	r0, r0
	...

08003210 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003210:	3030      	adds	r0, #48	@ 0x30
 8003212:	f7ff bfbd 	b.w	8003190 <oqPutTimeout>
 8003216:	bf00      	nop
	...

08003220 <rt_test_003_001_execute.lto_priv.0>:
static void rt_test_003_001_execute(void) {
 8003220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8003224:	4e39      	ldr	r6, [pc, #228]	@ (800330c <rt_test_003_001_execute.lto_priv.0+0xec>)
 8003226:	2301      	movs	r3, #1
 8003228:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 800322c:	6033      	str	r3, [r6, #0]
 800322e:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8003232:	2520      	movs	r5, #32
 8003234:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003238:	2164      	movs	r1, #100	@ 0x64
 800323a:	2008      	movs	r0, #8
 800323c:	f7ff fe18 	bl	8002e70 <chSchGoSleepTimeoutS>
 8003240:	2700      	movs	r7, #0
 8003242:	f387 8811 	msr	BASEPRI, r7
 8003246:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003248:	3b64      	subs	r3, #100	@ 0x64
 800324a:	eba3 0308 	sub.w	r3, r3, r8
  if (!condition)
 800324e:	2b02      	cmp	r3, #2
 8003250:	d84e      	bhi.n	80032f0 <rt_test_003_001_execute.lto_priv.0+0xd0>
  test_set_step(2);
 8003252:	2302      	movs	r3, #2
 8003254:	6033      	str	r3, [r6, #0]
 8003256:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 800325a:	f385 8811 	msr	BASEPRI, r5
 800325e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003262:	2008      	movs	r0, #8
 8003264:	f7ff fe04 	bl	8002e70 <chSchGoSleepTimeoutS>
 8003268:	f387 8811 	msr	BASEPRI, r7
 800326c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800326e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003272:	eba3 0308 	sub.w	r3, r3, r8
 8003276:	2b02      	cmp	r3, #2
 8003278:	d83a      	bhi.n	80032f0 <rt_test_003_001_execute.lto_priv.0+0xd0>
  test_set_step(3);
 800327a:	2303      	movs	r3, #3
 800327c:	6033      	str	r3, [r6, #0]
 800327e:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8003282:	f385 8811 	msr	BASEPRI, r5
 8003286:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800328a:	2008      	movs	r0, #8
 800328c:	f7ff fdf0 	bl	8002e70 <chSchGoSleepTimeoutS>
 8003290:	f387 8811 	msr	BASEPRI, r7
 8003294:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003296:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800329a:	eba3 0308 	sub.w	r3, r3, r8
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d826      	bhi.n	80032f0 <rt_test_003_001_execute.lto_priv.0+0xd0>
  test_set_step(4);
 80032a2:	2304      	movs	r3, #4
 80032a4:	6033      	str	r3, [r6, #0]
 80032a6:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 80032aa:	f385 8811 	msr	BASEPRI, r5
 80032ae:	f242 7110 	movw	r1, #10000	@ 0x2710
 80032b2:	2008      	movs	r0, #8
 80032b4:	f7ff fddc 	bl	8002e70 <chSchGoSleepTimeoutS>
 80032b8:	f387 8811 	msr	BASEPRI, r7
 80032bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80032be:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80032c2:	3b10      	subs	r3, #16
 80032c4:	eba3 0308 	sub.w	r3, r3, r8
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d811      	bhi.n	80032f0 <rt_test_003_001_execute.lto_priv.0+0xd0>
  test_set_step(5);
 80032cc:	2305      	movs	r3, #5
 80032ce:	6033      	str	r3, [r6, #0]
 80032d0:	6a66      	ldr	r6, [r4, #36]	@ 0x24
  return systime + (systime_t)interval;
 80032d2:	3664      	adds	r6, #100	@ 0x64
 80032d4:	f385 8811 	msr	BASEPRI, r5
 80032d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (interval > (sysinterval_t)0) {
 80032da:	1a71      	subs	r1, r6, r1
 80032dc:	d112      	bne.n	8003304 <rt_test_003_001_execute.lto_priv.0+0xe4>
 80032de:	2300      	movs	r3, #0
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80032ea:	1b9b      	subs	r3, r3, r6
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d907      	bls.n	8003300 <rt_test_003_001_execute.lto_priv.0+0xe0>
  test_local_fail      = true;
 80032f0:	4c07      	ldr	r4, [pc, #28]	@ (8003310 <rt_test_003_001_execute.lto_priv.0+0xf0>)
  test_global_fail     = true;
 80032f2:	4808      	ldr	r0, [pc, #32]	@ (8003314 <rt_test_003_001_execute.lto_priv.0+0xf4>)
  test_failure_message = msg;
 80032f4:	4a08      	ldr	r2, [pc, #32]	@ (8003318 <rt_test_003_001_execute.lto_priv.0+0xf8>)
 80032f6:	4909      	ldr	r1, [pc, #36]	@ (800331c <rt_test_003_001_execute.lto_priv.0+0xfc>)
 80032f8:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80032fa:	2301      	movs	r3, #1
 80032fc:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80032fe:	7003      	strb	r3, [r0, #0]
}
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	2008      	movs	r0, #8
 8003306:	f7ff fdb3 	bl	8002e70 <chSchGoSleepTimeoutS>
}
 800330a:	e7e8      	b.n	80032de <rt_test_003_001_execute.lto_priv.0+0xbe>
 800330c:	200010b4 	.word	0x200010b4
 8003310:	200010d1 	.word	0x200010d1
 8003314:	200010d0 	.word	0x200010d0
 8003318:	200010cc 	.word	0x200010cc
 800331c:	0800b2dc 	.word	0x0800b2dc

08003320 <rt_test_004_001_execute.lto_priv.0>:

static void rt_test_004_001_execute(void) {
 8003320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8003324:	4c3a      	ldr	r4, [pc, #232]	@ (8003410 <rt_test_004_001_execute.lto_priv.0+0xf0>)
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8003326:	4f3b      	ldr	r7, [pc, #236]	@ (8003414 <rt_test_004_001_execute.lto_priv.0+0xf4>)
  return chThdGetSelfX()->prio;
 8003328:	69a3      	ldr	r3, [r4, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800332a:	4a3b      	ldr	r2, [pc, #236]	@ (8003418 <rt_test_004_001_execute.lto_priv.0+0xf8>)
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	483b      	ldr	r0, [pc, #236]	@ (800341c <rt_test_004_001_execute.lto_priv.0+0xfc>)
 8003330:	4b3b      	ldr	r3, [pc, #236]	@ (8003420 <rt_test_004_001_execute.lto_priv.0+0x100>)
 8003332:	4d3c      	ldr	r5, [pc, #240]	@ (8003424 <rt_test_004_001_execute.lto_priv.0+0x104>)
  test_set_step(1);
 8003334:	f04f 0801 	mov.w	r8, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8003338:	3901      	subs	r1, #1
  test_set_step(1);
 800333a:	f8c7 8000 	str.w	r8, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 800333e:	f007 fbff 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8003342:	2320      	movs	r3, #32
 8003344:	6028      	str	r0, [r5, #0]
 8003346:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 800334a:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 800334c:	6820      	ldr	r0, [r4, #0]
  *trp = tp;
 800334e:	4e36      	ldr	r6, [pc, #216]	@ (8003428 <rt_test_004_001_execute.lto_priv.0+0x108>)
  otp->state = newstate;
 8003350:	2303      	movs	r3, #3
 8003352:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8003356:	6803      	ldr	r3, [r0, #0]
  tp->u.wttrp = trp;
 8003358:	624e      	str	r6, [r1, #36]	@ 0x24
  tqp->next->queue.prev = (thread_t *)tqp;
 800335a:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 800335c:	f880 8020 	strb.w	r8, [r0, #32]
  tqp->next             = tp->queue.next;
 8003360:	6023      	str	r3, [r4, #0]
  *trp = tp;
 8003362:	6031      	str	r1, [r6, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003364:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8003366:	f7fc ffab 	bl	80002c0 <_port_switch>
  return currp->u.rdymsg;
 800336a:	69a3      	ldr	r3, [r4, #24]
 800336c:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8003370:	2300      	movs	r3, #0
 8003372:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 8003376:	6833      	ldr	r3, [r6, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d135      	bne.n	80033e8 <rt_test_004_001_execute.lto_priv.0+0xc8>
 800337c:	f1b8 0f00 	cmp.w	r8, #0
 8003380:	d128      	bne.n	80033d4 <rt_test_004_001_execute.lto_priv.0+0xb4>
 8003382:	f105 0914 	add.w	r9, r5, #20
    if (threads[i] != NULL) {
 8003386:	f855 0b04 	ldr.w	r0, [r5], #4
 800338a:	b118      	cbz	r0, 8003394 <rt_test_004_001_execute.lto_priv.0+0x74>
      chThdWait(threads[i]);
 800338c:	f007 fe80 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8003390:	f845 8c04 	str.w	r8, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8003394:	45a9      	cmp	r9, r5
 8003396:	d1f6      	bne.n	8003386 <rt_test_004_001_execute.lto_priv.0+0x66>
  }

  /* [4.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8003398:	2302      	movs	r3, #2
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	2320      	movs	r3, #32
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 80033a6:	69a3      	ldr	r3, [r4, #24]
 80033a8:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
  tp->u.wttrp = trp;
 80033aa:	625e      	str	r6, [r3, #36]	@ 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80033ac:	f242 7110 	movw	r1, #10000	@ 0x2710
 80033b0:	2003      	movs	r0, #3
  *trp = tp;
 80033b2:	6033      	str	r3, [r6, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80033b4:	f7ff fd5c 	bl	8002e70 <chSchGoSleepTimeoutS>
 80033b8:	2300      	movs	r3, #0
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80033c0:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80033c4:	3b10      	subs	r3, #16
 80033c6:	1b1b      	subs	r3, r3, r4
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d817      	bhi.n	80033fc <rt_test_004_001_execute.lto_priv.0+0xdc>
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	b95b      	cbnz	r3, 80033e8 <rt_test_004_001_execute.lto_priv.0+0xc8>
 80033d0:	3001      	adds	r0, #1
 80033d2:	d011      	beq.n	80033f8 <rt_test_004_001_execute.lto_priv.0+0xd8>
  test_local_fail      = true;
 80033d4:	4c15      	ldr	r4, [pc, #84]	@ (800342c <rt_test_004_001_execute.lto_priv.0+0x10c>)
  test_global_fail     = true;
 80033d6:	4816      	ldr	r0, [pc, #88]	@ (8003430 <rt_test_004_001_execute.lto_priv.0+0x110>)
  test_failure_message = msg;
 80033d8:	4a16      	ldr	r2, [pc, #88]	@ (8003434 <rt_test_004_001_execute.lto_priv.0+0x114>)
 80033da:	4917      	ldr	r1, [pc, #92]	@ (8003438 <rt_test_004_001_execute.lto_priv.0+0x118>)
 80033dc:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80033de:	2301      	movs	r3, #1
 80033e0:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80033e2:	7003      	strb	r3, [r0, #0]
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
}
 80033e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 80033e8:	4c10      	ldr	r4, [pc, #64]	@ (800342c <rt_test_004_001_execute.lto_priv.0+0x10c>)
  test_global_fail     = true;
 80033ea:	4811      	ldr	r0, [pc, #68]	@ (8003430 <rt_test_004_001_execute.lto_priv.0+0x110>)
  test_failure_message = msg;
 80033ec:	4a11      	ldr	r2, [pc, #68]	@ (8003434 <rt_test_004_001_execute.lto_priv.0+0x114>)
 80033ee:	4913      	ldr	r1, [pc, #76]	@ (800343c <rt_test_004_001_execute.lto_priv.0+0x11c>)
 80033f0:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80033f2:	2301      	movs	r3, #1
 80033f4:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80033f6:	7003      	strb	r3, [r0, #0]
 80033f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 80033fc:	4c0b      	ldr	r4, [pc, #44]	@ (800342c <rt_test_004_001_execute.lto_priv.0+0x10c>)
  test_global_fail     = true;
 80033fe:	480c      	ldr	r0, [pc, #48]	@ (8003430 <rt_test_004_001_execute.lto_priv.0+0x110>)
  test_failure_message = msg;
 8003400:	4a0c      	ldr	r2, [pc, #48]	@ (8003434 <rt_test_004_001_execute.lto_priv.0+0x114>)
 8003402:	490f      	ldr	r1, [pc, #60]	@ (8003440 <rt_test_004_001_execute.lto_priv.0+0x120>)
 8003404:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8003406:	2301      	movs	r3, #1
 8003408:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800340a:	7003      	strb	r3, [r0, #0]
 800340c:	e7f4      	b.n	80033f8 <rt_test_004_001_execute.lto_priv.0+0xd8>
 800340e:	bf00      	nop
 8003410:	200011c0 	.word	0x200011c0
 8003414:	200010b4 	.word	0x200010b4
 8003418:	08004351 	.word	0x08004351
 800341c:	20000a08 	.word	0x20000a08
 8003420:	0800b1cc 	.word	0x0800b1cc
 8003424:	200010a0 	.word	0x200010a0
 8003428:	2000109c 	.word	0x2000109c
 800342c:	200010d1 	.word	0x200010d1
 8003430:	200010d0 	.word	0x200010d0
 8003434:	200010cc 	.word	0x200010cc
 8003438:	0800b328 	.word	0x0800b328
 800343c:	0800b31c 	.word	0x0800b31c
 8003440:	0800b2dc 	.word	0x0800b2dc
	...

08003450 <rt_test_005_003_execute.lto_priv.0>:
static void rt_test_005_003_execute(void) {
 8003450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8003454:	4e67      	ldr	r6, [pc, #412]	@ (80035f4 <rt_test_005_003_execute.lto_priv.0+0x1a4>)
 8003456:	2301      	movs	r3, #1
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	2520      	movs	r5, #32
 800345c:	f385 8811 	msr	BASEPRI, r5
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8003460:	4c65      	ldr	r4, [pc, #404]	@ (80035f8 <rt_test_005_003_execute.lto_priv.0+0x1a8>)
 8003462:	68a1      	ldr	r1, [r4, #8]
 8003464:	1e4a      	subs	r2, r1, #1
 8003466:	2a00      	cmp	r2, #0
 8003468:	60a2      	str	r2, [r4, #8]
 800346a:	db0b      	blt.n	8003484 <rt_test_005_003_execute.lto_priv.0+0x34>
 800346c:	2200      	movs	r2, #0
 800346e:	f382 8811 	msr	BASEPRI, r2
  test_local_fail      = true;
 8003472:	4c62      	ldr	r4, [pc, #392]	@ (80035fc <rt_test_005_003_execute.lto_priv.0+0x1ac>)
  test_global_fail     = true;
 8003474:	4862      	ldr	r0, [pc, #392]	@ (8003600 <rt_test_005_003_execute.lto_priv.0+0x1b0>)
  test_failure_message = msg;
 8003476:	4a63      	ldr	r2, [pc, #396]	@ (8003604 <rt_test_005_003_execute.lto_priv.0+0x1b4>)
 8003478:	4963      	ldr	r1, [pc, #396]	@ (8003608 <rt_test_005_003_execute.lto_priv.0+0x1b8>)
  test_local_fail      = true;
 800347a:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800347c:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 800347e:	6011      	str	r1, [r2, #0]
}
 8003480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TIME_IMMEDIATE == timeout) {
      sp->cnt++;
 8003484:	60a1      	str	r1, [r4, #8]
 8003486:	2300      	movs	r3, #0
 8003488:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	42a3      	cmp	r3, r4
 8003490:	d159      	bne.n	8003546 <rt_test_005_003_execute.lto_priv.0+0xf6>
    test_assert(sem1.cnt == 0, "counter not zero");
 8003492:	68a7      	ldr	r7, [r4, #8]
 8003494:	2f00      	cmp	r7, #0
 8003496:	d160      	bne.n	800355a <rt_test_005_003_execute.lto_priv.0+0x10a>
 8003498:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 800360c <rt_test_005_003_execute.lto_priv.0+0x1bc>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800349c:	4a5c      	ldr	r2, [pc, #368]	@ (8003610 <rt_test_005_003_execute.lto_priv.0+0x1c0>)
 800349e:	485d      	ldr	r0, [pc, #372]	@ (8003614 <rt_test_005_003_execute.lto_priv.0+0x1c4>)
  test_set_step(2);
 80034a0:	2302      	movs	r3, #2
 80034a2:	6033      	str	r3, [r6, #0]
  return chThdGetSelfX()->prio;
 80034a4:	f8d8 3018 	ldr.w	r3, [r8, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	463b      	mov	r3, r7
 80034ac:	3901      	subs	r1, #1
 80034ae:	f007 fb47 	bl	800ab40 <chThdCreateStatic.constprop.0>
 80034b2:	4b59      	ldr	r3, [pc, #356]	@ (8003618 <rt_test_005_003_execute.lto_priv.0+0x1c8>)
 80034b4:	6018      	str	r0, [r3, #0]
 80034b6:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 80034ba:	68a3      	ldr	r3, [r4, #8]
 80034bc:	3b01      	subs	r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	60a3      	str	r3, [r4, #8]
 80034c2:	db54      	blt.n	800356e <rt_test_005_003_execute.lto_priv.0+0x11e>
 80034c4:	f04f 0a00 	mov.w	sl, #0
 80034c8:	f38a 8811 	msr	BASEPRI, sl
 80034cc:	4d52      	ldr	r5, [pc, #328]	@ (8003618 <rt_test_005_003_execute.lto_priv.0+0x1c8>)
 80034ce:	f105 0914 	add.w	r9, r5, #20
    if (threads[i] != NULL) {
 80034d2:	f855 0b04 	ldr.w	r0, [r5], #4
 80034d6:	b118      	cbz	r0, 80034e0 <rt_test_005_003_execute.lto_priv.0+0x90>
      chThdWait(threads[i]);
 80034d8:	f007 fdda 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 80034dc:	f845 ac04 	str.w	sl, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80034e0:	45a9      	cmp	r9, r5
 80034e2:	d1f6      	bne.n	80034d2 <rt_test_005_003_execute.lto_priv.0+0x82>
 80034e4:	bb37      	cbnz	r7, 8003534 <rt_test_005_003_execute.lto_priv.0+0xe4>
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	42a3      	cmp	r3, r4
 80034ea:	d12c      	bne.n	8003546 <rt_test_005_003_execute.lto_priv.0+0xf6>
 80034ec:	68a3      	ldr	r3, [r4, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d133      	bne.n	800355a <rt_test_005_003_execute.lto_priv.0+0x10a>
  test_set_step(3);
 80034f2:	2303      	movs	r3, #3
 80034f4:	6033      	str	r3, [r6, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80034f6:	f7ff fa5b 	bl	80029b0 <test_wait_tick>
 80034fa:	f8df a120 	ldr.w	sl, [pc, #288]	@ 800361c <rt_test_005_003_execute.lto_priv.0+0x1cc>
 80034fe:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8003620 <rt_test_005_003_execute.lto_priv.0+0x1d0>
 8003502:	4606      	mov	r6, r0
 8003504:	2541      	movs	r5, #65	@ 0x41
 8003506:	f04f 0920 	mov.w	r9, #32
 800350a:	f389 8811 	msr	BASEPRI, r9
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 800350e:	f8da 3000 	ldr.w	r3, [sl]
 8003512:	455b      	cmp	r3, fp
 8003514:	d203      	bcs.n	800351e <rt_test_005_003_execute.lto_priv.0+0xce>
    *test_tokp++ = token;
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	f8ca 2000 	str.w	r2, [sl]
 800351c:	701d      	strb	r5, [r3, #0]
 800351e:	f387 8811 	msr	BASEPRI, r7
 8003522:	f389 8811 	msr	BASEPRI, r9
 8003526:	68a3      	ldr	r3, [r4, #8]
 8003528:	3b01      	subs	r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	60a3      	str	r3, [r4, #8]
 800352e:	db2d      	blt.n	800358c <rt_test_005_003_execute.lto_priv.0+0x13c>
 8003530:	f387 8811 	msr	BASEPRI, r7
  test_local_fail      = true;
 8003534:	4c31      	ldr	r4, [pc, #196]	@ (80035fc <rt_test_005_003_execute.lto_priv.0+0x1ac>)
  test_global_fail     = true;
 8003536:	4832      	ldr	r0, [pc, #200]	@ (8003600 <rt_test_005_003_execute.lto_priv.0+0x1b0>)
  test_failure_message = msg;
 8003538:	4a32      	ldr	r2, [pc, #200]	@ (8003604 <rt_test_005_003_execute.lto_priv.0+0x1b4>)
 800353a:	4933      	ldr	r1, [pc, #204]	@ (8003608 <rt_test_005_003_execute.lto_priv.0+0x1b8>)
 800353c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800353e:	2301      	movs	r3, #1
 8003540:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8003542:	7003      	strb	r3, [r0, #0]
  return true;
 8003544:	e79c      	b.n	8003480 <rt_test_005_003_execute.lto_priv.0+0x30>
  test_local_fail      = true;
 8003546:	4c2d      	ldr	r4, [pc, #180]	@ (80035fc <rt_test_005_003_execute.lto_priv.0+0x1ac>)
  test_global_fail     = true;
 8003548:	482d      	ldr	r0, [pc, #180]	@ (8003600 <rt_test_005_003_execute.lto_priv.0+0x1b0>)
  test_failure_message = msg;
 800354a:	4a2e      	ldr	r2, [pc, #184]	@ (8003604 <rt_test_005_003_execute.lto_priv.0+0x1b4>)
 800354c:	4935      	ldr	r1, [pc, #212]	@ (8003624 <rt_test_005_003_execute.lto_priv.0+0x1d4>)
 800354e:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8003550:	2301      	movs	r3, #1
 8003552:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8003554:	7003      	strb	r3, [r0, #0]
}
 8003556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_local_fail      = true;
 800355a:	4c28      	ldr	r4, [pc, #160]	@ (80035fc <rt_test_005_003_execute.lto_priv.0+0x1ac>)
  test_global_fail     = true;
 800355c:	4828      	ldr	r0, [pc, #160]	@ (8003600 <rt_test_005_003_execute.lto_priv.0+0x1b0>)
  test_failure_message = msg;
 800355e:	4a29      	ldr	r2, [pc, #164]	@ (8003604 <rt_test_005_003_execute.lto_priv.0+0x1b4>)
 8003560:	4931      	ldr	r1, [pc, #196]	@ (8003628 <rt_test_005_003_execute.lto_priv.0+0x1d8>)
 8003562:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8003564:	2301      	movs	r3, #1
 8003566:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8003568:	7003      	strb	r3, [r0, #0]
 800356a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

      return MSG_TIMEOUT;
    }
    currp->u.wtsemp = sp;
 800356e:	f8d8 3018 	ldr.w	r3, [r8, #24]
  tp->queue.prev             = tqp->prev;
 8003572:	6862      	ldr	r2, [r4, #4]
 8003574:	625c      	str	r4, [r3, #36]	@ 0x24
 8003576:	e9c3 4200 	strd	r4, r2, [r3]
    sem_insert(currp, &sp->queue);

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800357a:	f241 3188 	movw	r1, #5000	@ 0x1388
  tp->queue.prev->queue.next = tp;
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8003582:	6063      	str	r3, [r4, #4]
 8003584:	f7ff fc74 	bl	8002e70 <chSchGoSleepTimeoutS>
 8003588:	4607      	mov	r7, r0
 800358a:	e79b      	b.n	80034c4 <rt_test_005_003_execute.lto_priv.0+0x74>
    currp->u.wtsemp = sp;
 800358c:	f8d8 3018 	ldr.w	r3, [r8, #24]
  tp->queue.prev             = tqp->prev;
 8003590:	6862      	ldr	r2, [r4, #4]
  tp->queue.next             = (thread_t *)tqp;
 8003592:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	625c      	str	r4, [r3, #36]	@ 0x24
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8003598:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
  tp->queue.prev->queue.next = tp;
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 80035a0:	6063      	str	r3, [r4, #4]
 80035a2:	f7ff fc65 	bl	8002e70 <chSchGoSleepTimeoutS>
 80035a6:	f387 8811 	msr	BASEPRI, r7
  if (!condition)
 80035aa:	3001      	adds	r0, #1
 80035ac:	d1c2      	bne.n	8003534 <rt_test_005_003_execute.lto_priv.0+0xe4>
 80035ae:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < 5; i++) {
 80035b0:	3501      	adds	r5, #1
 80035b2:	42a3      	cmp	r3, r4
 80035b4:	b2ed      	uxtb	r5, r5
 80035b6:	d1c6      	bne.n	8003546 <rt_test_005_003_execute.lto_priv.0+0xf6>
 80035b8:	68a3      	ldr	r3, [r4, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1cd      	bne.n	800355a <rt_test_005_003_execute.lto_priv.0+0x10a>
 80035be:	2d46      	cmp	r5, #70	@ 0x46
 80035c0:	d1a3      	bne.n	800350a <rt_test_005_003_execute.lto_priv.0+0xba>
    test_assert_sequence("ABCDE", "invalid sequence");
 80035c2:	491a      	ldr	r1, [pc, #104]	@ (800362c <rt_test_005_003_execute.lto_priv.0+0x1dc>)
 80035c4:	481a      	ldr	r0, [pc, #104]	@ (8003630 <rt_test_005_003_execute.lto_priv.0+0x1e0>)
 80035c6:	f7fd fab3 	bl	8000b30 <_test_assert_sequence>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	f47f af58 	bne.w	8003480 <rt_test_005_003_execute.lto_priv.0+0x30>
 80035d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 80035da:	1b9b      	subs	r3, r3, r6
 80035dc:	2b13      	cmp	r3, #19
 80035de:	f67f af4f 	bls.w	8003480 <rt_test_005_003_execute.lto_priv.0+0x30>
  test_local_fail      = true;
 80035e2:	4c06      	ldr	r4, [pc, #24]	@ (80035fc <rt_test_005_003_execute.lto_priv.0+0x1ac>)
  test_global_fail     = true;
 80035e4:	4806      	ldr	r0, [pc, #24]	@ (8003600 <rt_test_005_003_execute.lto_priv.0+0x1b0>)
  test_failure_message = msg;
 80035e6:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <rt_test_005_003_execute.lto_priv.0+0x1b4>)
 80035e8:	4912      	ldr	r1, [pc, #72]	@ (8003634 <rt_test_005_003_execute.lto_priv.0+0x1e4>)
 80035ea:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80035ec:	2301      	movs	r3, #1
 80035ee:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80035f0:	7003      	strb	r3, [r0, #0]
    return _test_fail(msg);
 80035f2:	e745      	b.n	8003480 <rt_test_005_003_execute.lto_priv.0+0x30>
 80035f4:	200010b4 	.word	0x200010b4
 80035f8:	20001090 	.word	0x20001090
 80035fc:	200010d1 	.word	0x200010d1
 8003600:	200010d0 	.word	0x200010d0
 8003604:	200010cc 	.word	0x200010cc
 8003608:	0800b284 	.word	0x0800b284
 800360c:	200011c0 	.word	0x200011c0
 8003610:	080043d1 	.word	0x080043d1
 8003614:	20000a08 	.word	0x20000a08
 8003618:	200010a0 	.word	0x200010a0
 800361c:	200010c8 	.word	0x200010c8
 8003620:	200010c8 	.word	0x200010c8
 8003624:	0800b1d8 	.word	0x0800b1d8
 8003628:	0800b1e8 	.word	0x0800b1e8
 800362c:	0800b170 	.word	0x0800b170
 8003630:	0800b1d0 	.word	0x0800b1d0
 8003634:	0800b2dc 	.word	0x0800b2dc
	...

08003640 <rt_test_008_006_execute.lto_priv.0>:
static void rt_test_008_006_execute(void) {
 8003640:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003642:	4848      	ldr	r0, [pc, #288]	@ (8003764 <rt_test_008_006_execute.lto_priv.0+0x124>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003644:	4c48      	ldr	r4, [pc, #288]	@ (8003768 <rt_test_008_006_execute.lto_priv.0+0x128>)
 8003646:	2301      	movs	r3, #1
 8003648:	6003      	str	r3, [r0, #0]
 800364a:	69a1      	ldr	r1, [r4, #24]
 800364c:	2320      	movs	r3, #32
 800364e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003652:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
  if (m == (eventmask_t)0) {
 8003654:	2b00      	cmp	r3, #0
 8003656:	d14f      	bne.n	80036f8 <rt_test_008_006_execute.lto_priv.0+0xb8>
 8003658:	f383 8811 	msr	BASEPRI, r3
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 800365c:	69a1      	ldr	r1, [r4, #24]
 800365e:	2220      	movs	r2, #32
 8003660:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 8003664:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8003666:	2b00      	cmp	r3, #0
 8003668:	d159      	bne.n	800371e <rt_test_008_006_execute.lto_priv.0+0xde>
 800366a:	f383 8811 	msr	BASEPRI, r3
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 800366e:	69a1      	ldr	r1, [r4, #24]
 8003670:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 8003674:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8003676:	3501      	adds	r5, #1
 8003678:	d062      	beq.n	8003740 <rt_test_008_006_execute.lto_priv.0+0x100>
 800367a:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800367e:	2302      	movs	r3, #2
  thread_t *ctp = currp;
 8003680:	69a6      	ldr	r6, [r4, #24]
 8003682:	6003      	str	r3, [r0, #0]
 8003684:	f382 8811 	msr	BASEPRI, r2
  m = ctp->epending & events;
 8003688:	6b75      	ldr	r5, [r6, #52]	@ 0x34
  if (m == (eventmask_t)0) {
 800368a:	2d00      	cmp	r5, #0
 800368c:	d04c      	beq.n	8003728 <rt_test_008_006_execute.lto_priv.0+0xe8>
  m ^= m & (m - (eventmask_t)1);
 800368e:	426b      	negs	r3, r5
 8003690:	ea05 0203 	and.w	r2, r5, r3
  ctp->epending &= ~m;
 8003694:	ea25 0503 	bic.w	r5, r5, r3
 8003698:	6375      	str	r5, [r6, #52]	@ 0x34
 800369a:	2300      	movs	r3, #0
 800369c:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d133      	bne.n	800370c <rt_test_008_006_execute.lto_priv.0+0xcc>
  thread_t *ctp = currp;
 80036a4:	69a5      	ldr	r5, [r4, #24]
 80036a6:	2320      	movs	r3, #32
 80036a8:	f383 8811 	msr	BASEPRI, r3
  if (m == (eventmask_t)0) {
 80036ac:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	d148      	bne.n	8003744 <rt_test_008_006_execute.lto_priv.0+0x104>
    ctp->u.ewmask = events;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036b6:	626b      	str	r3, [r5, #36]	@ 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80036b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80036bc:	200a      	movs	r0, #10
 80036be:	f7ff fbd7 	bl	8002e70 <chSchGoSleepTimeoutS>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	db46      	blt.n	8003754 <rt_test_008_006_execute.lto_priv.0+0x114>
    m = ctp->epending & events;
 80036c6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  ctp->epending &= ~m;
 80036c8:	636e      	str	r6, [r5, #52]	@ 0x34
 80036ca:	f386 8811 	msr	BASEPRI, r6
 80036ce:	b9eb      	cbnz	r3, 800370c <rt_test_008_006_execute.lto_priv.0+0xcc>
  thread_t *ctp = currp;
 80036d0:	69a4      	ldr	r4, [r4, #24]
 80036d2:	2320      	movs	r3, #32
 80036d4:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 80036d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036da:	3301      	adds	r3, #1
 80036dc:	d009      	beq.n	80036f2 <rt_test_008_006_execute.lto_priv.0+0xb2>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036e2:	6263      	str	r3, [r4, #36]	@ 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 80036e4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80036e8:	200b      	movs	r0, #11
 80036ea:	f7ff fbc1 	bl	8002e70 <chSchGoSleepTimeoutS>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	db33      	blt.n	800375a <rt_test_008_006_execute.lto_priv.0+0x11a>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 80036f2:	2300      	movs	r3, #0
 80036f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80036f6:	e014      	b.n	8003722 <rt_test_008_006_execute.lto_priv.0+0xe2>
  m ^= m & (m - (eventmask_t)1);
 80036f8:	425a      	negs	r2, r3
  ctp->epending &= ~m;
 80036fa:	ea23 0502 	bic.w	r5, r3, r2
 80036fe:	634d      	str	r5, [r1, #52]	@ 0x34
  m ^= m & (m - (eventmask_t)1);
 8003700:	401a      	ands	r2, r3
 8003702:	2300      	movs	r3, #0
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	2a00      	cmp	r2, #0
 800370a:	d0a7      	beq.n	800365c <rt_test_008_006_execute.lto_priv.0+0x1c>
  test_local_fail      = true;
 800370c:	4c17      	ldr	r4, [pc, #92]	@ (800376c <rt_test_008_006_execute.lto_priv.0+0x12c>)
  test_global_fail     = true;
 800370e:	4818      	ldr	r0, [pc, #96]	@ (8003770 <rt_test_008_006_execute.lto_priv.0+0x130>)
  test_failure_message = msg;
 8003710:	4a18      	ldr	r2, [pc, #96]	@ (8003774 <rt_test_008_006_execute.lto_priv.0+0x134>)
 8003712:	4919      	ldr	r1, [pc, #100]	@ (8003778 <rt_test_008_006_execute.lto_priv.0+0x138>)
 8003714:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8003716:	2301      	movs	r3, #1
 8003718:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800371a:	7003      	strb	r3, [r0, #0]
}
 800371c:	bd70      	pop	{r4, r5, r6, pc}
  ctp->epending &= ~m;
 800371e:	2300      	movs	r3, #0
 8003720:	634b      	str	r3, [r1, #52]	@ 0x34
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	e7f1      	b.n	800370c <rt_test_008_006_execute.lto_priv.0+0xcc>
    ctp->u.ewmask = events;
 8003728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800372c:	6273      	str	r3, [r6, #36]	@ 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800372e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003732:	200a      	movs	r0, #10
 8003734:	f7ff fb9c 	bl	8002e70 <chSchGoSleepTimeoutS>
 8003738:	2800      	cmp	r0, #0
 800373a:	db08      	blt.n	800374e <rt_test_008_006_execute.lto_priv.0+0x10e>
    m = ctp->epending & events;
 800373c:	6b75      	ldr	r5, [r6, #52]	@ 0x34
 800373e:	e7a6      	b.n	800368e <rt_test_008_006_execute.lto_priv.0+0x4e>
  ctp->epending &= ~events;
 8003740:	634b      	str	r3, [r1, #52]	@ 0x34
 8003742:	e7ee      	b.n	8003722 <rt_test_008_006_execute.lto_priv.0+0xe2>
  ctp->epending &= ~m;
 8003744:	2300      	movs	r3, #0
 8003746:	636b      	str	r3, [r5, #52]	@ 0x34
 8003748:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 800374c:	e7de      	b.n	800370c <rt_test_008_006_execute.lto_priv.0+0xcc>
 800374e:	f385 8811 	msr	BASEPRI, r5
 8003752:	e7a7      	b.n	80036a4 <rt_test_008_006_execute.lto_priv.0+0x64>
 8003754:	f386 8811 	msr	BASEPRI, r6
 8003758:	e7ba      	b.n	80036d0 <rt_test_008_006_execute.lto_priv.0+0x90>
 800375a:	2300      	movs	r3, #0
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	bd70      	pop	{r4, r5, r6, pc}
 8003762:	bf00      	nop
 8003764:	200010b4 	.word	0x200010b4
 8003768:	200011c0 	.word	0x200011c0
 800376c:	200010d1 	.word	0x200010d1
 8003770:	200010d0 	.word	0x200010d0
 8003774:	200010cc 	.word	0x200010cc
 8003778:	0800b340 	.word	0x0800b340
 800377c:	00000000 	.word	0x00000000

08003780 <rt_test_008_007_execute.lto_priv.0>:

static void rt_test_008_007_execute(void) {
 8003780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8003784:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 8003948 <rt_test_008_007_execute.lto_priv.0+0x1c8>
 8003788:	f04f 0b01 	mov.w	fp, #1
static void rt_test_008_007_execute(void) {
 800378c:	b08f      	sub	sp, #60	@ 0x3c
  test_set_step(1);
 800378e:	f8c8 b000 	str.w	fp, [r8]
 8003792:	2520      	movs	r5, #32
 8003794:	f385 8811 	msr	BASEPRI, r5
  elp->next     = esp->next;
 8003798:	4e6c      	ldr	r6, [pc, #432]	@ (800394c <rt_test_008_007_execute.lto_priv.0+0x1cc>)
  elp->listener = currp;
 800379a:	4c6d      	ldr	r4, [pc, #436]	@ (8003950 <rt_test_008_007_execute.lto_priv.0+0x1d0>)
  elp->next     = esp->next;
 800379c:	6833      	ldr	r3, [r6, #0]
 800379e:	9308      	str	r3, [sp, #32]
  esp->next     = elp;
 80037a0:	eb0d 0a05 	add.w	sl, sp, r5
  elp->listener = currp;
 80037a4:	69a3      	ldr	r3, [r4, #24]
 80037a6:	9309      	str	r3, [sp, #36]	@ 0x24
  elp->wflags   = wflags;
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  elp->events   = events;
 80037ac:	2001      	movs	r0, #1
 80037ae:	2100      	movs	r1, #0
 80037b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  esp->next     = elp;
 80037b4:	f8c6 a000 	str.w	sl, [r6]
  elp->wflags   = wflags;
 80037b8:	920c      	str	r2, [sp, #48]	@ 0x30
 80037ba:	2300      	movs	r3, #0
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f385 8811 	msr	BASEPRI, r5
  elp->next     = esp->next;
 80037c4:	4f63      	ldr	r7, [pc, #396]	@ (8003954 <rt_test_008_007_execute.lto_priv.0+0x1d4>)
  elp->wflags   = wflags;
 80037c6:	9206      	str	r2, [sp, #24]
  elp->listener = currp;
 80037c8:	69a2      	ldr	r2, [r4, #24]
 80037ca:	9203      	str	r2, [sp, #12]
  esp->next     = elp;
 80037cc:	f10d 0908 	add.w	r9, sp, #8
  elp->next     = esp->next;
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	9202      	str	r2, [sp, #8]
  elp->events   = events;
 80037d4:	2004      	movs	r0, #4
 80037d6:	2100      	movs	r1, #0
 80037d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  esp->next     = elp;
 80037dc:	f8c7 9000 	str.w	r9, [r7]
 80037e0:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 80037e4:	2202      	movs	r2, #2
 80037e6:	f8c8 2000 	str.w	r2, [r8]
 80037ea:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80037ee:	2008      	movs	r0, #8
 80037f0:	4659      	mov	r1, fp
 80037f2:	f7ff fb3d 	bl	8002e70 <chSchGoSleepTimeoutS>
 80037f6:	2300      	movs	r3, #0
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f385 8811 	msr	BASEPRI, r5
 8003800:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003804:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003806:	9200      	str	r2, [sp, #0]
 8003808:	f383 8811 	msr	BASEPRI, r3
  return chThdGetSelfX()->prio;
 800380c:	69a3      	ldr	r3, [r4, #24]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800380e:	4a52      	ldr	r2, [pc, #328]	@ (8003958 <rt_test_008_007_execute.lto_priv.0+0x1d8>)
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	4852      	ldr	r0, [pc, #328]	@ (800395c <rt_test_008_007_execute.lto_priv.0+0x1dc>)
 8003814:	4b52      	ldr	r3, [pc, #328]	@ (8003960 <rt_test_008_007_execute.lto_priv.0+0x1e0>)
 8003816:	3901      	subs	r1, #1
 8003818:	f007 f992 	bl	800ab40 <chThdCreateStatic.constprop.0>
 800381c:	4b51      	ldr	r3, [pc, #324]	@ (8003964 <rt_test_008_007_execute.lto_priv.0+0x1e4>)
  thread_t *ctp = currp;
 800381e:	69a2      	ldr	r2, [r4, #24]
 8003820:	6018      	str	r0, [r3, #0]
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8003822:	2303      	movs	r3, #3
 8003824:	f8c8 3000 	str.w	r3, [r8]
 8003828:	f385 8811 	msr	BASEPRI, r5
  if ((ctp->epending & events) != events) {
 800382c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800382e:	f003 0105 	and.w	r1, r3, #5
 8003832:	2905      	cmp	r1, #5
 8003834:	d011      	beq.n	800385a <rt_test_008_007_execute.lto_priv.0+0xda>
  thread_t *otp = currp;
 8003836:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8003838:	6820      	ldr	r0, [r4, #0]
    ctp->u.ewmask = events;
 800383a:	9201      	str	r2, [sp, #4]
 800383c:	2305      	movs	r3, #5
 800383e:	6253      	str	r3, [r2, #36]	@ 0x24
  otp->state = newstate;
 8003840:	230b      	movs	r3, #11
 8003842:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8003846:	6803      	ldr	r3, [r0, #0]
 8003848:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800384a:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 800384c:	f880 b020 	strb.w	fp, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003850:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8003852:	f7fc fd35 	bl	80002c0 <_port_switch>
  ctp->epending &= ~events;
 8003856:	9a01      	ldr	r2, [sp, #4]
 8003858:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800385a:	f023 0305 	bic.w	r3, r3, #5
 800385e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003860:	2200      	movs	r2, #0
 8003862:	f382 8811 	msr	BASEPRI, r2
 8003866:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800386a:	9900      	ldr	r1, [sp, #0]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003872:	1a5b      	subs	r3, r3, r1
 8003874:	2b13      	cmp	r3, #19
 8003876:	d845      	bhi.n	8003904 <rt_test_008_007_execute.lto_priv.0+0x184>
 8003878:	2320      	movs	r3, #32
 800387a:	f383 8811 	msr	BASEPRI, r3
  m = currp->epending & events;
 800387e:	69a3      	ldr	r3, [r4, #24]
 8003880:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  currp->epending &= ~events;
 8003882:	635a      	str	r2, [r3, #52]	@ 0x34
 8003884:	f382 8811 	msr	BASEPRI, r2
 8003888:	2d00      	cmp	r5, #0
 800388a:	d146      	bne.n	800391a <rt_test_008_007_execute.lto_priv.0+0x19a>
 800388c:	4c35      	ldr	r4, [pc, #212]	@ (8003964 <rt_test_008_007_execute.lto_priv.0+0x1e4>)
 800388e:	f104 0b14 	add.w	fp, r4, #20
    if (threads[i] != NULL) {
 8003892:	f854 0b04 	ldr.w	r0, [r4], #4
 8003896:	b118      	cbz	r0, 80038a0 <rt_test_008_007_execute.lto_priv.0+0x120>
      chThdWait(threads[i]);
 8003898:	f007 fbfa 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 800389c:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80038a0:	45a3      	cmp	fp, r4
 80038a2:	d1f6      	bne.n	8003892 <rt_test_008_007_execute.lto_priv.0+0x112>
    test_assert(m == 0, "stuck event");
    test_wait_threads();
  }

  /* [8.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 80038a4:	2304      	movs	r3, #4
 80038a6:	f8c8 3000 	str.w	r3, [r8]
 80038aa:	2320      	movs	r3, #32
 80038ac:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 80038b0:	4b26      	ldr	r3, [pc, #152]	@ (800394c <rt_test_008_007_execute.lto_priv.0+0x1cc>)
 80038b2:	e001      	b.n	80038b8 <rt_test_008_007_execute.lto_priv.0+0x138>
    if (p->next == elp) {
 80038b4:	4553      	cmp	r3, sl
 80038b6:	d044      	beq.n	8003942 <rt_test_008_007_execute.lto_priv.0+0x1c2>
  while (p->next != (event_listener_t *)esp) {
 80038b8:	461a      	mov	r2, r3
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	42b3      	cmp	r3, r6
 80038be:	d1f9      	bne.n	80038b4 <rt_test_008_007_execute.lto_priv.0+0x134>
 80038c0:	2300      	movs	r3, #0
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	2320      	movs	r3, #32
 80038c8:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 80038cc:	4b21      	ldr	r3, [pc, #132]	@ (8003954 <rt_test_008_007_execute.lto_priv.0+0x1d4>)
 80038ce:	e001      	b.n	80038d4 <rt_test_008_007_execute.lto_priv.0+0x154>
    if (p->next == elp) {
 80038d0:	454b      	cmp	r3, r9
 80038d2:	d02d      	beq.n	8003930 <rt_test_008_007_execute.lto_priv.0+0x1b0>
  while (p->next != (event_listener_t *)esp) {
 80038d4:	461a      	mov	r2, r3
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	42bb      	cmp	r3, r7
 80038da:	d1f9      	bne.n	80038d0 <rt_test_008_007_execute.lto_priv.0+0x150>
 80038dc:	2300      	movs	r3, #0
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	6833      	ldr	r3, [r6, #0]
 80038e4:	42b3      	cmp	r3, r6
 80038e6:	d102      	bne.n	80038ee <rt_test_008_007_execute.lto_priv.0+0x16e>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	42bb      	cmp	r3, r7
 80038ec:	d012      	beq.n	8003914 <rt_test_008_007_execute.lto_priv.0+0x194>
  test_local_fail      = true;
 80038ee:	4c1e      	ldr	r4, [pc, #120]	@ (8003968 <rt_test_008_007_execute.lto_priv.0+0x1e8>)
  test_global_fail     = true;
 80038f0:	481e      	ldr	r0, [pc, #120]	@ (800396c <rt_test_008_007_execute.lto_priv.0+0x1ec>)
  test_failure_message = msg;
 80038f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <rt_test_008_007_execute.lto_priv.0+0x1f0>)
 80038f4:	491f      	ldr	r1, [pc, #124]	@ (8003974 <rt_test_008_007_execute.lto_priv.0+0x1f4>)
 80038f6:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80038f8:	2301      	movs	r3, #1
 80038fa:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80038fc:	7003      	strb	r3, [r0, #0]
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 80038fe:	b00f      	add	sp, #60	@ 0x3c
 8003900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_local_fail      = true;
 8003904:	4c18      	ldr	r4, [pc, #96]	@ (8003968 <rt_test_008_007_execute.lto_priv.0+0x1e8>)
  test_global_fail     = true;
 8003906:	4819      	ldr	r0, [pc, #100]	@ (800396c <rt_test_008_007_execute.lto_priv.0+0x1ec>)
  test_failure_message = msg;
 8003908:	4a19      	ldr	r2, [pc, #100]	@ (8003970 <rt_test_008_007_execute.lto_priv.0+0x1f0>)
 800390a:	491b      	ldr	r1, [pc, #108]	@ (8003978 <rt_test_008_007_execute.lto_priv.0+0x1f8>)
 800390c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800390e:	2301      	movs	r3, #1
 8003910:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8003912:	7003      	strb	r3, [r0, #0]
 8003914:	b00f      	add	sp, #60	@ 0x3c
 8003916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_local_fail      = true;
 800391a:	4c13      	ldr	r4, [pc, #76]	@ (8003968 <rt_test_008_007_execute.lto_priv.0+0x1e8>)
  test_global_fail     = true;
 800391c:	4813      	ldr	r0, [pc, #76]	@ (800396c <rt_test_008_007_execute.lto_priv.0+0x1ec>)
  test_failure_message = msg;
 800391e:	4a14      	ldr	r2, [pc, #80]	@ (8003970 <rt_test_008_007_execute.lto_priv.0+0x1f0>)
 8003920:	4916      	ldr	r1, [pc, #88]	@ (800397c <rt_test_008_007_execute.lto_priv.0+0x1fc>)
 8003922:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8003924:	2301      	movs	r3, #1
 8003926:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8003928:	7003      	strb	r3, [r0, #0]
 800392a:	b00f      	add	sp, #60	@ 0x3c
 800392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p->next = elp->next;
 8003930:	9b02      	ldr	r3, [sp, #8]
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 800393a:	6833      	ldr	r3, [r6, #0]
 800393c:	42b3      	cmp	r3, r6
 800393e:	d0d3      	beq.n	80038e8 <rt_test_008_007_execute.lto_priv.0+0x168>
 8003940:	e7d5      	b.n	80038ee <rt_test_008_007_execute.lto_priv.0+0x16e>
 8003942:	9b08      	ldr	r3, [sp, #32]
 8003944:	6013      	str	r3, [r2, #0]
      break;
 8003946:	e7bb      	b.n	80038c0 <rt_test_008_007_execute.lto_priv.0+0x140>
 8003948:	200010b4 	.word	0x200010b4
 800394c:	200008b4 	.word	0x200008b4
 8003950:	200011c0 	.word	0x200011c0
 8003954:	200008b0 	.word	0x200008b0
 8003958:	08004f01 	.word	0x08004f01
 800395c:	20000a08 	.word	0x20000a08
 8003960:	0800b1cc 	.word	0x0800b1cc
 8003964:	200010a0 	.word	0x200010a0
 8003968:	200010d1 	.word	0x200010d1
 800396c:	200010d0 	.word	0x200010d0
 8003970:	200010cc 	.word	0x200010cc
 8003974:	0800b160 	.word	0x0800b160
 8003978:	0800b2dc 	.word	0x0800b2dc
 800397c:	0800b2d0 	.word	0x0800b2d0

08003980 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8003980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003984:	4605      	mov	r5, r0
 8003986:	2620      	movs	r6, #32
 8003988:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800398c:	2101      	movs	r1, #1
 800398e:	2008      	movs	r0, #8
 8003990:	f7ff fa6e 	bl	8002e70 <chSchGoSleepTimeoutS>
 8003994:	f04f 0a00 	mov.w	sl, #0
 8003998:	f38a 8811 	msr	BASEPRI, sl
 800399c:	f386 8811 	msr	BASEPRI, r6
 80039a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039a4:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
 80039a8:	f38a 8811 	msr	BASEPRI, sl
  end = chTimeAddX(start, TIME_MS2I(1000));
 80039ac:	4c36      	ldr	r4, [pc, #216]	@ (8003a88 <msg_loop_test+0x108>)
 80039ae:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
  ctp->u.sentmsg = msg;
 80039b2:	f04f 0b01 	mov.w	fp, #1
  tp->state = CH_STATE_READY;
 80039b6:	4657      	mov	r7, sl
 80039b8:	e019      	b.n	80039ee <msg_loop_test+0x6e>
  thread_t *otp = currp;
 80039ba:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 80039bc:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80039be:	230c      	movs	r3, #12
 80039c0:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 80039c4:	6803      	ldr	r3, [r0, #0]
 80039c6:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80039c8:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80039ca:	f880 b020 	strb.w	fp, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80039ce:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 80039d0:	f7fc fc76 	bl	80002c0 <_port_switch>
 80039d4:	f387 8811 	msr	BASEPRI, r7
 80039d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 80039dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	eba3 0309 	sub.w	r3, r3, r9
 80039e6:	4293      	cmp	r3, r2
    n++;
 80039e8:	f10a 0a01 	add.w	sl, sl, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 80039ec:	d81b      	bhi.n	8003a26 <msg_loop_test+0xa6>
  thread_t *ctp = currp;
 80039ee:	69a3      	ldr	r3, [r4, #24]
 80039f0:	f386 8811 	msr	BASEPRI, r6
  tp->queue.prev             = tqp->prev;
 80039f4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
  ctp->u.sentmsg = msg;
 80039f6:	f8c3 b024 	str.w	fp, [r3, #36]	@ 0x24
 80039fa:	e9c3 8200 	strd	r8, r2, [r3]
  tp->queue.prev->queue.next = tp;
 80039fe:	6013      	str	r3, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8003a00:	f895 2020 	ldrb.w	r2, [r5, #32]
  tqp->prev                  = tp;
 8003a04:	632b      	str	r3, [r5, #48]	@ 0x30
 8003a06:	2a0e      	cmp	r2, #14
 8003a08:	d1d7      	bne.n	80039ba <msg_loop_test+0x3a>
  } while (cp->prio >= tp->prio);
 8003a0a:	68a9      	ldr	r1, [r5, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <msg_loop_test+0x108>)
  tp->state = CH_STATE_READY;
 8003a0e:	f885 7020 	strb.w	r7, [r5, #32]
    cp = cp->queue.next;
 8003a12:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	428a      	cmp	r2, r1
 8003a18:	d2fb      	bcs.n	8003a12 <msg_loop_test+0x92>
  tp->queue.prev             = cp->queue.prev;
 8003a1a:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8003a1c:	602b      	str	r3, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8003a1e:	606a      	str	r2, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8003a20:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8003a22:	605d      	str	r5, [r3, #4]
  return tp;
 8003a24:	e7c9      	b.n	80039ba <msg_loop_test+0x3a>
  thread_t *ctp = currp;
 8003a26:	69a3      	ldr	r3, [r4, #24]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f382 8811 	msr	BASEPRI, r2
  tp->queue.prev             = tqp->prev;
 8003a2e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
  tp->queue.next             = (thread_t *)tqp;
 8003a30:	f8c3 8000 	str.w	r8, [r3]
  ctp->u.sentmsg = msg;
 8003a34:	625f      	str	r7, [r3, #36]	@ 0x24
  tp->queue.prev             = tqp->prev;
 8003a36:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8003a38:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8003a3a:	632b      	str	r3, [r5, #48]	@ 0x30
  if (tp->state == CH_STATE_WTMSG) {
 8003a3c:	f895 3020 	ldrb.w	r3, [r5, #32]
 8003a40:	2b0e      	cmp	r3, #14
 8003a42:	d013      	beq.n	8003a6c <msg_loop_test+0xec>
  thread_t *otp = currp;
 8003a44:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8003a46:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8003a48:	230c      	movs	r3, #12
 8003a4a:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8003a4e:	6803      	ldr	r3, [r0, #0]
 8003a50:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003a52:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003a5a:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8003a5c:	f7fc fc30 	bl	80002c0 <_port_switch>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f383 8811 	msr	BASEPRI, r3
}
 8003a66:	4650      	mov	r0, sl
 8003a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } while (cp->prio >= tp->prio);
 8003a6c:	68a9      	ldr	r1, [r5, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8003a6e:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <msg_loop_test+0x108>)
  tp->state = CH_STATE_READY;
 8003a70:	f885 7020 	strb.w	r7, [r5, #32]
    cp = cp->queue.next;
 8003a74:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	d2fb      	bcs.n	8003a74 <msg_loop_test+0xf4>
  tp->queue.prev             = cp->queue.prev;
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8003a82:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8003a84:	605d      	str	r5, [r3, #4]
  return tp;
 8003a86:	e7dd      	b.n	8003a44 <msg_loop_test+0xc4>
 8003a88:	200011c0 	.word	0x200011c0
 8003a8c:	00000000 	.word	0x00000000

08003a90 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003a90:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8003a92:	4c15      	ldr	r4, [pc, #84]	@ (8003ae8 <chSchWakeupS+0x58>)
  if (ntp->prio <= otp->prio) {
 8003a94:	6886      	ldr	r6, [r0, #8]
  thread_t *otp = currp;
 8003a96:	69a5      	ldr	r5, [r4, #24]
  ntp->u.rdymsg = msg;
 8003a98:	6241      	str	r1, [r0, #36]	@ 0x24
  if (ntp->prio <= otp->prio) {
 8003a9a:	68a9      	ldr	r1, [r5, #8]
 8003a9c:	428e      	cmp	r6, r1
  tp->state = CH_STATE_READY;
 8003a9e:	f04f 0300 	mov.w	r3, #0
  if (ntp->prio <= otp->prio) {
 8003aa2:	d913      	bls.n	8003acc <chSchWakeupS+0x3c>
  tp->state = CH_STATE_READY;
 8003aa4:	f885 3020 	strb.w	r3, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8003aa8:	4623      	mov	r3, r4
    cp = cp->queue.next;
 8003aaa:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	4291      	cmp	r1, r2
 8003ab0:	d3fb      	bcc.n	8003aaa <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8003ab8:	6015      	str	r5, [r2, #0]
    ntp->state = CH_STATE_CURRENT;
 8003aba:	2201      	movs	r2, #1
  cp->queue.prev             = tp;
 8003abc:	605d      	str	r5, [r3, #4]
    chSysSwitch(ntp, otp);
 8003abe:	4629      	mov	r1, r5
    currp = ntp;
 8003ac0:	61a0      	str	r0, [r4, #24]
    ntp->state = CH_STATE_CURRENT;
 8003ac2:	f880 2020 	strb.w	r2, [r0, #32]
}
 8003ac6:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8003ac8:	f7fc bbfa 	b.w	80002c0 <_port_switch>
  tp->state = CH_STATE_READY;
 8003acc:	f880 3020 	strb.w	r3, [r0, #32]
    cp = cp->queue.next;
 8003ad0:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio >= tp->prio);
 8003ad2:	68a2      	ldr	r2, [r4, #8]
 8003ad4:	4296      	cmp	r6, r2
 8003ad6:	d9fb      	bls.n	8003ad0 <chSchWakeupS+0x40>
  tp->queue.prev             = cp->queue.prev;
 8003ad8:	6862      	ldr	r2, [r4, #4]
 8003ada:	e9c0 4200 	strd	r4, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8003ade:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8003ae0:	6060      	str	r0, [r4, #4]
}
 8003ae2:	bc70      	pop	{r4, r5, r6}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	200011c0 	.word	0x200011c0
 8003aec:	00000000 	.word	0x00000000

08003af0 <thread3>:
static THD_FUNCTION(thread3, p) {
 8003af0:	b510      	push	{r4, lr}
 8003af2:	2320      	movs	r3, #32
 8003af4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8003af8:	4c1a      	ldr	r4, [pc, #104]	@ (8003b64 <thread3+0x74>)
 8003afa:	68a3      	ldr	r3, [r4, #8]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	60a3      	str	r3, [r4, #8]
 8003b02:	db18      	blt.n	8003b36 <thread3+0x46>
 8003b04:	2100      	movs	r1, #0
 8003b06:	f381 8811 	msr	BASEPRI, r1
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");
  if (++sp->cnt <= (cnt_t)0) {
 8003b10:	68a3      	ldr	r3, [r4, #8]
 8003b12:	3301      	adds	r3, #1
 8003b14:	428b      	cmp	r3, r1
 8003b16:	60a3      	str	r3, [r4, #8]
 8003b18:	dd03      	ble.n	8003b22 <thread3+0x32>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f383 8811 	msr	BASEPRI, r3
}
 8003b20:	bd10      	pop	{r4, pc}
  thread_t *tp = tqp->next;
 8003b22:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003b24:	6803      	ldr	r3, [r0, #0]
 8003b26:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003b28:	605c      	str	r4, [r3, #4]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8003b2a:	f7ff ffb1 	bl	8003a90 <chSchWakeupS>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	bd10      	pop	{r4, pc}
    currp->u.wtsemp = sp;
 8003b36:	4b0c      	ldr	r3, [pc, #48]	@ (8003b68 <thread3+0x78>)
  tp->queue.prev             = tqp->prev;
 8003b38:	6862      	ldr	r2, [r4, #4]
 8003b3a:	6999      	ldr	r1, [r3, #24]
 8003b3c:	e9c1 4200 	strd	r4, r2, [r1]
 8003b40:	624c      	str	r4, [r1, #36]	@ 0x24
  otp->state = newstate;
 8003b42:	2005      	movs	r0, #5
  tp->queue.prev->queue.next = tp;
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	f881 0020 	strb.w	r0, [r1, #32]
  thread_t *tp = tqp->next;
 8003b4a:	6818      	ldr	r0, [r3, #0]
  tqp->prev                  = tp;
 8003b4c:	6061      	str	r1, [r4, #4]
  tqp->next             = tp->queue.next;
 8003b4e:	6802      	ldr	r2, [r0, #0]
 8003b50:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003b52:	6053      	str	r3, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 8003b54:	2201      	movs	r2, #1
 8003b56:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003b5a:	6198      	str	r0, [r3, #24]
  chSysSwitch(currp, otp);
 8003b5c:	f7fc fbb0 	bl	80002c0 <_port_switch>
    return currp->u.rdymsg;
 8003b60:	e7d0      	b.n	8003b04 <thread3+0x14>
 8003b62:	bf00      	nop
 8003b64:	20001090 	.word	0x20001090
 8003b68:	200011c0 	.word	0x200011c0
 8003b6c:	00000000 	.word	0x00000000

08003b70 <rt_test_005_002_execute.lto_priv.0>:
static void rt_test_005_002_execute(void) {
 8003b70:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8003b72:	4d51      	ldr	r5, [pc, #324]	@ (8003cb8 <rt_test_005_002_execute.lto_priv.0+0x148>)
  test_set_step(1);
 8003b74:	4e51      	ldr	r6, [pc, #324]	@ (8003cbc <rt_test_005_002_execute.lto_priv.0+0x14c>)
  return chThdGetSelfX()->prio;
 8003b76:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003b78:	4851      	ldr	r0, [pc, #324]	@ (8003cc0 <rt_test_005_002_execute.lto_priv.0+0x150>)
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	4b51      	ldr	r3, [pc, #324]	@ (8003cc4 <rt_test_005_002_execute.lto_priv.0+0x154>)
 8003b7e:	4c52      	ldr	r4, [pc, #328]	@ (8003cc8 <rt_test_005_002_execute.lto_priv.0+0x158>)
  test_set_step(1);
 8003b80:	2201      	movs	r2, #1
 8003b82:	6032      	str	r2, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003b84:	3105      	adds	r1, #5
 8003b86:	4a51      	ldr	r2, [pc, #324]	@ (8003ccc <rt_test_005_002_execute.lto_priv.0+0x15c>)
 8003b88:	f006 ffda 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8003b8c:	69ab      	ldr	r3, [r5, #24]
 8003b8e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003b90:	6899      	ldr	r1, [r3, #8]
 8003b92:	4a4e      	ldr	r2, [pc, #312]	@ (8003ccc <rt_test_005_002_execute.lto_priv.0+0x15c>)
 8003b94:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd0 <rt_test_005_002_execute.lto_priv.0+0x160>)
 8003b96:	484f      	ldr	r0, [pc, #316]	@ (8003cd4 <rt_test_005_002_execute.lto_priv.0+0x164>)
 8003b98:	3101      	adds	r1, #1
 8003b9a:	f006 ffd1 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8003b9e:	69aa      	ldr	r2, [r5, #24]
 8003ba0:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003ba2:	6891      	ldr	r1, [r2, #8]
 8003ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd8 <rt_test_005_002_execute.lto_priv.0+0x168>)
 8003ba6:	4a49      	ldr	r2, [pc, #292]	@ (8003ccc <rt_test_005_002_execute.lto_priv.0+0x15c>)
 8003ba8:	484c      	ldr	r0, [pc, #304]	@ (8003cdc <rt_test_005_002_execute.lto_priv.0+0x16c>)
 8003baa:	3103      	adds	r1, #3
 8003bac:	f006 ffc8 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8003bb0:	69aa      	ldr	r2, [r5, #24]
 8003bb2:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003bb4:	6891      	ldr	r1, [r2, #8]
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce0 <rt_test_005_002_execute.lto_priv.0+0x170>)
 8003bb8:	4a44      	ldr	r2, [pc, #272]	@ (8003ccc <rt_test_005_002_execute.lto_priv.0+0x15c>)
 8003bba:	484a      	ldr	r0, [pc, #296]	@ (8003ce4 <rt_test_005_002_execute.lto_priv.0+0x174>)
 8003bbc:	3104      	adds	r1, #4
 8003bbe:	f006 ffbf 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8003bc2:	69aa      	ldr	r2, [r5, #24]
 8003bc4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003bc6:	6891      	ldr	r1, [r2, #8]
 8003bc8:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <rt_test_005_002_execute.lto_priv.0+0x178>)
 8003bca:	4a40      	ldr	r2, [pc, #256]	@ (8003ccc <rt_test_005_002_execute.lto_priv.0+0x15c>)
 8003bcc:	4847      	ldr	r0, [pc, #284]	@ (8003cec <rt_test_005_002_execute.lto_priv.0+0x17c>)
 8003bce:	3102      	adds	r1, #2
 8003bd0:	f006 ffb6 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003bd8:	6120      	str	r0, [r4, #16]
 8003bda:	2320      	movs	r3, #32
 8003bdc:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8003be0:	4c43      	ldr	r4, [pc, #268]	@ (8003cf0 <rt_test_005_002_execute.lto_priv.0+0x180>)
 8003be2:	68a3      	ldr	r3, [r4, #8]
 8003be4:	3301      	adds	r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	60a3      	str	r3, [r4, #8]
 8003bea:	dd40      	ble.n	8003c6e <rt_test_005_002_execute.lto_priv.0+0xfe>
 8003bec:	2100      	movs	r1, #0
 8003bee:	f381 8811 	msr	BASEPRI, r1
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	68a3      	ldr	r3, [r4, #8]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	428b      	cmp	r3, r1
 8003bfe:	60a3      	str	r3, [r4, #8]
 8003c00:	dd52      	ble.n	8003ca8 <rt_test_005_002_execute.lto_priv.0+0x138>
 8003c02:	2100      	movs	r1, #0
 8003c04:	f381 8811 	msr	BASEPRI, r1
 8003c08:	2320      	movs	r3, #32
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	68a3      	ldr	r3, [r4, #8]
 8003c10:	3301      	adds	r3, #1
 8003c12:	428b      	cmp	r3, r1
 8003c14:	60a3      	str	r3, [r4, #8]
 8003c16:	dd40      	ble.n	8003c9a <rt_test_005_002_execute.lto_priv.0+0x12a>
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f381 8811 	msr	BASEPRI, r1
 8003c1e:	2320      	movs	r3, #32
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	68a3      	ldr	r3, [r4, #8]
 8003c26:	3301      	adds	r3, #1
 8003c28:	428b      	cmp	r3, r1
 8003c2a:	60a3      	str	r3, [r4, #8]
 8003c2c:	dd2e      	ble.n	8003c8c <rt_test_005_002_execute.lto_priv.0+0x11c>
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f381 8811 	msr	BASEPRI, r1
 8003c34:	2320      	movs	r3, #32
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	68a3      	ldr	r3, [r4, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	428b      	cmp	r3, r1
 8003c40:	60a3      	str	r3, [r4, #8]
 8003c42:	dd1c      	ble.n	8003c7e <rt_test_005_002_execute.lto_priv.0+0x10e>
 8003c44:	2600      	movs	r6, #0
 8003c46:	f386 8811 	msr	BASEPRI, r6
 8003c4a:	4c1f      	ldr	r4, [pc, #124]	@ (8003cc8 <rt_test_005_002_execute.lto_priv.0+0x158>)
 8003c4c:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8003c50:	f854 0b04 	ldr.w	r0, [r4], #4
 8003c54:	b118      	cbz	r0, 8003c5e <rt_test_005_002_execute.lto_priv.0+0xee>
      chThdWait(threads[i]);
 8003c56:	f007 fa1b 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8003c5a:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8003c5e:	42ac      	cmp	r4, r5
 8003c60:	d1f6      	bne.n	8003c50 <rt_test_005_002_execute.lto_priv.0+0xe0>
}
 8003c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8003c66:	4923      	ldr	r1, [pc, #140]	@ (8003cf4 <rt_test_005_002_execute.lto_priv.0+0x184>)
 8003c68:	4823      	ldr	r0, [pc, #140]	@ (8003cf8 <rt_test_005_002_execute.lto_priv.0+0x188>)
 8003c6a:	f7fc bf61 	b.w	8000b30 <_test_assert_sequence>
  thread_t *tp = tqp->next;
 8003c6e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003c70:	6803      	ldr	r3, [r0, #0]
 8003c72:	6023      	str	r3, [r4, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8003c74:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8003c76:	605c      	str	r4, [r3, #4]
 8003c78:	f7ff ff0a 	bl	8003a90 <chSchWakeupS>
 8003c7c:	e7b6      	b.n	8003bec <rt_test_005_002_execute.lto_priv.0+0x7c>
  thread_t *tp = tqp->next;
 8003c7e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003c80:	6803      	ldr	r3, [r0, #0]
 8003c82:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003c84:	605c      	str	r4, [r3, #4]
 8003c86:	f7ff ff03 	bl	8003a90 <chSchWakeupS>
 8003c8a:	e7db      	b.n	8003c44 <rt_test_005_002_execute.lto_priv.0+0xd4>
  thread_t *tp = tqp->next;
 8003c8c:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003c8e:	6803      	ldr	r3, [r0, #0]
 8003c90:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003c92:	605c      	str	r4, [r3, #4]
 8003c94:	f7ff fefc 	bl	8003a90 <chSchWakeupS>
 8003c98:	e7c9      	b.n	8003c2e <rt_test_005_002_execute.lto_priv.0+0xbe>
  thread_t *tp = tqp->next;
 8003c9a:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003c9c:	6803      	ldr	r3, [r0, #0]
 8003c9e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003ca0:	605c      	str	r4, [r3, #4]
 8003ca2:	f7ff fef5 	bl	8003a90 <chSchWakeupS>
 8003ca6:	e7b7      	b.n	8003c18 <rt_test_005_002_execute.lto_priv.0+0xa8>
  thread_t *tp = tqp->next;
 8003ca8:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003caa:	6803      	ldr	r3, [r0, #0]
 8003cac:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003cae:	605c      	str	r4, [r3, #4]
 8003cb0:	f7ff feee 	bl	8003a90 <chSchWakeupS>
 8003cb4:	e7a5      	b.n	8003c02 <rt_test_005_002_execute.lto_priv.0+0x92>
 8003cb6:	bf00      	nop
 8003cb8:	200011c0 	.word	0x200011c0
 8003cbc:	200010b4 	.word	0x200010b4
 8003cc0:	20000a08 	.word	0x20000a08
 8003cc4:	0800b1cc 	.word	0x0800b1cc
 8003cc8:	200010a0 	.word	0x200010a0
 8003ccc:	08001771 	.word	0x08001771
 8003cd0:	0800b1c8 	.word	0x0800b1c8
 8003cd4:	20000b50 	.word	0x20000b50
 8003cd8:	0800b1c4 	.word	0x0800b1c4
 8003cdc:	20000c98 	.word	0x20000c98
 8003ce0:	0800b1c0 	.word	0x0800b1c0
 8003ce4:	20000de0 	.word	0x20000de0
 8003ce8:	0800b1d4 	.word	0x0800b1d4
 8003cec:	20000f28 	.word	0x20000f28
 8003cf0:	20001090 	.word	0x20001090
 8003cf4:	0800b170 	.word	0x0800b170
 8003cf8:	0800b1d0 	.word	0x0800b1d0
 8003cfc:	00000000 	.word	0x00000000

08003d00 <rt_test_006_009_execute.lto_priv.0>:
  return ch.rlist.current;
 8003d00:	4b2b      	ldr	r3, [pc, #172]	@ (8003db0 <rt_test_006_009_execute.lto_priv.0+0xb0>)

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8003d02:	4a2c      	ldr	r2, [pc, #176]	@ (8003db4 <rt_test_006_009_execute.lto_priv.0+0xb4>)
  return chThdGetSelfX()->prio;
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	482c      	ldr	r0, [pc, #176]	@ (8003db8 <rt_test_006_009_execute.lto_priv.0+0xb8>)
static void rt_test_006_009_execute(void) {
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	689e      	ldr	r6, [r3, #8]
  test_set_step(2);
 8003d0c:	4d2b      	ldr	r5, [pc, #172]	@ (8003dbc <rt_test_006_009_execute.lto_priv.0+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8003d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc0 <rt_test_006_009_execute.lto_priv.0+0xc0>)
 8003d10:	4c2c      	ldr	r4, [pc, #176]	@ (8003dc4 <rt_test_006_009_execute.lto_priv.0+0xc4>)
  test_set_step(2);
 8003d12:	2102      	movs	r1, #2
 8003d14:	6029      	str	r1, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8003d16:	1c71      	adds	r1, r6, #1
 8003d18:	f006 ff12 	bl	800ab40 <chThdCreateStatic.constprop.0>
  }

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8003d1c:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8003d1e:	6020      	str	r0, [r4, #0]
  test_set_step(3);
 8003d20:	602b      	str	r3, [r5, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8003d22:	1cb1      	adds	r1, r6, #2
 8003d24:	4b28      	ldr	r3, [pc, #160]	@ (8003dc8 <rt_test_006_009_execute.lto_priv.0+0xc8>)
 8003d26:	4a29      	ldr	r2, [pc, #164]	@ (8003dcc <rt_test_006_009_execute.lto_priv.0+0xcc>)
 8003d28:	4829      	ldr	r0, [pc, #164]	@ (8003dd0 <rt_test_006_009_execute.lto_priv.0+0xd0>)
 8003d2a:	f006 ff09 	bl	800ab40 <chThdCreateStatic.constprop.0>
  }

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8003d2e:	2304      	movs	r3, #4
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8003d30:	6060      	str	r0, [r4, #4]
  test_set_step(4);
 8003d32:	602b      	str	r3, [r5, #0]
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8003d34:	4a27      	ldr	r2, [pc, #156]	@ (8003dd4 <rt_test_006_009_execute.lto_priv.0+0xd4>)
 8003d36:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <rt_test_006_009_execute.lto_priv.0+0xd8>)
 8003d38:	4828      	ldr	r0, [pc, #160]	@ (8003ddc <rt_test_006_009_execute.lto_priv.0+0xdc>)
 8003d3a:	1cf1      	adds	r1, r6, #3
 8003d3c:	f006 ff00 	bl	800ab40 <chThdCreateStatic.constprop.0>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8003d40:	2305      	movs	r3, #5
 8003d42:	602b      	str	r3, [r5, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8003d44:	60a0      	str	r0, [r4, #8]
 8003d46:	2320      	movs	r3, #32
 8003d48:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003d4c:	4c24      	ldr	r4, [pc, #144]	@ (8003de0 <rt_test_006_009_execute.lto_priv.0+0xe0>)
 8003d4e:	6820      	ldr	r0, [r4, #0]
void chCondSignal(condition_variable_t *cp) {

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->queue)) {
 8003d50:	42a0      	cmp	r0, r4
 8003d52:	d005      	beq.n	8003d60 <rt_test_006_009_execute.lto_priv.0+0x60>
  tqp->next             = tp->queue.next;
 8003d54:	6803      	ldr	r3, [r0, #0]
 8003d56:	6023      	str	r3, [r4, #0]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8003d58:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8003d5a:	605c      	str	r4, [r3, #4]
 8003d5c:	f7ff fe98 	bl	8003a90 <chSchWakeupS>
 8003d60:	2100      	movs	r1, #0
 8003d62:	f381 8811 	msr	BASEPRI, r1
  {
    chCondSignal(&c1);
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8003d66:	2306      	movs	r3, #6
 8003d68:	602b      	str	r3, [r5, #0]
 8003d6a:	2320      	movs	r3, #32
 8003d6c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003d70:	6820      	ldr	r0, [r4, #0]
  if (queue_notempty(&cp->queue)) {
 8003d72:	42a0      	cmp	r0, r4
 8003d74:	d004      	beq.n	8003d80 <rt_test_006_009_execute.lto_priv.0+0x80>
  tqp->next             = tp->queue.next;
 8003d76:	6803      	ldr	r3, [r0, #0]
 8003d78:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003d7a:	605c      	str	r4, [r3, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8003d7c:	f7ff fe88 	bl	8003a90 <chSchWakeupS>
 8003d80:	2600      	movs	r6, #0
 8003d82:	f386 8811 	msr	BASEPRI, r6
  {
    chCondSignal(&c1);
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
 8003d86:	4c0f      	ldr	r4, [pc, #60]	@ (8003dc4 <rt_test_006_009_execute.lto_priv.0+0xc4>)
 8003d88:	2307      	movs	r3, #7
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8003d90:	f854 0b04 	ldr.w	r0, [r4], #4
 8003d94:	b118      	cbz	r0, 8003d9e <rt_test_006_009_execute.lto_priv.0+0x9e>
      chThdWait(threads[i]);
 8003d96:	f007 f97b 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8003d9a:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8003d9e:	42ac      	cmp	r4, r5
 8003da0:	d1f6      	bne.n	8003d90 <rt_test_006_009_execute.lto_priv.0+0x90>
  {
    test_wait_threads();
    test_assert_sequence("ABC", "invalid sequence");
  }
}
 8003da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8003da6:	490f      	ldr	r1, [pc, #60]	@ (8003de4 <rt_test_006_009_execute.lto_priv.0+0xe4>)
 8003da8:	480f      	ldr	r0, [pc, #60]	@ (8003de8 <rt_test_006_009_execute.lto_priv.0+0xe8>)
 8003daa:	f7fc bec1 	b.w	8000b30 <_test_assert_sequence>
 8003dae:	bf00      	nop
 8003db0:	200011c0 	.word	0x200011c0
 8003db4:	08005601 	.word	0x08005601
 8003db8:	20000a08 	.word	0x20000a08
 8003dbc:	200010b4 	.word	0x200010b4
 8003dc0:	0800b1cc 	.word	0x0800b1cc
 8003dc4:	200010a0 	.word	0x200010a0
 8003dc8:	0800b1c4 	.word	0x0800b1c4
 8003dcc:	08005551 	.word	0x08005551
 8003dd0:	20000b50 	.word	0x20000b50
 8003dd4:	080056d1 	.word	0x080056d1
 8003dd8:	0800b1c8 	.word	0x0800b1c8
 8003ddc:	20000c98 	.word	0x20000c98
 8003de0:	200008b8 	.word	0x200008b8
 8003de4:	0800b170 	.word	0x0800b170
 8003de8:	0800b184 	.word	0x0800b184
 8003dec:	00000000 	.word	0x00000000

08003df0 <rt_test_007_001_execute.lto_priv.0>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
 8003df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return ch.rlist.current;
 8003df4:	4c30      	ldr	r4, [pc, #192]	@ (8003eb8 <rt_test_007_001_execute.lto_priv.0+0xc8>)
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8003df6:	4d31      	ldr	r5, [pc, #196]	@ (8003ebc <rt_test_007_001_execute.lto_priv.0+0xcc>)
 8003df8:	69a3      	ldr	r3, [r4, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8003dfa:	4831      	ldr	r0, [pc, #196]	@ (8003ec0 <rt_test_007_001_execute.lto_priv.0+0xd0>)
 8003dfc:	6899      	ldr	r1, [r3, #8]
 8003dfe:	4e31      	ldr	r6, [pc, #196]	@ (8003ec4 <rt_test_007_001_execute.lto_priv.0+0xd4>)
 8003e00:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8003ec8 <rt_test_007_001_execute.lto_priv.0+0xd8>
  test_set_step(1);
 8003e04:	2201      	movs	r2, #1
 8003e06:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8003e08:	4411      	add	r1, r2
 8003e0a:	4a30      	ldr	r2, [pc, #192]	@ (8003ecc <rt_test_007_001_execute.lto_priv.0+0xdc>)
 8003e0c:	f006 fe98 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8003e10:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed0 <rt_test_007_001_execute.lto_priv.0+0xe0>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8003e12:	2302      	movs	r3, #2
 8003e14:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8003e16:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003e18:	2504      	movs	r5, #4
 8003e1a:	f04f 0a20 	mov.w	sl, #32
  chSysLock();
  if (!chMsgIsPendingI(currp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8003e1e:	270d      	movs	r7, #13
 8003e20:	f04f 0900 	mov.w	r9, #0
 8003e24:	f38a 8811 	msr	BASEPRI, sl
  if (!chMsgIsPendingI(currp)) {
 8003e28:	69a1      	ldr	r1, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8003e30:	4298      	cmp	r0, r3
 8003e32:	d02e      	beq.n	8003e92 <rt_test_007_001_execute.lto_priv.0+0xa2>
  tqp->next             = tp->queue.next;
 8003e34:	6802      	ldr	r2, [r0, #0]
 8003e36:	62ca      	str	r2, [r1, #44]	@ 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
 8003e38:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_SNDMSG;
 8003e3a:	f880 7020 	strb.w	r7, [r0, #32]
 8003e3e:	f389 8811 	msr	BASEPRI, r9
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 8003e42:	f8d0 b024 	ldr.w	fp, [r0, #36]	@ 0x24
 8003e46:	f38a 8811 	msr	BASEPRI, sl
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003e4a:	4659      	mov	r1, fp
 8003e4c:	f7ff fe20 	bl	8003a90 <chSchWakeupS>
 8003e50:	f389 8811 	msr	BASEPRI, r9
 8003e54:	f38a 8811 	msr	BASEPRI, sl
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8003e58:	6833      	ldr	r3, [r6, #0]
 8003e5a:	4543      	cmp	r3, r8
 8003e5c:	d203      	bcs.n	8003e66 <rt_test_007_001_execute.lto_priv.0+0x76>
    *test_tokp++ = token;
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	6032      	str	r2, [r6, #0]

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8003e62:	f883 b000 	strb.w	fp, [r3]
 8003e66:	f389 8811 	msr	BASEPRI, r9
    for (i = 0; i < 4; i++) {
 8003e6a:	3d01      	subs	r5, #1
 8003e6c:	d1da      	bne.n	8003e24 <rt_test_007_001_execute.lto_priv.0+0x34>
 8003e6e:	4c18      	ldr	r4, [pc, #96]	@ (8003ed0 <rt_test_007_001_execute.lto_priv.0+0xe0>)
 8003e70:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8003e74:	f854 0b04 	ldr.w	r0, [r4], #4
 8003e78:	b118      	cbz	r0, 8003e82 <rt_test_007_001_execute.lto_priv.0+0x92>
      chThdWait(threads[i]);
 8003e7a:	f007 f909 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8003e7e:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8003e82:	42b4      	cmp	r4, r6
 8003e84:	d1f6      	bne.n	8003e74 <rt_test_007_001_execute.lto_priv.0+0x84>
    }
    test_wait_threads();
    test_assert_sequence("ABCD", "invalid sequence");
  }
}
 8003e86:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8003e8a:	4912      	ldr	r1, [pc, #72]	@ (8003ed4 <rt_test_007_001_execute.lto_priv.0+0xe4>)
 8003e8c:	4812      	ldr	r0, [pc, #72]	@ (8003ed8 <rt_test_007_001_execute.lto_priv.0+0xe8>)
 8003e8e:	f7fc be4f 	b.w	8000b30 <_test_assert_sequence>
  thread_t *tp = tqp->next;
 8003e92:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8003e94:	230e      	movs	r3, #14
 8003e96:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8003e9a:	6803      	ldr	r3, [r0, #0]
 8003e9c:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003e9e:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003ea6:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8003ea8:	f7fc fa0a 	bl	80002c0 <_port_switch>
  tp = queue_fifo_remove(&currp->msgqueue);
 8003eac:	69a1      	ldr	r1, [r4, #24]
  thread_t *tp = tqp->next;
 8003eae:	460b      	mov	r3, r1
 8003eb0:	f853 0f2c 	ldr.w	r0, [r3, #44]!
}
 8003eb4:	e7be      	b.n	8003e34 <rt_test_007_001_execute.lto_priv.0+0x44>
 8003eb6:	bf00      	nop
 8003eb8:	200011c0 	.word	0x200011c0
 8003ebc:	200010b4 	.word	0x200010b4
 8003ec0:	20000a08 	.word	0x20000a08
 8003ec4:	200010c8 	.word	0x200010c8
 8003ec8:	200010c8 	.word	0x200010c8
 8003ecc:	080017f1 	.word	0x080017f1
 8003ed0:	200010a0 	.word	0x200010a0
 8003ed4:	0800b170 	.word	0x0800b170
 8003ed8:	0800b258 	.word	0x0800b258
 8003edc:	00000000 	.word	0x00000000

08003ee0 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8003ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee4:	4e19      	ldr	r6, [pc, #100]	@ (8003f4c <bmk_thread1+0x6c>)
 8003ee6:	2520      	movs	r5, #32
  otp->state = newstate;
 8003ee8:	f04f 080e 	mov.w	r8, #14
  currp->state = CH_STATE_CURRENT;
 8003eec:	2701      	movs	r7, #1
 8003eee:	e012      	b.n	8003f16 <bmk_thread1+0x36>
  tqp->next             = tp->queue.next;
 8003ef0:	6802      	ldr	r2, [r0, #0]
 8003ef2:	62ca      	str	r2, [r1, #44]	@ 0x2c
  tp->state = CH_STATE_SNDMSG;
 8003ef4:	240d      	movs	r4, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 8003ef6:	6053      	str	r3, [r2, #4]
 8003ef8:	f04f 0900 	mov.w	r9, #0
 8003efc:	f880 4020 	strb.w	r4, [r0, #32]
 8003f00:	f389 8811 	msr	BASEPRI, r9
  return tp->u.sentmsg;
 8003f04:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8003f06:	f385 8811 	msr	BASEPRI, r5
  chSchWakeupS(tp, msg);
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	f7ff fdc0 	bl	8003a90 <chSchWakeupS>
 8003f10:	f389 8811 	msr	BASEPRI, r9
  } while (msg);
 8003f14:	b1bc      	cbz	r4, 8003f46 <bmk_thread1+0x66>
 8003f16:	f385 8811 	msr	BASEPRI, r5
  if (!chMsgIsPendingI(currp)) {
 8003f1a:	69b1      	ldr	r1, [r6, #24]
  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8003f22:	4298      	cmp	r0, r3
 8003f24:	d1e4      	bne.n	8003ef0 <bmk_thread1+0x10>
  thread_t *tp = tqp->next;
 8003f26:	6830      	ldr	r0, [r6, #0]
  otp->state = newstate;
 8003f28:	f881 8020 	strb.w	r8, [r1, #32]
  tqp->next             = tp->queue.next;
 8003f2c:	6803      	ldr	r3, [r0, #0]
 8003f2e:	6033      	str	r3, [r6, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003f30:	605e      	str	r6, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8003f32:	f880 7020 	strb.w	r7, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003f36:	61b0      	str	r0, [r6, #24]
  chSysSwitch(currp, otp);
 8003f38:	f7fc f9c2 	bl	80002c0 <_port_switch>
  tp = queue_fifo_remove(&currp->msgqueue);
 8003f3c:	69b1      	ldr	r1, [r6, #24]
  thread_t *tp = tqp->next;
 8003f3e:	460b      	mov	r3, r1
 8003f40:	f853 0f2c 	ldr.w	r0, [r3, #44]!
}
 8003f44:	e7d4      	b.n	8003ef0 <bmk_thread1+0x10>
}
 8003f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200011c0 	.word	0x200011c0

08003f50 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8003f50:	4a0e      	ldr	r2, [pc, #56]	@ (8003f8c <chSchDoReschedule+0x3c>)
 8003f52:	6810      	ldr	r0, [r2, #0]
 8003f54:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 8003f56:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8003f58:	b410      	push	{r4}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8003f5a:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	f880 4020 	strb.w	r4, [r0, #32]
  tp->state = CH_STATE_READY;
 8003f62:	2400      	movs	r4, #0
 8003f64:	f881 4020 	strb.w	r4, [r1, #32]
  tqp->next             = tp->queue.next;
 8003f68:	6013      	str	r3, [r2, #0]
  } while (cp->prio > tp->prio);
 8003f6a:	688c      	ldr	r4, [r1, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003f6c:	6190      	str	r0, [r2, #24]
  } while (cp->prio > tp->prio);
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	42a2      	cmp	r2, r4
 8003f72:	d903      	bls.n	8003f7c <chSchDoReschedule+0x2c>
    cp = cp->queue.next;
 8003f74:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	42a2      	cmp	r2, r4
 8003f7a:	d8fb      	bhi.n	8003f74 <chSchDoReschedule+0x24>
  tp->queue.prev             = cp->queue.prev;
 8003f7c:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8003f7e:	bc10      	pop	{r4}
  tp->queue.prev             = cp->queue.prev;
 8003f80:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8003f84:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8003f86:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8003f88:	f7fc b99a 	b.w	80002c0 <_port_switch>
 8003f8c:	200011c0 	.word	0x200011c0

08003f90 <vtcb>:
static void vtcb(void *p) {
 8003f90:	b508      	push	{r3, lr}
 8003f92:	2320      	movs	r3, #32
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f382 8811 	msr	BASEPRI, r2
 8003f9e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fa2:	f3ef 8211 	mrs	r2, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8003fa6:	b95a      	cbnz	r2, 8003fc0 <vtcb+0x30>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa8:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003fac:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fb0:	f3ef 8305 	mrs	r3, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8003fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8003fb8:	b133      	cbz	r3, 8003fc8 <vtcb+0x38>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f383 8811 	msr	BASEPRI, r3
}
 8003fc6:	bd08      	pop	{r3, pc}
  return firstprio(&ch.rlist.queue) > currp->prio;
 8003fc8:	4b04      	ldr	r3, [pc, #16]	@ (8003fdc <vtcb+0x4c>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8003fce:	6892      	ldr	r2, [r2, #8]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d9f1      	bls.n	8003fba <vtcb+0x2a>
    chSchDoRescheduleAhead();
 8003fd6:	f7ff ffbb 	bl	8003f50 <chSchDoReschedule>
 8003fda:	e7ee      	b.n	8003fba <vtcb+0x2a>
 8003fdc:	200011c0 	.word	0x200011c0

08003fe0 <rt_test_002_002_execute.lto_priv.0>:
static void rt_test_002_002_execute(void) {
 8003fe0:	b530      	push	{r4, r5, lr}
  test_set_step(1);
 8003fe2:	4c48      	ldr	r4, [pc, #288]	@ (8004104 <rt_test_002_002_execute.lto_priv.0+0x124>)
 8003fe4:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8003fe6:	b087      	sub	sp, #28
  test_set_step(1);
 8003fe8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fea:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 8003fee:	b96b      	cbnz	r3, 800400c <rt_test_002_002_execute.lto_priv.0+0x2c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff0:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ffa:	f3ef 8305 	mrs	r3, IPSR
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8004002:	2b00      	cmp	r3, #0
 8004004:	d074      	beq.n	80040f0 <rt_test_002_002_execute.lto_priv.0+0x110>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004006:	2300      	movs	r3, #0
 8004008:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800400c:	2302      	movs	r3, #2
 800400e:	6023      	str	r3, [r4, #0]
 8004010:	2320      	movs	r3, #32
 8004012:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004016:	f3ef 8211 	mrs	r2, BASEPRI
  if (port_irq_enabled(sts)) {
 800401a:	b962      	cbnz	r2, 8004036 <rt_test_002_002_execute.lto_priv.0+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800401c:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004020:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004024:	f3ef 8305 	mrs	r3, IPSR
 8004028:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 800402c:	2b00      	cmp	r3, #0
 800402e:	d055      	beq.n	80040dc <rt_test_002_002_execute.lto_priv.0+0xfc>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004030:	2300      	movs	r3, #0
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	2300      	movs	r3, #0
 8004038:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 800403c:	2303      	movs	r3, #3
 800403e:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004040:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8004044:	b913      	cbnz	r3, 800404c <rt_test_002_002_execute.lto_priv.0+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004046:	2320      	movs	r3, #32
 8004048:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800404c:	f3ef 8311 	mrs	r3, BASEPRI
 8004050:	b913      	cbnz	r3, 8004058 <rt_test_002_002_execute.lto_priv.0+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004052:	2320      	movs	r3, #32
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	2300      	movs	r3, #0
 800405a:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 800405e:	2204      	movs	r2, #4
 8004060:	6022      	str	r2, [r4, #0]
 8004062:	2220      	movs	r2, #32
 8004064:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004068:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 800406c:	b10a      	cbz	r2, 8004072 <rt_test_002_002_execute.lto_priv.0+0x92>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800406e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004072:	f3ef 8311 	mrs	r3, BASEPRI
 8004076:	b113      	cbz	r3, 800407e <rt_test_002_002_execute.lto_priv.0+0x9e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004078:	2300      	movs	r3, #0
 800407a:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 800407e:	2205      	movs	r2, #5
  vtp->func = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	2320      	movs	r3, #32
 8004088:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 800408c:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 800408e:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 8004090:	b113      	cbz	r3, 8004098 <rt_test_002_002_execute.lto_priv.0+0xb8>
    chVTDoResetI(vtp);
 8004092:	4620      	mov	r0, r4
 8004094:	f7fe fc54 	bl	8002940 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8004098:	4620      	mov	r0, r4
 800409a:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <rt_test_002_002_execute.lto_priv.0+0x128>)
 800409c:	2300      	movs	r3, #0
 800409e:	2101      	movs	r1, #1
 80040a0:	f7fe fc06 	bl	80028b0 <chVTDoSetI>
 80040a4:	2400      	movs	r4, #0
 80040a6:	f384 8811 	msr	BASEPRI, r4
 80040aa:	2520      	movs	r5, #32
 80040ac:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80040b0:	210a      	movs	r1, #10
 80040b2:	2008      	movs	r0, #8
 80040b4:	f7fe fedc 	bl	8002e70 <chSchGoSleepTimeoutS>
 80040b8:	f384 8811 	msr	BASEPRI, r4
 80040bc:	f385 8811 	msr	BASEPRI, r5
  return (bool)(vtp->func != NULL);
 80040c0:	9b04      	ldr	r3, [sp, #16]
 80040c2:	f384 8811 	msr	BASEPRI, r4
  if (!condition)
 80040c6:	b13b      	cbz	r3, 80040d8 <rt_test_002_002_execute.lto_priv.0+0xf8>
  test_local_fail      = true;
 80040c8:	4c10      	ldr	r4, [pc, #64]	@ (800410c <rt_test_002_002_execute.lto_priv.0+0x12c>)
  test_global_fail     = true;
 80040ca:	4811      	ldr	r0, [pc, #68]	@ (8004110 <rt_test_002_002_execute.lto_priv.0+0x130>)
  test_failure_message = msg;
 80040cc:	4a11      	ldr	r2, [pc, #68]	@ (8004114 <rt_test_002_002_execute.lto_priv.0+0x134>)
 80040ce:	4912      	ldr	r1, [pc, #72]	@ (8004118 <rt_test_002_002_execute.lto_priv.0+0x138>)
 80040d0:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80040d2:	2301      	movs	r3, #1
 80040d4:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80040d6:	7003      	strb	r3, [r0, #0]
}
 80040d8:	b007      	add	sp, #28
 80040da:	bd30      	pop	{r4, r5, pc}
 80040dc:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <rt_test_002_002_execute.lto_priv.0+0x13c>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80040e2:	6892      	ldr	r2, [r2, #8]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d9a2      	bls.n	8004030 <rt_test_002_002_execute.lto_priv.0+0x50>
    chSchDoRescheduleAhead();
 80040ea:	f7ff ff31 	bl	8003f50 <chSchDoReschedule>
 80040ee:	e79f      	b.n	8004030 <rt_test_002_002_execute.lto_priv.0+0x50>
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <rt_test_002_002_execute.lto_priv.0+0x13c>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80040f6:	6892      	ldr	r2, [r2, #8]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d983      	bls.n	8004006 <rt_test_002_002_execute.lto_priv.0+0x26>
    chSchDoRescheduleAhead();
 80040fe:	f7ff ff27 	bl	8003f50 <chSchDoReschedule>
 8004102:	e780      	b.n	8004006 <rt_test_002_002_execute.lto_priv.0+0x26>
 8004104:	200010b4 	.word	0x200010b4
 8004108:	08003f91 	.word	0x08003f91
 800410c:	200010d1 	.word	0x200010d1
 8004110:	200010d0 	.word	0x200010d0
 8004114:	200010cc 	.word	0x200010cc
 8004118:	0800b350 	.word	0x0800b350
 800411c:	200011c0 	.word	0x200011c0

08004120 <rt_test_003_003_execute.lto_priv.0>:
 * - [3.3.2] Thread priority is returned to the previous value then a
 *   check is performed.
 * .
 */

static void rt_test_003_003_execute(void) {
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8004124:	4c31      	ldr	r4, [pc, #196]	@ (80041ec <rt_test_003_003_execute.lto_priv.0+0xcc>)
  tprio_t prio, p1;

  /* [3.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8004126:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80041f0 <rt_test_003_003_execute.lto_priv.0+0xd0>
  return chThdGetSelfX()->prio;
 800412a:	69a2      	ldr	r2, [r4, #24]
 800412c:	6897      	ldr	r7, [r2, #8]
 800412e:	2301      	movs	r3, #1
 8004130:	f8c8 3000 	str.w	r3, [r8]
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8004134:	18fd      	adds	r5, r7, r3
 8004136:	2320      	movs	r3, #32
 8004138:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 800413c:	69a3      	ldr	r3, [r4, #24]
 800413e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	4296      	cmp	r6, r2
 8004144:	d037      	beq.n	80041b6 <rt_test_003_003_execute.lto_priv.0+0x96>
 8004146:	4295      	cmp	r5, r2
 8004148:	d835      	bhi.n	80041b6 <rt_test_003_003_execute.lto_priv.0+0x96>
  currp->realprio = newprio;
 800414a:	63dd      	str	r5, [r3, #60]	@ 0x3c
 800414c:	6823      	ldr	r3, [r4, #0]
  if (chSchIsRescRequiredI()) {
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4293      	cmp	r3, r2
 8004152:	d837      	bhi.n	80041c4 <rt_test_003_003_execute.lto_priv.0+0xa4>
 8004154:	2300      	movs	r3, #0
 8004156:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 800415a:	42b7      	cmp	r7, r6
 800415c:	d139      	bne.n	80041d2 <rt_test_003_003_execute.lto_priv.0+0xb2>
 800415e:	69a3      	ldr	r3, [r4, #24]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	429d      	cmp	r5, r3
 8004164:	d11d      	bne.n	80041a2 <rt_test_003_003_execute.lto_priv.0+0x82>
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
  }

  /* [3.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 8004166:	2302      	movs	r3, #2
 8004168:	f8c8 3000 	str.w	r3, [r8]
 800416c:	2320      	movs	r3, #32
 800416e:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8004172:	69a3      	ldr	r3, [r4, #24]
 8004174:	f8d3 803c 	ldr.w	r8, [r3, #60]	@ 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	4590      	cmp	r8, r2
 800417c:	d001      	beq.n	8004182 <rt_test_003_003_execute.lto_priv.0+0x62>
 800417e:	4297      	cmp	r7, r2
 8004180:	d901      	bls.n	8004186 <rt_test_003_003_execute.lto_priv.0+0x66>
    currp->prio = newprio;
 8004182:	609e      	str	r6, [r3, #8]
 8004184:	4632      	mov	r2, r6
  currp->realprio = newprio;
 8004186:	63de      	str	r6, [r3, #60]	@ 0x3c
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	429a      	cmp	r2, r3
 800418e:	d32a      	bcc.n	80041e6 <rt_test_003_003_execute.lto_priv.0+0xc6>
 8004190:	2300      	movs	r3, #0
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	4545      	cmp	r5, r8
 8004198:	d11b      	bne.n	80041d2 <rt_test_003_003_execute.lto_priv.0+0xb2>
 800419a:	69a3      	ldr	r3, [r4, #24]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	429f      	cmp	r7, r3
 80041a0:	d007      	beq.n	80041b2 <rt_test_003_003_execute.lto_priv.0+0x92>
  test_local_fail      = true;
 80041a2:	4c14      	ldr	r4, [pc, #80]	@ (80041f4 <rt_test_003_003_execute.lto_priv.0+0xd4>)
  test_global_fail     = true;
 80041a4:	4814      	ldr	r0, [pc, #80]	@ (80041f8 <rt_test_003_003_execute.lto_priv.0+0xd8>)
  test_failure_message = msg;
 80041a6:	4a15      	ldr	r2, [pc, #84]	@ (80041fc <rt_test_003_003_execute.lto_priv.0+0xdc>)
 80041a8:	4915      	ldr	r1, [pc, #84]	@ (8004200 <rt_test_003_003_execute.lto_priv.0+0xe0>)
 80041aa:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80041ac:	2301      	movs	r3, #1
 80041ae:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80041b0:	7003      	strb	r3, [r0, #0]
  {
    p1 = chThdSetPriority(p1);
    test_assert(p1 == prio + 1, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
  }
}
 80041b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    currp->prio = newprio;
 80041b6:	609d      	str	r5, [r3, #8]
  currp->realprio = newprio;
 80041b8:	63dd      	str	r5, [r3, #60]	@ 0x3c
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
    currp->prio = newprio;
 80041be:	462a      	mov	r2, r5
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d9c7      	bls.n	8004154 <rt_test_003_003_execute.lto_priv.0+0x34>
    chSchDoRescheduleAhead();
 80041c4:	f7ff fec4 	bl	8003f50 <chSchDoReschedule>
 80041c8:	2300      	movs	r3, #0
 80041ca:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 80041ce:	42b7      	cmp	r7, r6
 80041d0:	d0c5      	beq.n	800415e <rt_test_003_003_execute.lto_priv.0+0x3e>
  test_local_fail      = true;
 80041d2:	4c08      	ldr	r4, [pc, #32]	@ (80041f4 <rt_test_003_003_execute.lto_priv.0+0xd4>)
  test_global_fail     = true;
 80041d4:	4808      	ldr	r0, [pc, #32]	@ (80041f8 <rt_test_003_003_execute.lto_priv.0+0xd8>)
  test_failure_message = msg;
 80041d6:	4a09      	ldr	r2, [pc, #36]	@ (80041fc <rt_test_003_003_execute.lto_priv.0+0xdc>)
 80041d8:	490a      	ldr	r1, [pc, #40]	@ (8004204 <rt_test_003_003_execute.lto_priv.0+0xe4>)
 80041da:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80041dc:	2301      	movs	r3, #1
 80041de:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80041e0:	7003      	strb	r3, [r0, #0]
 80041e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e6:	f7ff feb3 	bl	8003f50 <chSchDoReschedule>
 80041ea:	e7d1      	b.n	8004190 <rt_test_003_003_execute.lto_priv.0+0x70>
 80041ec:	200011c0 	.word	0x200011c0
 80041f0:	200010b4 	.word	0x200010b4
 80041f4:	200010d1 	.word	0x200010d1
 80041f8:	200010d0 	.word	0x200010d0
 80041fc:	200010cc 	.word	0x200010cc
 8004200:	0800b388 	.word	0x0800b388
 8004204:	0800b364 	.word	0x0800b364
	...

08004210 <rt_test_003_004_execute.lto_priv.0>:
 * - [3.4.3] Raising thread priority above the boosted level.
 * - [3.4.4] Restoring original conditions.
 * .
 */

static void rt_test_003_004_execute(void) {
 8004210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8004214:	4c45      	ldr	r4, [pc, #276]	@ (800432c <rt_test_003_004_execute.lto_priv.0+0x11c>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8004216:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 8004330 <rt_test_003_004_execute.lto_priv.0+0x120>
 800421a:	69a3      	ldr	r3, [r4, #24]
  return chThdGetSelfX()->prio;
 800421c:	689d      	ldr	r5, [r3, #8]
    chThdGetSelfX()->prio += 2;
 800421e:	f105 0802 	add.w	r8, r5, #2
 8004222:	f8c3 8008 	str.w	r8, [r3, #8]
  test_set_step(2);
 8004226:	2302      	movs	r3, #2
 8004228:	f8c9 3000 	str.w	r3, [r9]
  {
    p1 = chThdSetPriority(prio + 1);
 800422c:	1c6e      	adds	r6, r5, #1
 800422e:	2320      	movs	r3, #32
 8004230:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8004234:	69a3      	ldr	r3, [r4, #24]
 8004236:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	4297      	cmp	r7, r2
 800423c:	d040      	beq.n	80042c0 <rt_test_003_004_execute.lto_priv.0+0xb0>
 800423e:	4296      	cmp	r6, r2
 8004240:	d83e      	bhi.n	80042c0 <rt_test_003_004_execute.lto_priv.0+0xb0>
  currp->realprio = newprio;
 8004242:	63de      	str	r6, [r3, #60]	@ 0x3c
 8004244:	6823      	ldr	r3, [r4, #0]
  if (chSchIsRescRequiredI()) {
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	d340      	bcc.n	80042ce <rt_test_003_004_execute.lto_priv.0+0xbe>
 800424c:	2300      	movs	r3, #0
 800424e:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 8004252:	42bd      	cmp	r5, r7
 8004254:	d142      	bne.n	80042dc <rt_test_003_004_execute.lto_priv.0+0xcc>
  return ch.rlist.current;
 8004256:	69a3      	ldr	r3, [r4, #24]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	4590      	cmp	r8, r2
 800425c:	d148      	bne.n	80042f0 <rt_test_003_004_execute.lto_priv.0+0xe0>
 800425e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004260:	429e      	cmp	r6, r3
 8004262:	d14e      	bne.n	8004302 <rt_test_003_004_execute.lto_priv.0+0xf2>
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  }

  /* [3.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 8004264:	2303      	movs	r3, #3
 8004266:	f8c9 3000 	str.w	r3, [r9]
  {
    p1 = chThdSetPriority(prio + 3);
 800426a:	18ef      	adds	r7, r5, r3
 800426c:	2320      	movs	r3, #32
 800426e:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8004272:	69a3      	ldr	r3, [r4, #24]
 8004274:	f8d3 803c 	ldr.w	r8, [r3, #60]	@ 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	4590      	cmp	r8, r2
 800427c:	d001      	beq.n	8004282 <rt_test_003_004_execute.lto_priv.0+0x72>
 800427e:	4297      	cmp	r7, r2
 8004280:	d901      	bls.n	8004286 <rt_test_003_004_execute.lto_priv.0+0x76>
    currp->prio = newprio;
 8004282:	609f      	str	r7, [r3, #8]
 8004284:	463a      	mov	r2, r7
  currp->realprio = newprio;
 8004286:	63df      	str	r7, [r3, #60]	@ 0x3c
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	d341      	bcc.n	8004314 <rt_test_003_004_execute.lto_priv.0+0x104>
 8004290:	2300      	movs	r3, #0
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	4546      	cmp	r6, r8
 8004298:	d120      	bne.n	80042dc <rt_test_003_004_execute.lto_priv.0+0xcc>
 800429a:	69a2      	ldr	r2, [r4, #24]
 800429c:	6891      	ldr	r1, [r2, #8]
 800429e:	428f      	cmp	r7, r1
 80042a0:	d126      	bne.n	80042f0 <rt_test_003_004_execute.lto_priv.0+0xe0>
 80042a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042a4:	4297      	cmp	r7, r2
 80042a6:	d138      	bne.n	800431a <rt_test_003_004_execute.lto_priv.0+0x10a>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
  }

  /* [3.4.4] Restoring original conditions.*/
  test_set_step(4);
 80042a8:	2204      	movs	r2, #4
 80042aa:	f8c9 2000 	str.w	r2, [r9]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f382 8811 	msr	BASEPRI, r2
 80042b4:	69a2      	ldr	r2, [r4, #24]
  {
    chSysLock();
    chThdGetSelfX()->prio = prio;
 80042b6:	6095      	str	r5, [r2, #8]
    chThdGetSelfX()->realprio = prio;
 80042b8:	63d5      	str	r5, [r2, #60]	@ 0x3c
 80042ba:	f383 8811 	msr	BASEPRI, r3
}
 80042be:	e015      	b.n	80042ec <rt_test_003_004_execute.lto_priv.0+0xdc>
    currp->prio = newprio;
 80042c0:	609e      	str	r6, [r3, #8]
  currp->realprio = newprio;
 80042c2:	63de      	str	r6, [r3, #60]	@ 0x3c
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
    currp->prio = newprio;
 80042c8:	4632      	mov	r2, r6
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d2be      	bcs.n	800424c <rt_test_003_004_execute.lto_priv.0+0x3c>
    chSchDoRescheduleAhead();
 80042ce:	f7ff fe3f 	bl	8003f50 <chSchDoReschedule>
 80042d2:	2300      	movs	r3, #0
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	42bd      	cmp	r5, r7
 80042da:	d0bc      	beq.n	8004256 <rt_test_003_004_execute.lto_priv.0+0x46>
  test_local_fail      = true;
 80042dc:	4c15      	ldr	r4, [pc, #84]	@ (8004334 <rt_test_003_004_execute.lto_priv.0+0x124>)
  test_global_fail     = true;
 80042de:	4816      	ldr	r0, [pc, #88]	@ (8004338 <rt_test_003_004_execute.lto_priv.0+0x128>)
  test_failure_message = msg;
 80042e0:	4a16      	ldr	r2, [pc, #88]	@ (800433c <rt_test_003_004_execute.lto_priv.0+0x12c>)
 80042e2:	4917      	ldr	r1, [pc, #92]	@ (8004340 <rt_test_003_004_execute.lto_priv.0+0x130>)
 80042e4:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80042e6:	2301      	movs	r3, #1
 80042e8:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80042ea:	7003      	strb	r3, [r0, #0]
    chSysUnlock();
  }
}
 80042ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 80042f0:	4c10      	ldr	r4, [pc, #64]	@ (8004334 <rt_test_003_004_execute.lto_priv.0+0x124>)
  test_global_fail     = true;
 80042f2:	4811      	ldr	r0, [pc, #68]	@ (8004338 <rt_test_003_004_execute.lto_priv.0+0x128>)
  test_failure_message = msg;
 80042f4:	4a11      	ldr	r2, [pc, #68]	@ (800433c <rt_test_003_004_execute.lto_priv.0+0x12c>)
 80042f6:	4913      	ldr	r1, [pc, #76]	@ (8004344 <rt_test_003_004_execute.lto_priv.0+0x134>)
 80042f8:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80042fa:	2301      	movs	r3, #1
 80042fc:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80042fe:	7003      	strb	r3, [r0, #0]
  return true;
 8004300:	e7f4      	b.n	80042ec <rt_test_003_004_execute.lto_priv.0+0xdc>
  test_local_fail      = true;
 8004302:	4c0c      	ldr	r4, [pc, #48]	@ (8004334 <rt_test_003_004_execute.lto_priv.0+0x124>)
  test_global_fail     = true;
 8004304:	480c      	ldr	r0, [pc, #48]	@ (8004338 <rt_test_003_004_execute.lto_priv.0+0x128>)
  test_failure_message = msg;
 8004306:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <rt_test_003_004_execute.lto_priv.0+0x12c>)
 8004308:	490f      	ldr	r1, [pc, #60]	@ (8004348 <rt_test_003_004_execute.lto_priv.0+0x138>)
 800430a:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800430c:	2301      	movs	r3, #1
 800430e:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8004310:	7003      	strb	r3, [r0, #0]
  return true;
 8004312:	e7eb      	b.n	80042ec <rt_test_003_004_execute.lto_priv.0+0xdc>
 8004314:	f7ff fe1c 	bl	8003f50 <chSchDoReschedule>
 8004318:	e7ba      	b.n	8004290 <rt_test_003_004_execute.lto_priv.0+0x80>
  test_local_fail      = true;
 800431a:	4c06      	ldr	r4, [pc, #24]	@ (8004334 <rt_test_003_004_execute.lto_priv.0+0x124>)
  test_global_fail     = true;
 800431c:	4806      	ldr	r0, [pc, #24]	@ (8004338 <rt_test_003_004_execute.lto_priv.0+0x128>)
  test_failure_message = msg;
 800431e:	4a07      	ldr	r2, [pc, #28]	@ (800433c <rt_test_003_004_execute.lto_priv.0+0x12c>)
 8004320:	490a      	ldr	r1, [pc, #40]	@ (800434c <rt_test_003_004_execute.lto_priv.0+0x13c>)
 8004322:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8004324:	2301      	movs	r3, #1
 8004326:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8004328:	7003      	strb	r3, [r0, #0]
  return true;
 800432a:	e7df      	b.n	80042ec <rt_test_003_004_execute.lto_priv.0+0xdc>
 800432c:	200011c0 	.word	0x200011c0
 8004330:	200010b4 	.word	0x200010b4
 8004334:	200010d1 	.word	0x200010d1
 8004338:	200010d0 	.word	0x200010d0
 800433c:	200010cc 	.word	0x200010cc
 8004340:	0800b364 	.word	0x0800b364
 8004344:	0800b388 	.word	0x0800b388
 8004348:	0800b3a4 	.word	0x0800b3a4
 800434c:	0800b3cc 	.word	0x0800b3cc

08004350 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4605      	mov	r5, r0
 8004354:	2320      	movs	r3, #32
 8004356:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800435a:	4b18      	ldr	r3, [pc, #96]	@ (80043bc <thread1.lto_priv.0+0x6c>)
  cp = (thread_t *)&ch.rlist.queue;
 800435c:	4818      	ldr	r0, [pc, #96]	@ (80043c0 <thread1.lto_priv.0+0x70>)
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	b179      	cbz	r1, 8004382 <thread1.lto_priv.0+0x32>
    *trp = NULL;
 8004362:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8004364:	688c      	ldr	r4, [r1, #8]
 8004366:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 8004368:	624a      	str	r2, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800436a:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800436e:	4603      	mov	r3, r0
    cp = cp->queue.next;
 8004370:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	42a2      	cmp	r2, r4
 8004376:	d2fb      	bcs.n	8004370 <thread1.lto_priv.0+0x20>
  tp->queue.prev             = cp->queue.prev;
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800437e:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8004380:	6059      	str	r1, [r3, #4]
 8004382:	6802      	ldr	r2, [r0, #0]
 8004384:	6983      	ldr	r3, [r0, #24]
  if (chSchIsRescRequiredI()) {
 8004386:	6892      	ldr	r2, [r2, #8]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d812      	bhi.n	80043b4 <thread1.lto_priv.0+0x64>
 800438e:	2300      	movs	r3, #0
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	2320      	movs	r3, #32
  test_emit_token(*(char *)p);
 8004396:	7828      	ldrb	r0, [r5, #0]
 8004398:	f383 8811 	msr	BASEPRI, r3
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 800439c:	4a09      	ldr	r2, [pc, #36]	@ (80043c4 <thread1.lto_priv.0+0x74>)
 800439e:	490a      	ldr	r1, [pc, #40]	@ (80043c8 <thread1.lto_priv.0+0x78>)
 80043a0:	6813      	ldr	r3, [r2, #0]
 80043a2:	428b      	cmp	r3, r1
 80043a4:	d202      	bcs.n	80043ac <thread1.lto_priv.0+0x5c>
    *test_tokp++ = token;
 80043a6:	1c59      	adds	r1, r3, #1
 80043a8:	6011      	str	r1, [r2, #0]
 80043aa:	7018      	strb	r0, [r3, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	f383 8811 	msr	BASEPRI, r3
}
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
    chSchDoRescheduleAhead();
 80043b4:	f7ff fdcc 	bl	8003f50 <chSchDoReschedule>
 80043b8:	e7e9      	b.n	800438e <thread1.lto_priv.0+0x3e>
 80043ba:	bf00      	nop
 80043bc:	2000109c 	.word	0x2000109c
 80043c0:	200011c0 	.word	0x200011c0
 80043c4:	200010c8 	.word	0x200010c8
 80043c8:	200010c8 	.word	0x200010c8
 80043cc:	00000000 	.word	0x00000000

080043d0 <thread2>:
static THD_FUNCTION(thread2, p) {
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	2420      	movs	r4, #32
 80043d4:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80043d8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80043dc:	2008      	movs	r0, #8
 80043de:	f7fe fd47 	bl	8002e70 <chSchGoSleepTimeoutS>
 80043e2:	2500      	movs	r5, #0
 80043e4:	f385 8811 	msr	BASEPRI, r5
 80043e8:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 80043ec:	4a15      	ldr	r2, [pc, #84]	@ (8004444 <thread2+0x74>)
 80043ee:	6893      	ldr	r3, [r2, #8]
 80043f0:	3301      	adds	r3, #1
 80043f2:	42ab      	cmp	r3, r5
 80043f4:	6093      	str	r3, [r2, #8]
 80043f6:	dd10      	ble.n	800441a <thread2+0x4a>
 80043f8:	4913      	ldr	r1, [pc, #76]	@ (8004448 <thread2+0x78>)
 80043fa:	680a      	ldr	r2, [r1, #0]
 80043fc:	698b      	ldr	r3, [r1, #24]
  if (chSchIsRescRequiredI()) {
 80043fe:	6892      	ldr	r2, [r2, #8]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d803      	bhi.n	800440e <thread2+0x3e>
 8004406:	2300      	movs	r3, #0
 8004408:	f383 8811 	msr	BASEPRI, r3
}
 800440c:	bd38      	pop	{r3, r4, r5, pc}
    chSchDoRescheduleAhead();
 800440e:	f7ff fd9f 	bl	8003f50 <chSchDoReschedule>
 8004412:	2300      	movs	r3, #0
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 800441a:	6814      	ldr	r4, [r2, #0]
  cp = (thread_t *)&ch.rlist.queue;
 800441c:	490a      	ldr	r1, [pc, #40]	@ (8004448 <thread2+0x78>)
  tqp->next             = tp->queue.next;
 800441e:	6823      	ldr	r3, [r4, #0]
  } while (cp->prio >= tp->prio);
 8004420:	68a0      	ldr	r0, [r4, #8]
 8004422:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004424:	605a      	str	r2, [r3, #4]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 8004426:	6265      	str	r5, [r4, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004428:	f884 5020 	strb.w	r5, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800442c:	460b      	mov	r3, r1
    cp = cp->queue.next;
 800442e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	4282      	cmp	r2, r0
 8004434:	d2fb      	bcs.n	800442e <thread2+0x5e>
  tp->queue.prev             = cp->queue.prev;
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 800443c:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 800443e:	605c      	str	r4, [r3, #4]
  return tp;
 8004440:	e7db      	b.n	80043fa <thread2+0x2a>
 8004442:	bf00      	nop
 8004444:	20001090 	.word	0x20001090
 8004448:	200011c0 	.word	0x200011c0
 800444c:	00000000 	.word	0x00000000

08004450 <thread4>:
static THD_FUNCTION(thread4, p) {
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	2320      	movs	r3, #32
 8004454:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8004458:	6883      	ldr	r3, [r0, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	dd10      	ble.n	8004480 <thread4+0x30>
 800445e:	4b15      	ldr	r3, [pc, #84]	@ (80044b4 <thread4+0x64>)
  return firstprio(&ch.rlist.queue) > currp->prio;
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8004464:	6892      	ldr	r2, [r2, #8]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	d803      	bhi.n	8004474 <thread4+0x24>
 800446c:	2300      	movs	r3, #0
 800446e:	f383 8811 	msr	BASEPRI, r3
}
 8004472:	bd38      	pop	{r3, r4, r5, pc}
    chSchDoRescheduleAhead();
 8004474:	f7ff fd6c 	bl	8003f50 <chSchDoReschedule>
 8004478:	2300      	movs	r3, #0
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	bd38      	pop	{r3, r4, r5, pc}
  if (++sp->cnt <= (cnt_t)0) {
 8004480:	3301      	adds	r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	6083      	str	r3, [r0, #8]
 8004486:	d0ea      	beq.n	800445e <thread4+0xe>
  thread_t *tp = tqp->next;
 8004488:	6805      	ldr	r5, [r0, #0]
  tqp->next             = tp->queue.next;
 800448a:	682b      	ldr	r3, [r5, #0]
  } while (cp->prio >= tp->prio);
 800448c:	68ac      	ldr	r4, [r5, #8]
 800448e:	6003      	str	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004490:	6058      	str	r0, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
 8004492:	4b08      	ldr	r3, [pc, #32]	@ (80044b4 <thread4+0x64>)
    tp->u.rdymsg = MSG_OK;
 8004494:	2200      	movs	r2, #0
 8004496:	626a      	str	r2, [r5, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004498:	f885 2020 	strb.w	r2, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800449c:	461a      	mov	r2, r3
    cp = cp->queue.next;
 800449e:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80044a0:	6891      	ldr	r1, [r2, #8]
 80044a2:	42a1      	cmp	r1, r4
 80044a4:	d2fb      	bcs.n	800449e <thread4+0x4e>
  tp->queue.prev             = cp->queue.prev;
 80044a6:	6851      	ldr	r1, [r2, #4]
 80044a8:	e9c5 2100 	strd	r2, r1, [r5]
  tp->queue.prev->queue.next = tp;
 80044ac:	600d      	str	r5, [r1, #0]
  cp->queue.prev             = tp;
 80044ae:	6055      	str	r5, [r2, #4]
  return tp;
 80044b0:	e7d6      	b.n	8004460 <thread4+0x10>
 80044b2:	bf00      	nop
 80044b4:	200011c0 	.word	0x200011c0
	...

080044c0 <rt_test_005_001_teardown.lto_priv.0>:
static void rt_test_005_001_teardown(void) {
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	2320      	movs	r3, #32
 80044c4:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 80044c8:	4d20      	ldr	r5, [pc, #128]	@ (800454c <rt_test_005_001_teardown.lto_priv.0+0x8c>)
 80044ca:	68ab      	ldr	r3, [r5, #8]
  sp->cnt = n;
 80044cc:	2600      	movs	r6, #0
  while (++cnt <= (cnt_t)0) {
 80044ce:	f103 0c01 	add.w	ip, r3, #1
 80044d2:	45b4      	cmp	ip, r6
  sp->cnt = n;
 80044d4:	60ae      	str	r6, [r5, #8]
  while (++cnt <= (cnt_t)0) {
 80044d6:	dc36      	bgt.n	8004546 <rt_test_005_001_teardown.lto_priv.0+0x86>
 80044d8:	686c      	ldr	r4, [r5, #4]
 80044da:	f8df e074 	ldr.w	lr, [pc, #116]	@ 8004550 <rt_test_005_001_teardown.lto_priv.0+0x90>
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80044de:	f06f 0701 	mvn.w	r7, #1
  tqp->prev             = tp->queue.prev;
 80044e2:	4620      	mov	r0, r4
 80044e4:	6864      	ldr	r4, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
 80044e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <rt_test_005_001_teardown.lto_priv.0+0x90>)
  } while (cp->prio >= tp->prio);
 80044e8:	6881      	ldr	r1, [r0, #8]
  tqp->prev->queue.next = (thread_t *)tqp;
 80044ea:	6025      	str	r5, [r4, #0]
  tp->state = CH_STATE_READY;
 80044ec:	f880 6020 	strb.w	r6, [r0, #32]
    cp = cp->queue.next;
 80044f0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	428a      	cmp	r2, r1
 80044f6:	d2fb      	bcs.n	80044f0 <rt_test_005_001_teardown.lto_priv.0+0x30>
  tp->queue.prev             = cp->queue.prev;
 80044f8:	685a      	ldr	r2, [r3, #4]
  while (++cnt <= (cnt_t)0) {
 80044fa:	f10c 0c01 	add.w	ip, ip, #1
 80044fe:	f1bc 0f01 	cmp.w	ip, #1
 8004502:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8004506:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8004508:	6058      	str	r0, [r3, #4]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800450a:	6247      	str	r7, [r0, #36]	@ 0x24
  while (++cnt <= (cnt_t)0) {
 800450c:	d1e9      	bne.n	80044e2 <rt_test_005_001_teardown.lto_priv.0+0x22>
 800450e:	2100      	movs	r1, #0
 8004510:	606c      	str	r4, [r5, #4]
 8004512:	6025      	str	r5, [r4, #0]
 8004514:	e9c0 3200 	strd	r3, r2, [r0]
 8004518:	f880 1020 	strb.w	r1, [r0, #32]
 800451c:	6010      	str	r0, [r2, #0]
 800451e:	6058      	str	r0, [r3, #4]
 8004520:	6247      	str	r7, [r0, #36]	@ 0x24
  return firstprio(&ch.rlist.queue) > currp->prio;
 8004522:	f8de 2000 	ldr.w	r2, [lr]
 8004526:	f8de 3018 	ldr.w	r3, [lr, #24]
  if (chSchIsRescRequiredI()) {
 800452a:	6892      	ldr	r2, [r2, #8]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	d803      	bhi.n	800453a <rt_test_005_001_teardown.lto_priv.0+0x7a>
 8004532:	2300      	movs	r3, #0
 8004534:	f383 8811 	msr	BASEPRI, r3
}
 8004538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSchDoRescheduleAhead();
 800453a:	f7ff fd09 	bl	8003f50 <chSchDoReschedule>
 800453e:	2300      	movs	r3, #0
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004546:	f8df e008 	ldr.w	lr, [pc, #8]	@ 8004550 <rt_test_005_001_teardown.lto_priv.0+0x90>
 800454a:	e7ea      	b.n	8004522 <rt_test_005_001_teardown.lto_priv.0+0x62>
 800454c:	20001090 	.word	0x20001090
 8004550:	200011c0 	.word	0x200011c0
	...

08004560 <rt_test_005_001_execute.lto_priv.0>:
static void rt_test_005_001_execute(void) {
 8004560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8004564:	4f68      	ldr	r7, [pc, #416]	@ (8004708 <rt_test_005_001_execute.lto_priv.0+0x1a8>)
 8004566:	f04f 0801 	mov.w	r8, #1
 800456a:	f8c7 8000 	str.w	r8, [r7]
 800456e:	2520      	movs	r5, #32
 8004570:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 8004574:	4c65      	ldr	r4, [pc, #404]	@ (800470c <rt_test_005_001_execute.lto_priv.0+0x1ac>)
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	3b01      	subs	r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	60a3      	str	r3, [r4, #8]
 800457e:	f2c0 8084 	blt.w	800468a <rt_test_005_001_execute.lto_priv.0+0x12a>
 8004582:	2300      	movs	r3, #0
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f385 8811 	msr	BASEPRI, r5
  if (!condition)
 800458c:	68a3      	ldr	r3, [r4, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d15a      	bne.n	8004648 <rt_test_005_001_execute.lto_priv.0+0xe8>
 8004592:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 8004596:	2302      	movs	r3, #2
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	2320      	movs	r3, #32
 800459c:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	3301      	adds	r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	60a3      	str	r3, [r4, #8]
 80045a8:	dd5b      	ble.n	8004662 <rt_test_005_001_execute.lto_priv.0+0x102>
 80045aa:	f04f 0e00 	mov.w	lr, #0
 80045ae:	f38e 8811 	msr	BASEPRI, lr
 80045b2:	2320      	movs	r3, #32
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	68a2      	ldr	r2, [r4, #8]
 80045ba:	2a01      	cmp	r2, #1
 80045bc:	d159      	bne.n	8004672 <rt_test_005_001_execute.lto_priv.0+0x112>
 80045be:	f38e 8811 	msr	BASEPRI, lr
  test_set_step(3);
 80045c2:	2203      	movs	r2, #3
 80045c4:	603a      	str	r2, [r7, #0]
 80045c6:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 80045ca:	68a3      	ldr	r3, [r4, #8]
  while (++cnt <= (cnt_t)0) {
 80045cc:	f103 0c01 	add.w	ip, r3, #1
  sp->cnt = n;
 80045d0:	2202      	movs	r2, #2
  while (++cnt <= (cnt_t)0) {
 80045d2:	f1bc 0f00 	cmp.w	ip, #0
  sp->cnt = n;
 80045d6:	60a2      	str	r2, [r4, #8]
  while (++cnt <= (cnt_t)0) {
 80045d8:	f300 8093 	bgt.w	8004702 <rt_test_005_001_execute.lto_priv.0+0x1a2>
 80045dc:	6865      	ldr	r5, [r4, #4]
 80045de:	4e4c      	ldr	r6, [pc, #304]	@ (8004710 <rt_test_005_001_execute.lto_priv.0+0x1b0>)
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80045e0:	f06f 0701 	mvn.w	r7, #1
  tqp->prev             = tp->queue.prev;
 80045e4:	4628      	mov	r0, r5
 80045e6:	686d      	ldr	r5, [r5, #4]
  } while (cp->prio >= tp->prio);
 80045e8:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80045ea:	4b49      	ldr	r3, [pc, #292]	@ (8004710 <rt_test_005_001_execute.lto_priv.0+0x1b0>)
  tqp->prev->queue.next = (thread_t *)tqp;
 80045ec:	602c      	str	r4, [r5, #0]
  tp->state = CH_STATE_READY;
 80045ee:	f880 e020 	strb.w	lr, [r0, #32]
    cp = cp->queue.next;
 80045f2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	428a      	cmp	r2, r1
 80045f8:	d2fb      	bcs.n	80045f2 <rt_test_005_001_execute.lto_priv.0+0x92>
  tp->queue.prev             = cp->queue.prev;
 80045fa:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80045fc:	6003      	str	r3, [r0, #0]
  while (++cnt <= (cnt_t)0) {
 80045fe:	f10c 0c01 	add.w	ip, ip, #1
 8004602:	f1bc 0f01 	cmp.w	ip, #1
  tp->queue.prev             = cp->queue.prev;
 8004606:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8004608:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800460a:	6058      	str	r0, [r3, #4]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800460c:	6247      	str	r7, [r0, #36]	@ 0x24
  while (++cnt <= (cnt_t)0) {
 800460e:	d1e9      	bne.n	80045e4 <rt_test_005_001_execute.lto_priv.0+0x84>
 8004610:	2100      	movs	r1, #0
 8004612:	6065      	str	r5, [r4, #4]
 8004614:	602c      	str	r4, [r5, #0]
 8004616:	e9c0 3200 	strd	r3, r2, [r0]
 800461a:	f880 1020 	strb.w	r1, [r0, #32]
 800461e:	6010      	str	r0, [r2, #0]
 8004620:	6058      	str	r0, [r3, #4]
 8004622:	6247      	str	r7, [r0, #36]	@ 0x24
  return firstprio(&ch.rlist.queue) > currp->prio;
 8004624:	6832      	ldr	r2, [r6, #0]
 8004626:	69b3      	ldr	r3, [r6, #24]
  if (chSchIsRescRequiredI()) {
 8004628:	6892      	ldr	r2, [r2, #8]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	d865      	bhi.n	80046fc <rt_test_005_001_execute.lto_priv.0+0x19c>
 8004630:	2300      	movs	r3, #0
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	2220      	movs	r2, #32
 8004638:	f382 8811 	msr	BASEPRI, r2
 800463c:	68a2      	ldr	r2, [r4, #8]
 800463e:	2a02      	cmp	r2, #2
 8004640:	d151      	bne.n	80046e6 <rt_test_005_001_execute.lto_priv.0+0x186>
 8004642:	f383 8811 	msr	BASEPRI, r3
}
 8004646:	e00a      	b.n	800465e <rt_test_005_001_execute.lto_priv.0+0xfe>
  test_local_fail      = true;
 8004648:	4c32      	ldr	r4, [pc, #200]	@ (8004714 <rt_test_005_001_execute.lto_priv.0+0x1b4>)
  test_global_fail     = true;
 800464a:	4833      	ldr	r0, [pc, #204]	@ (8004718 <rt_test_005_001_execute.lto_priv.0+0x1b8>)
  test_failure_message = msg;
 800464c:	4a33      	ldr	r2, [pc, #204]	@ (800471c <rt_test_005_001_execute.lto_priv.0+0x1bc>)
 800464e:	4934      	ldr	r1, [pc, #208]	@ (8004720 <rt_test_005_001_execute.lto_priv.0+0x1c0>)
 8004650:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8004652:	2301      	movs	r3, #1
 8004654:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8004656:	7003      	strb	r3, [r0, #0]
 8004658:	2300      	movs	r3, #0
 800465a:	f383 8811 	msr	BASEPRI, r3
}
 800465e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  thread_t *tp = tqp->next;
 8004662:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8004664:	6803      	ldr	r3, [r0, #0]
 8004666:	6023      	str	r3, [r4, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8004668:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800466a:	605c      	str	r4, [r3, #4]
 800466c:	f7ff fa10 	bl	8003a90 <chSchWakeupS>
 8004670:	e79b      	b.n	80045aa <rt_test_005_001_execute.lto_priv.0+0x4a>
  test_local_fail      = true;
 8004672:	4928      	ldr	r1, [pc, #160]	@ (8004714 <rt_test_005_001_execute.lto_priv.0+0x1b4>)
  test_global_fail     = true;
 8004674:	4828      	ldr	r0, [pc, #160]	@ (8004718 <rt_test_005_001_execute.lto_priv.0+0x1b8>)
  test_failure_message = msg;
 8004676:	4a29      	ldr	r2, [pc, #164]	@ (800471c <rt_test_005_001_execute.lto_priv.0+0x1bc>)
  test_local_fail      = true;
 8004678:	2301      	movs	r3, #1
 800467a:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800467c:	4928      	ldr	r1, [pc, #160]	@ (8004720 <rt_test_005_001_execute.lto_priv.0+0x1c0>)
  test_global_fail     = true;
 800467e:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 8004680:	6011      	str	r1, [r2, #0]
 8004682:	f38e 8811 	msr	BASEPRI, lr
 8004686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    currp->u.wtsemp = sp;
 800468a:	4e21      	ldr	r6, [pc, #132]	@ (8004710 <rt_test_005_001_execute.lto_priv.0+0x1b0>)
  tp->queue.prev             = tqp->prev;
 800468c:	6863      	ldr	r3, [r4, #4]
 800468e:	69b1      	ldr	r1, [r6, #24]
 8004690:	e9c1 4300 	strd	r4, r3, [r1]
 8004694:	624c      	str	r4, [r1, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 8004696:	6019      	str	r1, [r3, #0]
  thread_t *tp = tqp->next;
 8004698:	6830      	ldr	r0, [r6, #0]
  tqp->prev                  = tp;
 800469a:	6061      	str	r1, [r4, #4]
  otp->state = newstate;
 800469c:	2305      	movs	r3, #5
 800469e:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 80046a2:	6803      	ldr	r3, [r0, #0]
 80046a4:	6033      	str	r3, [r6, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80046a6:	605e      	str	r6, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80046a8:	f880 8020 	strb.w	r8, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80046ac:	61b0      	str	r0, [r6, #24]
  chSysSwitch(currp, otp);
 80046ae:	f7fb fe07 	bl	80002c0 <_port_switch>
    return currp->u.rdymsg;
 80046b2:	69b3      	ldr	r3, [r6, #24]
 80046b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046b6:	2300      	movs	r3, #0
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f385 8811 	msr	BASEPRI, r5
  if (!condition)
 80046c0:	68a3      	ldr	r3, [r4, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1c0      	bne.n	8004648 <rt_test_005_001_execute.lto_priv.0+0xe8>
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	f43f af63 	beq.w	8004596 <rt_test_005_001_execute.lto_priv.0+0x36>
  test_local_fail      = true;
 80046d0:	4810      	ldr	r0, [pc, #64]	@ (8004714 <rt_test_005_001_execute.lto_priv.0+0x1b4>)
  test_global_fail     = true;
 80046d2:	4911      	ldr	r1, [pc, #68]	@ (8004718 <rt_test_005_001_execute.lto_priv.0+0x1b8>)
  test_failure_message = msg;
 80046d4:	4b11      	ldr	r3, [pc, #68]	@ (800471c <rt_test_005_001_execute.lto_priv.0+0x1bc>)
 80046d6:	4a13      	ldr	r2, [pc, #76]	@ (8004724 <rt_test_005_001_execute.lto_priv.0+0x1c4>)
  test_local_fail      = true;
 80046d8:	f880 8000 	strb.w	r8, [r0]
  test_global_fail     = true;
 80046dc:	f881 8000 	strb.w	r8, [r1]
  test_failure_message = msg;
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_local_fail      = true;
 80046e6:	480b      	ldr	r0, [pc, #44]	@ (8004714 <rt_test_005_001_execute.lto_priv.0+0x1b4>)
  test_global_fail     = true;
 80046e8:	4c0b      	ldr	r4, [pc, #44]	@ (8004718 <rt_test_005_001_execute.lto_priv.0+0x1b8>)
  test_failure_message = msg;
 80046ea:	490c      	ldr	r1, [pc, #48]	@ (800471c <rt_test_005_001_execute.lto_priv.0+0x1bc>)
  test_local_fail      = true;
 80046ec:	2201      	movs	r2, #1
 80046ee:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 80046f0:	480b      	ldr	r0, [pc, #44]	@ (8004720 <rt_test_005_001_execute.lto_priv.0+0x1c0>)
  test_global_fail     = true;
 80046f2:	7022      	strb	r2, [r4, #0]
  test_failure_message = msg;
 80046f4:	6008      	str	r0, [r1, #0]
 80046f6:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 80046fa:	e7b0      	b.n	800465e <rt_test_005_001_execute.lto_priv.0+0xfe>
    chSchDoRescheduleAhead();
 80046fc:	f7ff fc28 	bl	8003f50 <chSchDoReschedule>
 8004700:	e796      	b.n	8004630 <rt_test_005_001_execute.lto_priv.0+0xd0>
 8004702:	4e03      	ldr	r6, [pc, #12]	@ (8004710 <rt_test_005_001_execute.lto_priv.0+0x1b0>)
 8004704:	e78e      	b.n	8004624 <rt_test_005_001_execute.lto_priv.0+0xc4>
 8004706:	bf00      	nop
 8004708:	200010b4 	.word	0x200010b4
 800470c:	20001090 	.word	0x20001090
 8004710:	200011c0 	.word	0x200011c0
 8004714:	200010d1 	.word	0x200010d1
 8004718:	200010d0 	.word	0x200010d0
 800471c:	200010cc 	.word	0x200010cc
 8004720:	0800b3ec 	.word	0x0800b3ec
 8004724:	0800b328 	.word	0x0800b328
	...

08004730 <rt_test_005_004_execute.lto_priv.0>:
static void rt_test_005_004_execute(void) {
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8004732:	4e34      	ldr	r6, [pc, #208]	@ (8004804 <rt_test_005_004_execute.lto_priv.0+0xd4>)
  test_set_step(1);
 8004734:	4c34      	ldr	r4, [pc, #208]	@ (8004808 <rt_test_005_004_execute.lto_priv.0+0xd8>)
  return chThdGetSelfX()->prio;
 8004736:	69b3      	ldr	r3, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8004738:	4834      	ldr	r0, [pc, #208]	@ (800480c <rt_test_005_004_execute.lto_priv.0+0xdc>)
 800473a:	6899      	ldr	r1, [r3, #8]
 800473c:	4b34      	ldr	r3, [pc, #208]	@ (8004810 <rt_test_005_004_execute.lto_priv.0+0xe0>)
  test_set_step(1);
 800473e:	2201      	movs	r2, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8004740:	4411      	add	r1, r2
  test_set_step(1);
 8004742:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8004744:	4a33      	ldr	r2, [pc, #204]	@ (8004814 <rt_test_005_004_execute.lto_priv.0+0xe4>)
 8004746:	f006 f9fb 	bl	800ab40 <chThdCreateStatic.constprop.0>
 800474a:	4a33      	ldr	r2, [pc, #204]	@ (8004818 <rt_test_005_004_execute.lto_priv.0+0xe8>)
  test_set_step(2);
 800474c:	2302      	movs	r3, #2
 800474e:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8004750:	6010      	str	r0, [r2, #0]
 8004752:	2320      	movs	r3, #32
 8004754:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
 8004758:	4d30      	ldr	r5, [pc, #192]	@ (800481c <rt_test_005_004_execute.lto_priv.0+0xec>)
 800475a:	68ab      	ldr	r3, [r5, #8]
  tp->state = CH_STATE_READY;
 800475c:	2700      	movs	r7, #0
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	f103 0c03 	add.w	ip, r3, #3
 8004764:	e002      	b.n	800476c <rt_test_005_004_execute.lto_priv.0+0x3c>
  while (n > (cnt_t)0) {
 8004766:	3201      	adds	r2, #1
 8004768:	4562      	cmp	r2, ip
 800476a:	d017      	beq.n	800479c <rt_test_005_004_execute.lto_priv.0+0x6c>
    if (++sp->cnt <= (cnt_t)0) {
 800476c:	2a00      	cmp	r2, #0
 800476e:	60aa      	str	r2, [r5, #8]
 8004770:	dcf9      	bgt.n	8004766 <rt_test_005_004_execute.lto_priv.0+0x36>
  thread_t *tp = tqp->next;
 8004772:	682c      	ldr	r4, [r5, #0]
  cp = (thread_t *)&ch.rlist.queue;
 8004774:	4b23      	ldr	r3, [pc, #140]	@ (8004804 <rt_test_005_004_execute.lto_priv.0+0xd4>)
  tqp->next             = tp->queue.next;
 8004776:	6821      	ldr	r1, [r4, #0]
  } while (cp->prio >= tp->prio);
 8004778:	68a0      	ldr	r0, [r4, #8]
 800477a:	6029      	str	r1, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800477c:	604d      	str	r5, [r1, #4]
  tp->state = CH_STATE_READY;
 800477e:	f884 7020 	strb.w	r7, [r4, #32]
    cp = cp->queue.next;
 8004782:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	4281      	cmp	r1, r0
 8004788:	d2fb      	bcs.n	8004782 <rt_test_005_004_execute.lto_priv.0+0x52>
  tp->queue.prev             = cp->queue.prev;
 800478a:	6859      	ldr	r1, [r3, #4]
  while (n > (cnt_t)0) {
 800478c:	3201      	adds	r2, #1
 800478e:	4562      	cmp	r2, ip
 8004790:	e9c4 3100 	strd	r3, r1, [r4]
  tp->queue.prev->queue.next = tp;
 8004794:	600c      	str	r4, [r1, #0]
  cp->queue.prev             = tp;
 8004796:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8004798:	6267      	str	r7, [r4, #36]	@ 0x24
  while (n > (cnt_t)0) {
 800479a:	d1e7      	bne.n	800476c <rt_test_005_004_execute.lto_priv.0+0x3c>
  return firstprio(&ch.rlist.queue) > currp->prio;
 800479c:	6832      	ldr	r2, [r6, #0]
 800479e:	69b3      	ldr	r3, [r6, #24]
  if (chSchIsRescRequiredI()) {
 80047a0:	6892      	ldr	r2, [r2, #8]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d829      	bhi.n	80047fc <rt_test_005_004_execute.lto_priv.0+0xcc>
 80047a8:	2700      	movs	r7, #0
 80047aa:	f387 8811 	msr	BASEPRI, r7
 80047ae:	4c1a      	ldr	r4, [pc, #104]	@ (8004818 <rt_test_005_004_execute.lto_priv.0+0xe8>)
 80047b0:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 80047b4:	f854 0b04 	ldr.w	r0, [r4], #4
 80047b8:	b118      	cbz	r0, 80047c2 <rt_test_005_004_execute.lto_priv.0+0x92>
      chThdWait(threads[i]);
 80047ba:	f006 fc69 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 80047be:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80047c2:	42b4      	cmp	r4, r6
 80047c4:	d1f6      	bne.n	80047b4 <rt_test_005_004_execute.lto_priv.0+0x84>
 80047c6:	2320      	movs	r3, #32
 80047c8:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 80047cc:	68ab      	ldr	r3, [r5, #8]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d108      	bne.n	80047e4 <rt_test_005_004_execute.lto_priv.0+0xb4>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f383 8811 	msr	BASEPRI, r3
    test_assert_sequence("A", "invalid sequence");
 80047d8:	4911      	ldr	r1, [pc, #68]	@ (8004820 <rt_test_005_004_execute.lto_priv.0+0xf0>)
 80047da:	480d      	ldr	r0, [pc, #52]	@ (8004810 <rt_test_005_004_execute.lto_priv.0+0xe0>)
}
 80047dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("A", "invalid sequence");
 80047e0:	f7fc b9a6 	b.w	8000b30 <_test_assert_sequence>
  test_local_fail      = true;
 80047e4:	4c0f      	ldr	r4, [pc, #60]	@ (8004824 <rt_test_005_004_execute.lto_priv.0+0xf4>)
  test_global_fail     = true;
 80047e6:	4810      	ldr	r0, [pc, #64]	@ (8004828 <rt_test_005_004_execute.lto_priv.0+0xf8>)
  test_failure_message = msg;
 80047e8:	4a10      	ldr	r2, [pc, #64]	@ (800482c <rt_test_005_004_execute.lto_priv.0+0xfc>)
 80047ea:	4911      	ldr	r1, [pc, #68]	@ (8004830 <rt_test_005_004_execute.lto_priv.0+0x100>)
 80047ec:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80047ee:	2301      	movs	r3, #1
 80047f0:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80047f2:	7003      	strb	r3, [r0, #0]
 80047f4:	2300      	movs	r3, #0
 80047f6:	f383 8811 	msr	BASEPRI, r3
}
 80047fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSchDoRescheduleAhead();
 80047fc:	f7ff fba8 	bl	8003f50 <chSchDoReschedule>
 8004800:	e7d2      	b.n	80047a8 <rt_test_005_004_execute.lto_priv.0+0x78>
 8004802:	bf00      	nop
 8004804:	200011c0 	.word	0x200011c0
 8004808:	200010b4 	.word	0x200010b4
 800480c:	20000a08 	.word	0x20000a08
 8004810:	0800b1cc 	.word	0x0800b1cc
 8004814:	08001771 	.word	0x08001771
 8004818:	200010a0 	.word	0x200010a0
 800481c:	20001090 	.word	0x20001090
 8004820:	0800b170 	.word	0x0800b170
 8004824:	200010d1 	.word	0x200010d1
 8004828:	200010d0 	.word	0x200010d0
 800482c:	200010cc 	.word	0x200010cc
 8004830:	0800b400 	.word	0x0800b400
	...

08004840 <rt_test_005_006_execute.lto_priv.0>:

static void rt_test_005_006_execute(void) {
 8004840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8004844:	4dac      	ldr	r5, [pc, #688]	@ (8004af8 <rt_test_005_006_execute.lto_priv.0+0x2b8>)
static void rt_test_005_006_execute(void) {
 8004846:	b084      	sub	sp, #16
  test_set_step(1);
 8004848:	2301      	movs	r3, #1
  sp->cnt = n;
 800484a:	2700      	movs	r7, #0
 800484c:	602b      	str	r3, [r5, #0]
  tqp->next = (thread_t *)tqp;
 800484e:	f8cd d000 	str.w	sp, [sp]
 8004852:	f8cd d004 	str.w	sp, [sp, #4]
 8004856:	9702      	str	r7, [sp, #8]
 8004858:	2220      	movs	r2, #32
 800485a:	f382 8811 	msr	BASEPRI, r2
  if (!condition)
 800485e:	9902      	ldr	r1, [sp, #8]
 8004860:	42b9      	cmp	r1, r7
 8004862:	f300 80ac 	bgt.w	80049be <rt_test_005_006_execute.lto_priv.0+0x17e>
 8004866:	f387 8811 	msr	BASEPRI, r7
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  }

  /* [5.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 800486a:	2302      	movs	r3, #2
 800486c:	602b      	str	r3, [r5, #0]
 800486e:	f382 8811 	msr	BASEPRI, r2
  cnt = sp->cnt;
 8004872:	9b02      	ldr	r3, [sp, #8]
  sp->cnt = n;
 8004874:	9702      	str	r7, [sp, #8]
  while (++cnt <= (cnt_t)0) {
 8004876:	f103 0c01 	add.w	ip, r3, #1
 800487a:	45bc      	cmp	ip, r7
 800487c:	f300 80c9 	bgt.w	8004a12 <rt_test_005_006_execute.lto_priv.0+0x1d2>
 8004880:	9c01      	ldr	r4, [sp, #4]
 8004882:	4e9e      	ldr	r6, [pc, #632]	@ (8004afc <rt_test_005_006_execute.lto_priv.0+0x2bc>)
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8004884:	f06f 0e01 	mvn.w	lr, #1
  tqp->prev             = tp->queue.prev;
 8004888:	4620      	mov	r0, r4
 800488a:	6864      	ldr	r4, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
 800488c:	4b9b      	ldr	r3, [pc, #620]	@ (8004afc <rt_test_005_006_execute.lto_priv.0+0x2bc>)
  } while (cp->prio >= tp->prio);
 800488e:	6881      	ldr	r1, [r0, #8]
  tqp->prev->queue.next = (thread_t *)tqp;
 8004890:	f8c4 d000 	str.w	sp, [r4]
  tp->state = CH_STATE_READY;
 8004894:	f880 7020 	strb.w	r7, [r0, #32]
    cp = cp->queue.next;
 8004898:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	428a      	cmp	r2, r1
 800489e:	d2fb      	bcs.n	8004898 <rt_test_005_006_execute.lto_priv.0+0x58>
  tp->queue.prev             = cp->queue.prev;
 80048a0:	685a      	ldr	r2, [r3, #4]
  while (++cnt <= (cnt_t)0) {
 80048a2:	f10c 0c01 	add.w	ip, ip, #1
 80048a6:	f1bc 0f01 	cmp.w	ip, #1
 80048aa:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80048ae:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80048b0:	6058      	str	r0, [r3, #4]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80048b2:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
  while (++cnt <= (cnt_t)0) {
 80048b6:	d1e7      	bne.n	8004888 <rt_test_005_006_execute.lto_priv.0+0x48>
 80048b8:	2100      	movs	r1, #0
 80048ba:	9401      	str	r4, [sp, #4]
 80048bc:	f8c4 d000 	str.w	sp, [r4]
 80048c0:	e9c0 3200 	strd	r3, r2, [r0]
 80048c4:	f880 1020 	strb.w	r1, [r0, #32]
 80048c8:	6010      	str	r0, [r2, #0]
 80048ca:	6058      	str	r0, [r3, #4]
 80048cc:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
  return firstprio(&ch.rlist.queue) > currp->prio;
 80048d0:	6832      	ldr	r2, [r6, #0]
 80048d2:	69b3      	ldr	r3, [r6, #24]
  if (chSchIsRescRequiredI()) {
 80048d4:	6892      	ldr	r2, [r2, #8]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	f200 8097 	bhi.w	8004a0c <rt_test_005_006_execute.lto_priv.0+0x1cc>
 80048de:	2400      	movs	r4, #0
 80048e0:	f384 8811 	msr	BASEPRI, r4
 80048e4:	2720      	movs	r7, #32
 80048e6:	f387 8811 	msr	BASEPRI, r7
 80048ea:	9b02      	ldr	r3, [sp, #8]
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	dc72      	bgt.n	80049d6 <rt_test_005_006_execute.lto_priv.0+0x196>
 80048f0:	f384 8811 	msr	BASEPRI, r4
 80048f4:	69b3      	ldr	r3, [r6, #24]
  }

  /* [5.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80048f6:	4a82      	ldr	r2, [pc, #520]	@ (8004b00 <rt_test_005_006_execute.lto_priv.0+0x2c0>)
 80048f8:	6899      	ldr	r1, [r3, #8]
 80048fa:	4882      	ldr	r0, [pc, #520]	@ (8004b04 <rt_test_005_006_execute.lto_priv.0+0x2c4>)
  test_set_step(3);
 80048fc:	2303      	movs	r3, #3
 80048fe:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8004900:	3901      	subs	r1, #1
 8004902:	466b      	mov	r3, sp
 8004904:	f006 f91c 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8004908:	4b7f      	ldr	r3, [pc, #508]	@ (8004b08 <rt_test_005_006_execute.lto_priv.0+0x2c8>)
 800490a:	6018      	str	r0, [r3, #0]
                                   chThdGetPriorityX()-1, thread4, &bsem);
  }

  /* [5.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 800490c:	2304      	movs	r3, #4
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	f387 8811 	msr	BASEPRI, r7
  if (--sp->cnt < (cnt_t)0) {
 8004914:	9b02      	ldr	r3, [sp, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	9302      	str	r3, [sp, #8]
 800491c:	f2c0 8089 	blt.w	8004a32 <rt_test_005_006_execute.lto_priv.0+0x1f2>
 8004920:	f384 8811 	msr	BASEPRI, r4
 8004924:	f387 8811 	msr	BASEPRI, r7
 8004928:	9b02      	ldr	r3, [sp, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	dc60      	bgt.n	80049f0 <rt_test_005_006_execute.lto_priv.0+0x1b0>
 800492e:	f384 8811 	msr	BASEPRI, r4
  }

  /* [5.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 8004932:	2305      	movs	r3, #5
 8004934:	602b      	str	r3, [r5, #0]
 8004936:	2320      	movs	r3, #32
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	9b02      	ldr	r3, [sp, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f340 80a6 	ble.w	8004a90 <rt_test_005_006_execute.lto_priv.0+0x250>
 8004944:	6832      	ldr	r2, [r6, #0]
 8004946:	69b3      	ldr	r3, [r6, #24]
 8004948:	6892      	ldr	r2, [r2, #8]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d86d      	bhi.n	8004a2c <rt_test_005_006_execute.lto_priv.0+0x1ec>
 8004950:	2200      	movs	r2, #0
 8004952:	f382 8811 	msr	BASEPRI, r2
 8004956:	2320      	movs	r3, #32
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	9902      	ldr	r1, [sp, #8]
 800495e:	4291      	cmp	r1, r2
 8004960:	dd59      	ble.n	8004a16 <rt_test_005_006_execute.lto_priv.0+0x1d6>
 8004962:	f382 8811 	msr	BASEPRI, r2
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	9902      	ldr	r1, [sp, #8]
 800496c:	2901      	cmp	r1, #1
 800496e:	f040 80a9 	bne.w	8004ac4 <rt_test_005_006_execute.lto_priv.0+0x284>
 8004972:	f382 8811 	msr	BASEPRI, r2
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }

  /* [5.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 8004976:	2106      	movs	r1, #6
 8004978:	6029      	str	r1, [r5, #0]
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	9b02      	ldr	r3, [sp, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f340 80de 	ble.w	8004b42 <rt_test_005_006_execute.lto_priv.0+0x302>
 8004986:	6832      	ldr	r2, [r6, #0]
 8004988:	69b3      	ldr	r3, [r6, #24]
 800498a:	6892      	ldr	r2, [r2, #8]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	f200 80ae 	bhi.w	8004af0 <rt_test_005_006_execute.lto_priv.0+0x2b0>
 8004994:	2300      	movs	r3, #0
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	2220      	movs	r2, #32
 800499c:	f382 8811 	msr	BASEPRI, r2
 80049a0:	9902      	ldr	r1, [sp, #8]
 80049a2:	4299      	cmp	r1, r3
 80049a4:	f340 8099 	ble.w	8004ada <rt_test_005_006_execute.lto_priv.0+0x29a>
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f382 8811 	msr	BASEPRI, r2
 80049b0:	9a02      	ldr	r2, [sp, #8]
 80049b2:	2a01      	cmp	r2, #1
 80049b4:	f040 80ba 	bne.w	8004b2c <rt_test_005_006_execute.lto_priv.0+0x2ec>
 80049b8:	f383 8811 	msr	BASEPRI, r3
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80049bc:	e008      	b.n	80049d0 <rt_test_005_006_execute.lto_priv.0+0x190>
  test_local_fail      = true;
 80049be:	4853      	ldr	r0, [pc, #332]	@ (8004b0c <rt_test_005_006_execute.lto_priv.0+0x2cc>)
  test_global_fail     = true;
 80049c0:	4953      	ldr	r1, [pc, #332]	@ (8004b10 <rt_test_005_006_execute.lto_priv.0+0x2d0>)
  test_failure_message = msg;
 80049c2:	4a54      	ldr	r2, [pc, #336]	@ (8004b14 <rt_test_005_006_execute.lto_priv.0+0x2d4>)
  test_local_fail      = true;
 80049c4:	7003      	strb	r3, [r0, #0]
  test_global_fail     = true;
 80049c6:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80049c8:	4b53      	ldr	r3, [pc, #332]	@ (8004b18 <rt_test_005_006_execute.lto_priv.0+0x2d8>)
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	f387 8811 	msr	BASEPRI, r7
  }
}
 80049d0:	b004      	add	sp, #16
 80049d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_local_fail      = true;
 80049d6:	494d      	ldr	r1, [pc, #308]	@ (8004b0c <rt_test_005_006_execute.lto_priv.0+0x2cc>)
  test_global_fail     = true;
 80049d8:	484d      	ldr	r0, [pc, #308]	@ (8004b10 <rt_test_005_006_execute.lto_priv.0+0x2d0>)
  test_failure_message = msg;
 80049da:	4a4e      	ldr	r2, [pc, #312]	@ (8004b14 <rt_test_005_006_execute.lto_priv.0+0x2d4>)
  test_local_fail      = true;
 80049dc:	2301      	movs	r3, #1
 80049de:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80049e0:	494d      	ldr	r1, [pc, #308]	@ (8004b18 <rt_test_005_006_execute.lto_priv.0+0x2d8>)
  test_global_fail     = true;
 80049e2:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 80049e4:	6011      	str	r1, [r2, #0]
 80049e6:	f384 8811 	msr	BASEPRI, r4
 80049ea:	b004      	add	sp, #16
 80049ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_local_fail      = true;
 80049f0:	4c46      	ldr	r4, [pc, #280]	@ (8004b0c <rt_test_005_006_execute.lto_priv.0+0x2cc>)
  test_global_fail     = true;
 80049f2:	4847      	ldr	r0, [pc, #284]	@ (8004b10 <rt_test_005_006_execute.lto_priv.0+0x2d0>)
  test_failure_message = msg;
 80049f4:	4a47      	ldr	r2, [pc, #284]	@ (8004b14 <rt_test_005_006_execute.lto_priv.0+0x2d4>)
 80049f6:	4948      	ldr	r1, [pc, #288]	@ (8004b18 <rt_test_005_006_execute.lto_priv.0+0x2d8>)
 80049f8:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80049fa:	2301      	movs	r3, #1
 80049fc:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80049fe:	7003      	strb	r3, [r0, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	b004      	add	sp, #16
 8004a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSchDoRescheduleAhead();
 8004a0c:	f7ff faa0 	bl	8003f50 <chSchDoReschedule>
 8004a10:	e765      	b.n	80048de <rt_test_005_006_execute.lto_priv.0+0x9e>
 8004a12:	4e3a      	ldr	r6, [pc, #232]	@ (8004afc <rt_test_005_006_execute.lto_priv.0+0x2bc>)
 8004a14:	e75c      	b.n	80048d0 <rt_test_005_006_execute.lto_priv.0+0x90>
  test_local_fail      = true;
 8004a16:	483d      	ldr	r0, [pc, #244]	@ (8004b0c <rt_test_005_006_execute.lto_priv.0+0x2cc>)
  test_global_fail     = true;
 8004a18:	4c3d      	ldr	r4, [pc, #244]	@ (8004b10 <rt_test_005_006_execute.lto_priv.0+0x2d0>)
  test_failure_message = msg;
 8004a1a:	493e      	ldr	r1, [pc, #248]	@ (8004b14 <rt_test_005_006_execute.lto_priv.0+0x2d4>)
  test_local_fail      = true;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 8004a20:	483e      	ldr	r0, [pc, #248]	@ (8004b1c <rt_test_005_006_execute.lto_priv.0+0x2dc>)
  test_global_fail     = true;
 8004a22:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
 8004a24:	6008      	str	r0, [r1, #0]
 8004a26:	f382 8811 	msr	BASEPRI, r2
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8004a2a:	e7d1      	b.n	80049d0 <rt_test_005_006_execute.lto_priv.0+0x190>
 8004a2c:	f7ff fa90 	bl	8003f50 <chSchDoReschedule>
 8004a30:	e78e      	b.n	8004950 <rt_test_005_006_execute.lto_priv.0+0x110>
    currp->u.wtsemp = sp;
 8004a32:	69b1      	ldr	r1, [r6, #24]
  tp->queue.prev             = tqp->prev;
 8004a34:	9b01      	ldr	r3, [sp, #4]
  tp->queue.next             = (thread_t *)tqp;
 8004a36:	f8c1 d000 	str.w	sp, [r1]
  tp->queue.prev             = tqp->prev;
 8004a3a:	604b      	str	r3, [r1, #4]
 8004a3c:	f8c1 d024 	str.w	sp, [r1, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 8004a40:	6019      	str	r1, [r3, #0]
  thread_t *tp = tqp->next;
 8004a42:	6830      	ldr	r0, [r6, #0]
  tqp->prev                  = tp;
 8004a44:	9101      	str	r1, [sp, #4]
  otp->state = newstate;
 8004a46:	2305      	movs	r3, #5
 8004a48:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8004a4c:	6803      	ldr	r3, [r0, #0]
 8004a4e:	6033      	str	r3, [r6, #0]
  currp->state = CH_STATE_CURRENT;
 8004a50:	f04f 0801 	mov.w	r8, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8004a54:	605e      	str	r6, [r3, #4]
 8004a56:	f880 8020 	strb.w	r8, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8004a5a:	61b0      	str	r0, [r6, #24]
  chSysSwitch(currp, otp);
 8004a5c:	f7fb fc30 	bl	80002c0 <_port_switch>
    return currp->u.rdymsg;
 8004a60:	69b3      	ldr	r3, [r6, #24]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	f384 8811 	msr	BASEPRI, r4
 8004a68:	f387 8811 	msr	BASEPRI, r7
  if (!condition)
 8004a6c:	9a02      	ldr	r2, [sp, #8]
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	dcbe      	bgt.n	80049f0 <rt_test_005_006_execute.lto_priv.0+0x1b0>
 8004a72:	f384 8811 	msr	BASEPRI, r4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f43f af5b 	beq.w	8004932 <rt_test_005_006_execute.lto_priv.0+0xf2>
  test_local_fail      = true;
 8004a7c:	4823      	ldr	r0, [pc, #140]	@ (8004b0c <rt_test_005_006_execute.lto_priv.0+0x2cc>)
  test_global_fail     = true;
 8004a7e:	4924      	ldr	r1, [pc, #144]	@ (8004b10 <rt_test_005_006_execute.lto_priv.0+0x2d0>)
  test_failure_message = msg;
 8004a80:	4b24      	ldr	r3, [pc, #144]	@ (8004b14 <rt_test_005_006_execute.lto_priv.0+0x2d4>)
 8004a82:	4a27      	ldr	r2, [pc, #156]	@ (8004b20 <rt_test_005_006_execute.lto_priv.0+0x2e0>)
  test_local_fail      = true;
 8004a84:	f880 8000 	strb.w	r8, [r0]
  test_global_fail     = true;
 8004a88:	f881 8000 	strb.w	r8, [r1]
  test_failure_message = msg;
 8004a8c:	601a      	str	r2, [r3, #0]
  return true;
 8004a8e:	e79f      	b.n	80049d0 <rt_test_005_006_execute.lto_priv.0+0x190>
  if (++sp->cnt <= (cnt_t)0) {
 8004a90:	3301      	adds	r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	9302      	str	r3, [sp, #8]
 8004a96:	f43f af55 	beq.w	8004944 <rt_test_005_006_execute.lto_priv.0+0x104>
  thread_t *tp = tqp->next;
 8004a9a:	9b00      	ldr	r3, [sp, #0]
  tqp->next             = tp->queue.next;
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	9200      	str	r2, [sp, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004aa0:	f8c2 d004 	str.w	sp, [r2, #4]
    tp->u.rdymsg = MSG_OK;
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	625a      	str	r2, [r3, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004aa8:	f883 2020 	strb.w	r2, [r3, #32]
  } while (cp->prio >= tp->prio);
 8004aac:	6899      	ldr	r1, [r3, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8004aae:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <rt_test_005_006_execute.lto_priv.0+0x2bc>)
    cp = cp->queue.next;
 8004ab0:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8004ab2:	6890      	ldr	r0, [r2, #8]
 8004ab4:	4288      	cmp	r0, r1
 8004ab6:	d2fb      	bcs.n	8004ab0 <rt_test_005_006_execute.lto_priv.0+0x270>
  tp->queue.prev             = cp->queue.prev;
 8004ab8:	6851      	ldr	r1, [r2, #4]
  tp->queue.next             = cp;
 8004aba:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 8004abc:	6059      	str	r1, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8004abe:	600b      	str	r3, [r1, #0]
  cp->queue.prev             = tp;
 8004ac0:	6053      	str	r3, [r2, #4]
  return tp;
 8004ac2:	e73f      	b.n	8004944 <rt_test_005_006_execute.lto_priv.0+0x104>
  test_local_fail      = true;
 8004ac4:	4811      	ldr	r0, [pc, #68]	@ (8004b0c <rt_test_005_006_execute.lto_priv.0+0x2cc>)
  test_global_fail     = true;
 8004ac6:	4c12      	ldr	r4, [pc, #72]	@ (8004b10 <rt_test_005_006_execute.lto_priv.0+0x2d0>)
  test_failure_message = msg;
 8004ac8:	4912      	ldr	r1, [pc, #72]	@ (8004b14 <rt_test_005_006_execute.lto_priv.0+0x2d4>)
  test_local_fail      = true;
 8004aca:	2301      	movs	r3, #1
 8004acc:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 8004ace:	4815      	ldr	r0, [pc, #84]	@ (8004b24 <rt_test_005_006_execute.lto_priv.0+0x2e4>)
  test_global_fail     = true;
 8004ad0:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
 8004ad2:	6008      	str	r0, [r1, #0]
 8004ad4:	f382 8811 	msr	BASEPRI, r2
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8004ad8:	e77a      	b.n	80049d0 <rt_test_005_006_execute.lto_priv.0+0x190>
  test_local_fail      = true;
 8004ada:	480c      	ldr	r0, [pc, #48]	@ (8004b0c <rt_test_005_006_execute.lto_priv.0+0x2cc>)
  test_global_fail     = true;
 8004adc:	4c0c      	ldr	r4, [pc, #48]	@ (8004b10 <rt_test_005_006_execute.lto_priv.0+0x2d0>)
  test_failure_message = msg;
 8004ade:	490d      	ldr	r1, [pc, #52]	@ (8004b14 <rt_test_005_006_execute.lto_priv.0+0x2d4>)
  test_local_fail      = true;
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 8004ae4:	4810      	ldr	r0, [pc, #64]	@ (8004b28 <rt_test_005_006_execute.lto_priv.0+0x2e8>)
  test_global_fail     = true;
 8004ae6:	7022      	strb	r2, [r4, #0]
  test_failure_message = msg;
 8004ae8:	6008      	str	r0, [r1, #0]
 8004aea:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8004aee:	e76f      	b.n	80049d0 <rt_test_005_006_execute.lto_priv.0+0x190>
    chSchDoRescheduleAhead();
 8004af0:	f7ff fa2e 	bl	8003f50 <chSchDoReschedule>
 8004af4:	e74e      	b.n	8004994 <rt_test_005_006_execute.lto_priv.0+0x154>
 8004af6:	bf00      	nop
 8004af8:	200010b4 	.word	0x200010b4
 8004afc:	200011c0 	.word	0x200011c0
 8004b00:	08004451 	.word	0x08004451
 8004b04:	20000a08 	.word	0x20000a08
 8004b08:	200010a0 	.word	0x200010a0
 8004b0c:	200010d1 	.word	0x200010d1
 8004b10:	200010d0 	.word	0x200010d0
 8004b14:	200010cc 	.word	0x200010cc
 8004b18:	0800b410 	.word	0x0800b410
 8004b1c:	0800b430 	.word	0x0800b430
 8004b20:	0800b41c 	.word	0x0800b41c
 8004b24:	0800b43c 	.word	0x0800b43c
 8004b28:	0800b414 	.word	0x0800b414
  test_local_fail      = true;
 8004b2c:	4811      	ldr	r0, [pc, #68]	@ (8004b74 <rt_test_005_006_execute.lto_priv.0+0x334>)
  test_global_fail     = true;
 8004b2e:	4c12      	ldr	r4, [pc, #72]	@ (8004b78 <rt_test_005_006_execute.lto_priv.0+0x338>)
  test_failure_message = msg;
 8004b30:	4912      	ldr	r1, [pc, #72]	@ (8004b7c <rt_test_005_006_execute.lto_priv.0+0x33c>)
  test_local_fail      = true;
 8004b32:	2201      	movs	r2, #1
 8004b34:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 8004b36:	4812      	ldr	r0, [pc, #72]	@ (8004b80 <rt_test_005_006_execute.lto_priv.0+0x340>)
  test_global_fail     = true;
 8004b38:	7022      	strb	r2, [r4, #0]
  test_failure_message = msg;
 8004b3a:	6008      	str	r0, [r1, #0]
 8004b3c:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8004b40:	e746      	b.n	80049d0 <rt_test_005_006_execute.lto_priv.0+0x190>
  if (++sp->cnt <= (cnt_t)0) {
 8004b42:	3301      	adds	r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	9302      	str	r3, [sp, #8]
 8004b48:	f43f af1d 	beq.w	8004986 <rt_test_005_006_execute.lto_priv.0+0x146>
  thread_t *tp = tqp->next;
 8004b4c:	9b00      	ldr	r3, [sp, #0]
  tqp->next             = tp->queue.next;
 8004b4e:	6819      	ldr	r1, [r3, #0]
 8004b50:	9100      	str	r1, [sp, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004b52:	f8c1 d004 	str.w	sp, [r1, #4]
  } while (cp->prio >= tp->prio);
 8004b56:	6898      	ldr	r0, [r3, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8004b58:	490a      	ldr	r1, [pc, #40]	@ (8004b84 <rt_test_005_006_execute.lto_priv.0+0x344>)
    tp->u.rdymsg = MSG_OK;
 8004b5a:	625a      	str	r2, [r3, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004b5c:	f883 2020 	strb.w	r2, [r3, #32]
    cp = cp->queue.next;
 8004b60:	6809      	ldr	r1, [r1, #0]
  } while (cp->prio >= tp->prio);
 8004b62:	688a      	ldr	r2, [r1, #8]
 8004b64:	4282      	cmp	r2, r0
 8004b66:	d2fb      	bcs.n	8004b60 <rt_test_005_006_execute.lto_priv.0+0x320>
  tp->queue.prev             = cp->queue.prev;
 8004b68:	684a      	ldr	r2, [r1, #4]
 8004b6a:	e9c3 1200 	strd	r1, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8004b6e:	6013      	str	r3, [r2, #0]
  cp->queue.prev             = tp;
 8004b70:	604b      	str	r3, [r1, #4]
  return tp;
 8004b72:	e708      	b.n	8004986 <rt_test_005_006_execute.lto_priv.0+0x146>
 8004b74:	200010d1 	.word	0x200010d1
 8004b78:	200010d0 	.word	0x200010d0
 8004b7c:	200010cc 	.word	0x200010cc
 8004b80:	0800b43c 	.word	0x0800b43c
 8004b84:	200011c0 	.word	0x200011c0
	...

08004b90 <rt_test_006_007_execute.lto_priv.0>:
static void rt_test_006_007_execute(void) {
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8004b92:	4c59      	ldr	r4, [pc, #356]	@ (8004cf8 <rt_test_006_007_execute.lto_priv.0+0x168>)
  test_set_step(1);
 8004b94:	4f59      	ldr	r7, [pc, #356]	@ (8004cfc <rt_test_006_007_execute.lto_priv.0+0x16c>)
  return chThdGetSelfX()->prio;
 8004b96:	69a3      	ldr	r3, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8004b98:	4859      	ldr	r0, [pc, #356]	@ (8004d00 <rt_test_006_007_execute.lto_priv.0+0x170>)
 8004b9a:	689e      	ldr	r6, [r3, #8]
 8004b9c:	4b59      	ldr	r3, [pc, #356]	@ (8004d04 <rt_test_006_007_execute.lto_priv.0+0x174>)
 8004b9e:	4d5a      	ldr	r5, [pc, #360]	@ (8004d08 <rt_test_006_007_execute.lto_priv.0+0x178>)
  test_set_step(1);
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	603a      	str	r2, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8004ba4:	1c71      	adds	r1, r6, #1
 8004ba6:	4a59      	ldr	r2, [pc, #356]	@ (8004d0c <rt_test_006_007_execute.lto_priv.0+0x17c>)
 8004ba8:	f005 ffca 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8004bac:	1cb1      	adds	r1, r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8004bae:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8004bb0:	4b57      	ldr	r3, [pc, #348]	@ (8004d10 <rt_test_006_007_execute.lto_priv.0+0x180>)
 8004bb2:	4a56      	ldr	r2, [pc, #344]	@ (8004d0c <rt_test_006_007_execute.lto_priv.0+0x17c>)
 8004bb4:	4857      	ldr	r0, [pc, #348]	@ (8004d14 <rt_test_006_007_execute.lto_priv.0+0x184>)
 8004bb6:	f005 ffc3 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8004bba:	1cf1      	adds	r1, r6, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8004bbc:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8004bbe:	4b56      	ldr	r3, [pc, #344]	@ (8004d18 <rt_test_006_007_execute.lto_priv.0+0x188>)
 8004bc0:	4a52      	ldr	r2, [pc, #328]	@ (8004d0c <rt_test_006_007_execute.lto_priv.0+0x17c>)
 8004bc2:	4856      	ldr	r0, [pc, #344]	@ (8004d1c <rt_test_006_007_execute.lto_priv.0+0x18c>)
 8004bc4:	f005 ffbc 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8004bc8:	1d31      	adds	r1, r6, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8004bca:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8004bcc:	4b54      	ldr	r3, [pc, #336]	@ (8004d20 <rt_test_006_007_execute.lto_priv.0+0x190>)
 8004bce:	4a4f      	ldr	r2, [pc, #316]	@ (8004d0c <rt_test_006_007_execute.lto_priv.0+0x17c>)
 8004bd0:	4854      	ldr	r0, [pc, #336]	@ (8004d24 <rt_test_006_007_execute.lto_priv.0+0x194>)
 8004bd2:	f005 ffb5 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8004bd6:	4b54      	ldr	r3, [pc, #336]	@ (8004d28 <rt_test_006_007_execute.lto_priv.0+0x198>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8004bd8:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8004bda:	4a4c      	ldr	r2, [pc, #304]	@ (8004d0c <rt_test_006_007_execute.lto_priv.0+0x17c>)
 8004bdc:	4853      	ldr	r0, [pc, #332]	@ (8004d2c <rt_test_006_007_execute.lto_priv.0+0x19c>)
 8004bde:	1d71      	adds	r1, r6, #5
 8004be0:	f005 ffae 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8004be4:	2302      	movs	r3, #2
 8004be6:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8004be8:	6128      	str	r0, [r5, #16]
 8004bea:	2320      	movs	r3, #32
 8004bec:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004bf0:	4a4f      	ldr	r2, [pc, #316]	@ (8004d30 <rt_test_006_007_execute.lto_priv.0+0x1a0>)
 8004bf2:	6810      	ldr	r0, [r2, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8004bf4:	4290      	cmp	r0, r2
 8004bf6:	d061      	beq.n	8004cbc <rt_test_006_007_execute.lto_priv.0+0x12c>
  tqp->next             = tp->queue.next;
 8004bf8:	6805      	ldr	r5, [r0, #0]
  } while (cp->prio >= tp->prio);
 8004bfa:	6886      	ldr	r6, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004bfc:	606a      	str	r2, [r5, #4]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6243      	str	r3, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004c02:	f880 3020 	strb.w	r3, [r0, #32]
  tqp->next             = tp->queue.next;
 8004c06:	6015      	str	r5, [r2, #0]
  cp = (thread_t *)&ch.rlist.queue;
 8004c08:	4623      	mov	r3, r4
    cp = cp->queue.next;
 8004c0a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004c0c:	6899      	ldr	r1, [r3, #8]
 8004c0e:	42b1      	cmp	r1, r6
 8004c10:	d2fb      	bcs.n	8004c0a <rt_test_006_007_execute.lto_priv.0+0x7a>
  tp->queue.prev             = cp->queue.prev;
 8004c12:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
 8004c14:	6003      	str	r3, [r0, #0]
  if (queue_notempty(&cp->queue)) {
 8004c16:	4295      	cmp	r5, r2
  tp->queue.prev             = cp->queue.prev;
 8004c18:	6041      	str	r1, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8004c1a:	6008      	str	r0, [r1, #0]
  cp->queue.prev             = tp;
 8004c1c:	6058      	str	r0, [r3, #4]
 8004c1e:	d04d      	beq.n	8004cbc <rt_test_006_007_execute.lto_priv.0+0x12c>
 8004c20:	6828      	ldr	r0, [r5, #0]
  } while (cp->prio >= tp->prio);
 8004c22:	68ae      	ldr	r6, [r5, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004c24:	6042      	str	r2, [r0, #4]
    tp->u.rdymsg = MSG_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	626b      	str	r3, [r5, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004c2a:	f885 3020 	strb.w	r3, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8004c2e:	4b32      	ldr	r3, [pc, #200]	@ (8004cf8 <rt_test_006_007_execute.lto_priv.0+0x168>)
  tqp->next             = tp->queue.next;
 8004c30:	6010      	str	r0, [r2, #0]
    cp = cp->queue.next;
 8004c32:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004c34:	6899      	ldr	r1, [r3, #8]
 8004c36:	42b1      	cmp	r1, r6
 8004c38:	d2fb      	bcs.n	8004c32 <rt_test_006_007_execute.lto_priv.0+0xa2>
  tp->queue.prev             = cp->queue.prev;
 8004c3a:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
 8004c3c:	602b      	str	r3, [r5, #0]
  if (queue_notempty(&cp->queue)) {
 8004c3e:	4290      	cmp	r0, r2
  tp->queue.prev             = cp->queue.prev;
 8004c40:	6069      	str	r1, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8004c42:	600d      	str	r5, [r1, #0]
  cp->queue.prev             = tp;
 8004c44:	605d      	str	r5, [r3, #4]
 8004c46:	d039      	beq.n	8004cbc <rt_test_006_007_execute.lto_priv.0+0x12c>
 8004c48:	6805      	ldr	r5, [r0, #0]
  } while (cp->prio >= tp->prio);
 8004c4a:	6886      	ldr	r6, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004c4c:	606a      	str	r2, [r5, #4]
    tp->u.rdymsg = MSG_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6243      	str	r3, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004c52:	f880 3020 	strb.w	r3, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8004c56:	4b28      	ldr	r3, [pc, #160]	@ (8004cf8 <rt_test_006_007_execute.lto_priv.0+0x168>)
  tqp->next             = tp->queue.next;
 8004c58:	6015      	str	r5, [r2, #0]
    cp = cp->queue.next;
 8004c5a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004c5c:	6899      	ldr	r1, [r3, #8]
 8004c5e:	42b1      	cmp	r1, r6
 8004c60:	d2fb      	bcs.n	8004c5a <rt_test_006_007_execute.lto_priv.0+0xca>
  tp->queue.prev             = cp->queue.prev;
 8004c62:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
 8004c64:	6003      	str	r3, [r0, #0]
  if (queue_notempty(&cp->queue)) {
 8004c66:	4295      	cmp	r5, r2
  tp->queue.prev             = cp->queue.prev;
 8004c68:	6041      	str	r1, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8004c6a:	6008      	str	r0, [r1, #0]
  cp->queue.prev             = tp;
 8004c6c:	6058      	str	r0, [r3, #4]
 8004c6e:	d025      	beq.n	8004cbc <rt_test_006_007_execute.lto_priv.0+0x12c>
 8004c70:	6828      	ldr	r0, [r5, #0]
  } while (cp->prio >= tp->prio);
 8004c72:	68ae      	ldr	r6, [r5, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004c74:	6042      	str	r2, [r0, #4]
    tp->u.rdymsg = MSG_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	626b      	str	r3, [r5, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004c7a:	f885 3020 	strb.w	r3, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf8 <rt_test_006_007_execute.lto_priv.0+0x168>)
  tqp->next             = tp->queue.next;
 8004c80:	6010      	str	r0, [r2, #0]
    cp = cp->queue.next;
 8004c82:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004c84:	6899      	ldr	r1, [r3, #8]
 8004c86:	42b1      	cmp	r1, r6
 8004c88:	d2fb      	bcs.n	8004c82 <rt_test_006_007_execute.lto_priv.0+0xf2>
  tp->queue.prev             = cp->queue.prev;
 8004c8a:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
 8004c8c:	602b      	str	r3, [r5, #0]
  if (queue_notempty(&cp->queue)) {
 8004c8e:	4290      	cmp	r0, r2
  tp->queue.prev             = cp->queue.prev;
 8004c90:	6069      	str	r1, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8004c92:	600d      	str	r5, [r1, #0]
  cp->queue.prev             = tp;
 8004c94:	605d      	str	r5, [r3, #4]
 8004c96:	d011      	beq.n	8004cbc <rt_test_006_007_execute.lto_priv.0+0x12c>
 8004c98:	6803      	ldr	r3, [r0, #0]
 8004c9a:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004c9c:	605a      	str	r2, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 8004c9e:	2500      	movs	r5, #0
  } while (cp->prio >= tp->prio);
 8004ca0:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8004ca2:	4b15      	ldr	r3, [pc, #84]	@ (8004cf8 <rt_test_006_007_execute.lto_priv.0+0x168>)
 8004ca4:	6245      	str	r5, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004ca6:	f880 5020 	strb.w	r5, [r0, #32]
    cp = cp->queue.next;
 8004caa:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	428a      	cmp	r2, r1
 8004cb0:	d2fb      	bcs.n	8004caa <rt_test_006_007_execute.lto_priv.0+0x11a>
  tp->queue.prev             = cp->queue.prev;
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8004cb8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8004cba:	6058      	str	r0, [r3, #4]
  return firstprio(&ch.rlist.queue) > currp->prio;
 8004cbc:	6822      	ldr	r2, [r4, #0]
 8004cbe:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d814      	bhi.n	8004cf2 <rt_test_006_007_execute.lto_priv.0+0x162>
 8004cc8:	2600      	movs	r6, #0
 8004cca:	f386 8811 	msr	BASEPRI, r6
 8004cce:	4c0e      	ldr	r4, [pc, #56]	@ (8004d08 <rt_test_006_007_execute.lto_priv.0+0x178>)
 8004cd0:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8004cd4:	f854 0b04 	ldr.w	r0, [r4], #4
 8004cd8:	b118      	cbz	r0, 8004ce2 <rt_test_006_007_execute.lto_priv.0+0x152>
      chThdWait(threads[i]);
 8004cda:	f006 f9d9 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8004cde:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004ce2:	42a5      	cmp	r5, r4
 8004ce4:	d1f6      	bne.n	8004cd4 <rt_test_006_007_execute.lto_priv.0+0x144>
}
 8004ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8004cea:	4912      	ldr	r1, [pc, #72]	@ (8004d34 <rt_test_006_007_execute.lto_priv.0+0x1a4>)
 8004cec:	4812      	ldr	r0, [pc, #72]	@ (8004d38 <rt_test_006_007_execute.lto_priv.0+0x1a8>)
 8004cee:	f7fb bf1f 	b.w	8000b30 <_test_assert_sequence>
    chSchDoRescheduleAhead();
 8004cf2:	f7ff f92d 	bl	8003f50 <chSchDoReschedule>
 8004cf6:	e7e7      	b.n	8004cc8 <rt_test_006_007_execute.lto_priv.0+0x138>
 8004cf8:	200011c0 	.word	0x200011c0
 8004cfc:	200010b4 	.word	0x200010b4
 8004d00:	20000a08 	.word	0x20000a08
 8004d04:	0800b1d4 	.word	0x0800b1d4
 8004d08:	200010a0 	.word	0x200010a0
 8004d0c:	08005551 	.word	0x08005551
 8004d10:	0800b1c0 	.word	0x0800b1c0
 8004d14:	20000b50 	.word	0x20000b50
 8004d18:	0800b1c4 	.word	0x0800b1c4
 8004d1c:	20000c98 	.word	0x20000c98
 8004d20:	0800b1c8 	.word	0x0800b1c8
 8004d24:	20000de0 	.word	0x20000de0
 8004d28:	0800b1cc 	.word	0x0800b1cc
 8004d2c:	20000f28 	.word	0x20000f28
 8004d30:	200008b8 	.word	0x200008b8
 8004d34:	0800b170 	.word	0x0800b170
 8004d38:	0800b1d0 	.word	0x0800b1d0
 8004d3c:	00000000 	.word	0x00000000

08004d40 <rt_test_006_008_execute.lto_priv.0>:
static void rt_test_006_008_execute(void) {
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8004d42:	4e39      	ldr	r6, [pc, #228]	@ (8004e28 <rt_test_006_008_execute.lto_priv.0+0xe8>)
  test_set_step(1);
 8004d44:	4f39      	ldr	r7, [pc, #228]	@ (8004e2c <rt_test_006_008_execute.lto_priv.0+0xec>)
  return chThdGetSelfX()->prio;
 8004d46:	69b3      	ldr	r3, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8004d48:	4839      	ldr	r0, [pc, #228]	@ (8004e30 <rt_test_006_008_execute.lto_priv.0+0xf0>)
 8004d4a:	689d      	ldr	r5, [r3, #8]
 8004d4c:	4b39      	ldr	r3, [pc, #228]	@ (8004e34 <rt_test_006_008_execute.lto_priv.0+0xf4>)
 8004d4e:	4c3a      	ldr	r4, [pc, #232]	@ (8004e38 <rt_test_006_008_execute.lto_priv.0+0xf8>)
  test_set_step(1);
 8004d50:	2201      	movs	r2, #1
 8004d52:	603a      	str	r2, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8004d54:	1c69      	adds	r1, r5, #1
 8004d56:	4a39      	ldr	r2, [pc, #228]	@ (8004e3c <rt_test_006_008_execute.lto_priv.0+0xfc>)
 8004d58:	f005 fef2 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8004d5c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8004d5e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8004d60:	4b37      	ldr	r3, [pc, #220]	@ (8004e40 <rt_test_006_008_execute.lto_priv.0+0x100>)
 8004d62:	4a36      	ldr	r2, [pc, #216]	@ (8004e3c <rt_test_006_008_execute.lto_priv.0+0xfc>)
 8004d64:	4837      	ldr	r0, [pc, #220]	@ (8004e44 <rt_test_006_008_execute.lto_priv.0+0x104>)
 8004d66:	f005 feeb 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8004d6a:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8004d6c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8004d6e:	4b36      	ldr	r3, [pc, #216]	@ (8004e48 <rt_test_006_008_execute.lto_priv.0+0x108>)
 8004d70:	4a32      	ldr	r2, [pc, #200]	@ (8004e3c <rt_test_006_008_execute.lto_priv.0+0xfc>)
 8004d72:	4836      	ldr	r0, [pc, #216]	@ (8004e4c <rt_test_006_008_execute.lto_priv.0+0x10c>)
 8004d74:	f005 fee4 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8004d78:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8004d7a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8004d7c:	4b34      	ldr	r3, [pc, #208]	@ (8004e50 <rt_test_006_008_execute.lto_priv.0+0x110>)
 8004d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e3c <rt_test_006_008_execute.lto_priv.0+0xfc>)
 8004d80:	4834      	ldr	r0, [pc, #208]	@ (8004e54 <rt_test_006_008_execute.lto_priv.0+0x114>)
 8004d82:	f005 fedd 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8004d86:	4b34      	ldr	r3, [pc, #208]	@ (8004e58 <rt_test_006_008_execute.lto_priv.0+0x118>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8004d88:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8004d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004e3c <rt_test_006_008_execute.lto_priv.0+0xfc>)
 8004d8c:	4833      	ldr	r0, [pc, #204]	@ (8004e5c <rt_test_006_008_execute.lto_priv.0+0x11c>)
 8004d8e:	1d69      	adds	r1, r5, #5
 8004d90:	f005 fed6 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8004d94:	2302      	movs	r3, #2
 8004d96:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8004d98:	6120      	str	r0, [r4, #16]
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004da0:	4d2f      	ldr	r5, [pc, #188]	@ (8004e60 <rt_test_006_008_execute.lto_priv.0+0x120>)
 8004da2:	682c      	ldr	r4, [r5, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 8004da4:	42ac      	cmp	r4, r5
 8004da6:	d020      	beq.n	8004dea <rt_test_006_008_execute.lto_priv.0+0xaa>
  tp->state = CH_STATE_READY;
 8004da8:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8004dac:	f06f 0701 	mvn.w	r7, #1
 8004db0:	4620      	mov	r0, r4
  tqp->next             = tp->queue.next;
 8004db2:	6824      	ldr	r4, [r4, #0]
  cp = (thread_t *)&ch.rlist.queue;
 8004db4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <rt_test_006_008_execute.lto_priv.0+0xe8>)
  } while (cp->prio >= tp->prio);
 8004db6:	6881      	ldr	r1, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004db8:	6065      	str	r5, [r4, #4]
  tp->state = CH_STATE_READY;
 8004dba:	f880 c020 	strb.w	ip, [r0, #32]
    cp = cp->queue.next;
 8004dbe:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	428a      	cmp	r2, r1
 8004dc4:	d2fb      	bcs.n	8004dbe <rt_test_006_008_execute.lto_priv.0+0x7e>
  tp->queue.prev             = cp->queue.prev;
 8004dc6:	685a      	ldr	r2, [r3, #4]
  while (queue_notempty(&cp->queue)) {
 8004dc8:	42ac      	cmp	r4, r5
 8004dca:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8004dce:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8004dd0:	6058      	str	r0, [r3, #4]
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8004dd2:	6247      	str	r7, [r0, #36]	@ 0x24
  while (queue_notempty(&cp->queue)) {
 8004dd4:	d1ec      	bne.n	8004db0 <rt_test_006_008_execute.lto_priv.0+0x70>
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	e9c4 4400 	strd	r4, r4, [r4]
 8004ddc:	f880 1020 	strb.w	r1, [r0, #32]
 8004de0:	e9c0 3200 	strd	r3, r2, [r0]
 8004de4:	6010      	str	r0, [r2, #0]
 8004de6:	6058      	str	r0, [r3, #4]
 8004de8:	6247      	str	r7, [r0, #36]	@ 0x24
  return firstprio(&ch.rlist.queue) > currp->prio;
 8004dea:	6832      	ldr	r2, [r6, #0]
 8004dec:	69b3      	ldr	r3, [r6, #24]
  if (chSchIsRescRequiredI()) {
 8004dee:	6892      	ldr	r2, [r2, #8]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d814      	bhi.n	8004e20 <rt_test_006_008_execute.lto_priv.0+0xe0>
 8004df6:	2600      	movs	r6, #0
 8004df8:	f386 8811 	msr	BASEPRI, r6
 8004dfc:	4c0e      	ldr	r4, [pc, #56]	@ (8004e38 <rt_test_006_008_execute.lto_priv.0+0xf8>)
 8004dfe:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8004e02:	f854 0b04 	ldr.w	r0, [r4], #4
 8004e06:	b118      	cbz	r0, 8004e10 <rt_test_006_008_execute.lto_priv.0+0xd0>
      chThdWait(threads[i]);
 8004e08:	f006 f942 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8004e0c:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004e10:	42ac      	cmp	r4, r5
 8004e12:	d1f6      	bne.n	8004e02 <rt_test_006_008_execute.lto_priv.0+0xc2>
}
 8004e14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8004e18:	4912      	ldr	r1, [pc, #72]	@ (8004e64 <rt_test_006_008_execute.lto_priv.0+0x124>)
 8004e1a:	4813      	ldr	r0, [pc, #76]	@ (8004e68 <rt_test_006_008_execute.lto_priv.0+0x128>)
 8004e1c:	f7fb be88 	b.w	8000b30 <_test_assert_sequence>
    chSchDoRescheduleAhead();
 8004e20:	f7ff f896 	bl	8003f50 <chSchDoReschedule>
 8004e24:	e7e7      	b.n	8004df6 <rt_test_006_008_execute.lto_priv.0+0xb6>
 8004e26:	bf00      	nop
 8004e28:	200011c0 	.word	0x200011c0
 8004e2c:	200010b4 	.word	0x200010b4
 8004e30:	20000a08 	.word	0x20000a08
 8004e34:	0800b1d4 	.word	0x0800b1d4
 8004e38:	200010a0 	.word	0x200010a0
 8004e3c:	08005551 	.word	0x08005551
 8004e40:	0800b1c0 	.word	0x0800b1c0
 8004e44:	20000b50 	.word	0x20000b50
 8004e48:	0800b1c4 	.word	0x0800b1c4
 8004e4c:	20000c98 	.word	0x20000c98
 8004e50:	0800b1c8 	.word	0x0800b1c8
 8004e54:	20000de0 	.word	0x20000de0
 8004e58:	0800b1cc 	.word	0x0800b1cc
 8004e5c:	20000f28 	.word	0x20000f28
 8004e60:	200008b8 	.word	0x200008b8
 8004e64:	0800b170 	.word	0x0800b170
 8004e68:	0800b1d0 	.word	0x0800b1d0
 8004e6c:	00000000 	.word	0x00000000

08004e70 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4604      	mov	r4, r0
 8004e74:	2520      	movs	r5, #32
 8004e76:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004e7a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004e7e:	2008      	movs	r0, #8
 8004e80:	f7fd fff6 	bl	8002e70 <chSchGoSleepTimeoutS>
 8004e84:	2300      	movs	r3, #0
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f385 8811 	msr	BASEPRI, r5
  tp->epending |= events;
 8004e8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004e90:	f894 2020 	ldrb.w	r2, [r4, #32]
  tp->epending |= events;
 8004e94:	f043 0301 	orr.w	r3, r3, #1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004e98:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8004e9a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004e9c:	d020      	beq.n	8004ee0 <evt_thread3+0x70>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8004e9e:	2a0b      	cmp	r2, #11
 8004ea0:	d00a      	beq.n	8004eb8 <evt_thread3+0x48>
 8004ea2:	4914      	ldr	r1, [pc, #80]	@ (8004ef4 <evt_thread3+0x84>)
 8004ea4:	680a      	ldr	r2, [r1, #0]
 8004ea6:	698b      	ldr	r3, [r1, #24]
  if (chSchIsRescRequiredI()) {
 8004ea8:	6892      	ldr	r2, [r2, #8]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d81b      	bhi.n	8004ee8 <evt_thread3+0x78>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f383 8811 	msr	BASEPRI, r3
}
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8004eb8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8004eba:	439a      	bics	r2, r3
 8004ebc:	d1f1      	bne.n	8004ea2 <evt_thread3+0x32>
  cp = (thread_t *)&ch.rlist.queue;
 8004ebe:	490d      	ldr	r1, [pc, #52]	@ (8004ef4 <evt_thread3+0x84>)
  } while (cp->prio >= tp->prio);
 8004ec0:	68a0      	ldr	r0, [r4, #8]
    tp->u.rdymsg = MSG_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6263      	str	r3, [r4, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8004ec6:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8004eca:	460b      	mov	r3, r1
    cp = cp->queue.next;
 8004ecc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	4282      	cmp	r2, r0
 8004ed2:	d2fb      	bcs.n	8004ecc <evt_thread3+0x5c>
  tp->queue.prev             = cp->queue.prev;
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8004eda:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8004edc:	605c      	str	r4, [r3, #4]
  return tp;
 8004ede:	e7e1      	b.n	8004ea4 <evt_thread3+0x34>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8004ee0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004ee2:	4213      	tst	r3, r2
 8004ee4:	d1eb      	bne.n	8004ebe <evt_thread3+0x4e>
 8004ee6:	e7dc      	b.n	8004ea2 <evt_thread3+0x32>
    chSchDoRescheduleAhead();
 8004ee8:	f7ff f832 	bl	8003f50 <chSchDoReschedule>
 8004eec:	2300      	movs	r3, #0
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	200011c0 	.word	0x200011c0
	...

08004f00 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	2320      	movs	r3, #32
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	4c18      	ldr	r4, [pc, #96]	@ (8004f6c <evt_thread7+0x6c>)
  chEvtBroadcastFlagsI(esp, flags);
 8004f0a:	4819      	ldr	r0, [pc, #100]	@ (8004f70 <evt_thread7+0x70>)
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f7fb fd7f 	bl	8000a10 <chEvtBroadcastFlagsI>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d81c      	bhi.n	8004f58 <evt_thread7+0x58>
 8004f1e:	2500      	movs	r5, #0
 8004f20:	f385 8811 	msr	BASEPRI, r5
 8004f24:	2620      	movs	r6, #32
 8004f26:	f386 8811 	msr	BASEPRI, r6
 8004f2a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004f2e:	2008      	movs	r0, #8
 8004f30:	f7fd ff9e 	bl	8002e70 <chSchGoSleepTimeoutS>
 8004f34:	f385 8811 	msr	BASEPRI, r5
 8004f38:	f386 8811 	msr	BASEPRI, r6
 8004f3c:	480d      	ldr	r0, [pc, #52]	@ (8004f74 <evt_thread7+0x74>)
 8004f3e:	4629      	mov	r1, r5
 8004f40:	f7fb fd66 	bl	8000a10 <chEvtBroadcastFlagsI>
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	69a3      	ldr	r3, [r4, #24]
 8004f48:	6892      	ldr	r2, [r2, #8]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d806      	bhi.n	8004f5e <evt_thread7+0x5e>
 8004f50:	2300      	movs	r3, #0
 8004f52:	f383 8811 	msr	BASEPRI, r3
}
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 8004f58:	f7fe fffa 	bl	8003f50 <chSchDoReschedule>
 8004f5c:	e7df      	b.n	8004f1e <evt_thread7+0x1e>
 8004f5e:	f7fe fff7 	bl	8003f50 <chSchDoReschedule>
 8004f62:	2300      	movs	r3, #0
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200011c0 	.word	0x200011c0
 8004f70:	200008b4 	.word	0x200008b4
 8004f74:	200008b0 	.word	0x200008b0
	...

08004f80 <oslib_test_003_002_execute.lto_priv.0>:
static void oslib_test_003_002_execute(void) {
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8004f84:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 80050dc <oslib_test_003_002_execute.lto_priv.0+0x15c>
 8004f88:	4d55      	ldr	r5, [pc, #340]	@ (80050e0 <oslib_test_003_002_execute.lto_priv.0+0x160>)
 8004f8a:	4c56      	ldr	r4, [pc, #344]	@ (80050e4 <oslib_test_003_002_execute.lto_priv.0+0x164>)
 8004f8c:	4f56      	ldr	r7, [pc, #344]	@ (80050e8 <oslib_test_003_002_execute.lto_priv.0+0x168>)
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f8c8 3000 	str.w	r3, [r8]
 8004f94:	2604      	movs	r6, #4
 8004f96:	f04f 0a20 	mov.w	sl, #32
 8004f9a:	f04f 0900 	mov.w	r9, #0
 8004f9e:	e005      	b.n	8004fac <oslib_test_003_002_execute.lto_priv.0+0x2c>
 8004fa0:	f389 8811 	msr	BASEPRI, r9
  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
    chGuardedPoolAdd(gmp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004fa4:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 8004fa6:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004fa8:	441d      	add	r5, r3
  while (n != 0U) {
 8004faa:	d017      	beq.n	8004fdc <oslib_test_003_002_execute.lto_priv.0+0x5c>
 8004fac:	f38a 8811 	msr	BASEPRI, sl
  php->next = mp->next;
 8004fb0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	e9c4 3502 	strd	r3, r5, [r4, #8]
 8004fbc:	602a      	str	r2, [r5, #0]
 8004fbe:	dd58      	ble.n	8005072 <oslib_test_003_002_execute.lto_priv.0+0xf2>
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
  if (chSchIsRescRequiredI()) {
 8004fc4:	6892      	ldr	r2, [r2, #8]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d9e9      	bls.n	8004fa0 <oslib_test_003_002_execute.lto_priv.0+0x20>
    chSchDoRescheduleAhead();
 8004fcc:	f7fe ffc0 	bl	8003f50 <chSchDoReschedule>
 8004fd0:	f389 8811 	msr	BASEPRI, r9
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004fd4:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 8004fd6:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004fd8:	441d      	add	r5, r3
  while (n != 0U) {
 8004fda:	d1e7      	bne.n	8004fac <oslib_test_003_002_execute.lto_priv.0+0x2c>
  test_set_step(2);
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f8c8 3000 	str.w	r3, [r8]
 8004fe2:	2504      	movs	r5, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f005 fa33 	bl	800a450 <chGuardedPoolAllocTimeout.constprop.0>
  if (!condition)
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d055      	beq.n	800509a <oslib_test_003_002_execute.lto_priv.0+0x11a>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8004fee:	3d01      	subs	r5, #1
 8004ff0:	d1f8      	bne.n	8004fe4 <oslib_test_003_002_execute.lto_priv.0+0x64>
  test_set_step(3);
 8004ff2:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004ff4:	4628      	mov	r0, r5
  test_set_step(3);
 8004ff6:	f8c8 3000 	str.w	r3, [r8]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004ffa:	f005 fa29 	bl	800a450 <chGuardedPoolAllocTimeout.constprop.0>
 8004ffe:	bb70      	cbnz	r0, 800505e <oslib_test_003_002_execute.lto_priv.0+0xde>
  test_set_step(4);
 8005000:	4e37      	ldr	r6, [pc, #220]	@ (80050e0 <oslib_test_003_002_execute.lto_priv.0+0x160>)
 8005002:	2304      	movs	r3, #4
 8005004:	f8c8 3000 	str.w	r3, [r8]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005008:	f106 0a10 	add.w	sl, r6, #16
 800500c:	f04f 0920 	mov.w	r9, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 8005010:	4631      	mov	r1, r6
 8005012:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 8005016:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800501a:	3301      	adds	r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	e9c4 3102 	strd	r3, r1, [r4, #8]
 8005022:	f846 2b04 	str.w	r2, [r6], #4
 8005026:	dd45      	ble.n	80050b4 <oslib_test_003_002_execute.lto_priv.0+0x134>
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	69bb      	ldr	r3, [r7, #24]
  if (chSchIsRescRequiredI()) {
 800502c:	6892      	ldr	r2, [r2, #8]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	429a      	cmp	r2, r3
 8005032:	d83c      	bhi.n	80050ae <oslib_test_003_002_execute.lto_priv.0+0x12e>
 8005034:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005038:	45b2      	cmp	sl, r6
 800503a:	d1e9      	bne.n	8005010 <oslib_test_003_002_execute.lto_priv.0+0x90>
  test_set_step(5);
 800503c:	2305      	movs	r3, #5
 800503e:	f8c8 3000 	str.w	r3, [r8]
 8005042:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005044:	2000      	movs	r0, #0
 8005046:	f005 fa03 	bl	800a450 <chGuardedPoolAllocTimeout.constprop.0>
 800504a:	b330      	cbz	r0, 800509a <oslib_test_003_002_execute.lto_priv.0+0x11a>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800504c:	3c01      	subs	r4, #1
 800504e:	d1f9      	bne.n	8005044 <oslib_test_003_002_execute.lto_priv.0+0xc4>
  test_set_step(6);
 8005050:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005052:	4620      	mov	r0, r4
  test_set_step(6);
 8005054:	f8c8 3000 	str.w	r3, [r8]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005058:	f005 f9fa 	bl	800a450 <chGuardedPoolAllocTimeout.constprop.0>
 800505c:	b328      	cbz	r0, 80050aa <oslib_test_003_002_execute.lto_priv.0+0x12a>
  test_local_fail      = true;
 800505e:	4c23      	ldr	r4, [pc, #140]	@ (80050ec <oslib_test_003_002_execute.lto_priv.0+0x16c>)
  test_global_fail     = true;
 8005060:	4823      	ldr	r0, [pc, #140]	@ (80050f0 <oslib_test_003_002_execute.lto_priv.0+0x170>)
  test_failure_message = msg;
 8005062:	4a24      	ldr	r2, [pc, #144]	@ (80050f4 <oslib_test_003_002_execute.lto_priv.0+0x174>)
 8005064:	4924      	ldr	r1, [pc, #144]	@ (80050f8 <oslib_test_003_002_execute.lto_priv.0+0x178>)
 8005066:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8005068:	2301      	movs	r3, #1
 800506a:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800506c:	7003      	strb	r3, [r0, #0]
}
 800506e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  thread_t *tp = tqp->next;
 8005072:	6820      	ldr	r0, [r4, #0]
  cp = (thread_t *)&ch.rlist.queue;
 8005074:	4a1c      	ldr	r2, [pc, #112]	@ (80050e8 <oslib_test_003_002_execute.lto_priv.0+0x168>)
  tqp->next             = tp->queue.next;
 8005076:	6803      	ldr	r3, [r0, #0]
  } while (cp->prio >= tp->prio);
 8005078:	6881      	ldr	r1, [r0, #8]
 800507a:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800507c:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 800507e:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8005082:	f880 9020 	strb.w	r9, [r0, #32]
    cp = cp->queue.next;
 8005086:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8005088:	6893      	ldr	r3, [r2, #8]
 800508a:	428b      	cmp	r3, r1
 800508c:	d2fb      	bcs.n	8005086 <oslib_test_003_002_execute.lto_priv.0+0x106>
  tp->queue.prev             = cp->queue.prev;
 800508e:	6853      	ldr	r3, [r2, #4]
 8005090:	e9c0 2300 	strd	r2, r3, [r0]
  tp->queue.prev->queue.next = tp;
 8005094:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8005096:	6050      	str	r0, [r2, #4]
  return tp;
 8005098:	e792      	b.n	8004fc0 <oslib_test_003_002_execute.lto_priv.0+0x40>
  test_local_fail      = true;
 800509a:	4c14      	ldr	r4, [pc, #80]	@ (80050ec <oslib_test_003_002_execute.lto_priv.0+0x16c>)
  test_global_fail     = true;
 800509c:	4814      	ldr	r0, [pc, #80]	@ (80050f0 <oslib_test_003_002_execute.lto_priv.0+0x170>)
  test_failure_message = msg;
 800509e:	4a15      	ldr	r2, [pc, #84]	@ (80050f4 <oslib_test_003_002_execute.lto_priv.0+0x174>)
 80050a0:	4916      	ldr	r1, [pc, #88]	@ (80050fc <oslib_test_003_002_execute.lto_priv.0+0x17c>)
 80050a2:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80050a4:	2301      	movs	r3, #1
 80050a6:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80050a8:	7003      	strb	r3, [r0, #0]
 80050aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    chSchDoRescheduleAhead();
 80050ae:	f7fe ff4f 	bl	8003f50 <chSchDoReschedule>
 80050b2:	e7bf      	b.n	8005034 <oslib_test_003_002_execute.lto_priv.0+0xb4>
  thread_t *tp = tqp->next;
 80050b4:	6820      	ldr	r0, [r4, #0]
  cp = (thread_t *)&ch.rlist.queue;
 80050b6:	4a0c      	ldr	r2, [pc, #48]	@ (80050e8 <oslib_test_003_002_execute.lto_priv.0+0x168>)
  tqp->next             = tp->queue.next;
 80050b8:	6803      	ldr	r3, [r0, #0]
  } while (cp->prio >= tp->prio);
 80050ba:	6881      	ldr	r1, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 80050bc:	605c      	str	r4, [r3, #4]
  tqp->next             = tp->queue.next;
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	6245      	str	r5, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 80050c2:	f880 5020 	strb.w	r5, [r0, #32]
    cp = cp->queue.next;
 80050c6:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80050c8:	6893      	ldr	r3, [r2, #8]
 80050ca:	428b      	cmp	r3, r1
 80050cc:	d2fb      	bcs.n	80050c6 <oslib_test_003_002_execute.lto_priv.0+0x146>
  tp->queue.prev             = cp->queue.prev;
 80050ce:	6853      	ldr	r3, [r2, #4]
  tp->queue.next             = cp;
 80050d0:	6002      	str	r2, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80050d2:	6043      	str	r3, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80050d4:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 80050d6:	6050      	str	r0, [r2, #4]
  return tp;
 80050d8:	e7a6      	b.n	8005028 <oslib_test_003_002_execute.lto_priv.0+0xa8>
 80050da:	bf00      	nop
 80050dc:	200010b4 	.word	0x200010b4
 80050e0:	2000097c 	.word	0x2000097c
 80050e4:	20000808 	.word	0x20000808
 80050e8:	200011c0 	.word	0x200011c0
 80050ec:	200010d1 	.word	0x200010d1
 80050f0:	200010d0 	.word	0x200010d0
 80050f4:	200010cc 	.word	0x200010cc
 80050f8:	0800b194 	.word	0x0800b194
 80050fc:	0800b188 	.word	0x0800b188

08005100 <chThdCreateSuspendedI>:
  tp->wabase = tdp->wbase;
 8005100:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8005104:	b470      	push	{r4, r5, r6}
 8005106:	4602      	mov	r2, r0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005108:	4c19      	ldr	r4, [pc, #100]	@ (8005170 <chThdCreateSuspendedI+0x70>)
 800510a:	6900      	ldr	r0, [r0, #16]
  tp->wabase = tdp->wbase;
 800510c:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->state     = CH_STATE_WTSTART;
 8005110:	2602      	movs	r6, #2
  REG_INSERT(tp);
 8005112:	4918      	ldr	r1, [pc, #96]	@ (8005174 <chThdCreateSuspendedI+0x74>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005114:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8005118:	f843 4c4c 	str.w	r4, [r3, #-76]
  tp->refs      = (trefs_t)1;
 800511c:	2501      	movs	r5, #1
  return _thread_init(tp, tdp->name, tdp->prio);
 800511e:	6814      	ldr	r4, [r2, #0]
 8005120:	68d2      	ldr	r2, [r2, #12]
  tp->state     = CH_STATE_WTSTART;
 8005122:	f823 6c28 	strh.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8005126:	f803 5c26 	strb.w	r5, [r3, #-38]
  tp->prio      = prio;
 800512a:	f843 2c40 	str.w	r2, [r3, #-64]
  tp->realprio  = prio;
 800512e:	f843 2c0c 	str.w	r2, [r3, #-12]
  tp->name      = name;
 8005132:	f843 4c30 	str.w	r4, [r3, #-48]
  tp->mtxlist   = NULL;
 8005136:	2200      	movs	r2, #0
  REG_INSERT(tp);
 8005138:	694c      	ldr	r4, [r1, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800513a:	f843 0c6c 	str.w	r0, [r3, #-108]
  tp->epending  = (eventmask_t)0;
 800513e:	e943 2205 	strd	r2, r2, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8005142:	f1a3 0048 	sub.w	r0, r3, #72	@ 0x48
  list_init(&tp->waiting);
 8005146:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 800514a:	f1a3 021c 	sub.w	r2, r3, #28
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800514e:	f1a3 066c 	sub.w	r6, r3, #108	@ 0x6c
  REG_INSERT(tp);
 8005152:	e943 140e 	strd	r1, r4, [r3, #-56]	@ 0x38
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005156:	f843 6c3c 	str.w	r6, [r3, #-60]
 800515a:	f843 cc68 	str.w	ip, [r3, #-104]
  REG_INSERT(tp);
 800515e:	6120      	str	r0, [r4, #16]
 8005160:	6148      	str	r0, [r1, #20]
  tqp->next = (thread_t *)tqp;
 8005162:	e943 5208 	strd	r5, r2, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8005166:	f843 2c18 	str.w	r2, [r3, #-24]
}
 800516a:	bc70      	pop	{r4, r5, r6}
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	080002d1 	.word	0x080002d1
 8005174:	200011c0 	.word	0x200011c0
	...

08005180 <chThdExit>:
 8005180:	2320      	movs	r3, #32
 8005182:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8005186:	f7fc baab 	b.w	80016e0 <chThdExitS>
 800518a:	bf00      	nop
 800518c:	0000      	movs	r0, r0
	...

08005190 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8005190:	4a0e      	ldr	r2, [pc, #56]	@ (80051cc <chTMStopMeasurementX+0x3c>)
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8005192:	4b0f      	ldr	r3, [pc, #60]	@ (80051d0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8005194:	6881      	ldr	r1, [r0, #8]
 8005196:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8005198:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800519a:	6f54      	ldr	r4, [r2, #116]	@ 0x74
  tmp->cumulative += (rttime_t)tmp->last;
 800519c:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800519e:	1b1b      	subs	r3, r3, r4
 80051a0:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 80051a2:	18d2      	adds	r2, r2, r3
 80051a4:	6941      	ldr	r1, [r0, #20]
 80051a6:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 80051a8:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 80051aa:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80051ac:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 80051b0:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80051b2:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80051b4:	bf88      	it	hi
 80051b6:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80051b8:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 80051ba:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 80051bc:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80051c0:	6141      	str	r1, [r0, #20]
}
 80051c2:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 80051c4:	bf38      	it	cc
 80051c6:	6003      	strcc	r3, [r0, #0]
}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	200011c0 	.word	0x200011c0
 80051d0:	e0001000 	.word	0xe0001000
	...

080051e0 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 80051e0:	b4f0      	push	{r4, r5, r6, r7}
  if (mp->owner != NULL) {
 80051e2:	6883      	ldr	r3, [r0, #8]
  thread_t *ctp = currp;
 80051e4:	4d34      	ldr	r5, [pc, #208]	@ (80052b8 <chMtxLockS+0xd8>)
void chMtxLockS(mutex_t *mp) {
 80051e6:	4602      	mov	r2, r0
  thread_t *ctp = currp;
 80051e8:	69a9      	ldr	r1, [r5, #24]
  if (mp->owner != NULL) {
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d046      	beq.n	800527c <chMtxLockS+0x9c>
      while (tp->prio < ctp->prio) {
 80051ee:	688c      	ldr	r4, [r1, #8]
 80051f0:	6898      	ldr	r0, [r3, #8]
 80051f2:	42a0      	cmp	r0, r4
 80051f4:	d217      	bcs.n	8005226 <chMtxLockS+0x46>
        switch (tp->state) {
 80051f6:	f893 0020 	ldrb.w	r0, [r3, #32]
        tp->prio = ctp->prio;
 80051fa:	609c      	str	r4, [r3, #8]
        switch (tp->state) {
 80051fc:	2806      	cmp	r0, #6
 80051fe:	d043      	beq.n	8005288 <chMtxLockS+0xa8>
 8005200:	2807      	cmp	r0, #7
 8005202:	d02d      	beq.n	8005260 <chMtxLockS+0x80>
 8005204:	b978      	cbnz	r0, 8005226 <chMtxLockS+0x46>
  tp->queue.prev->queue.next = tp->queue.next;
 8005206:	e9d3 6700 	ldrd	r6, r7, [r3]
 800520a:	603e      	str	r6, [r7, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800520c:	6077      	str	r7, [r6, #4]
  tp->state = CH_STATE_READY;
 800520e:	f883 0020 	strb.w	r0, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8005212:	4829      	ldr	r0, [pc, #164]	@ (80052b8 <chMtxLockS+0xd8>)
    cp = cp->queue.next;
 8005214:	6800      	ldr	r0, [r0, #0]
  } while (cp->prio >= tp->prio);
 8005216:	6886      	ldr	r6, [r0, #8]
 8005218:	42b4      	cmp	r4, r6
 800521a:	d9fb      	bls.n	8005214 <chMtxLockS+0x34>
  tp->queue.next             = cp;
 800521c:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 800521e:	6844      	ldr	r4, [r0, #4]
 8005220:	605c      	str	r4, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8005222:	6023      	str	r3, [r4, #0]
  cp->queue.prev             = tp;
 8005224:	6043      	str	r3, [r0, #4]
  thread_t *cp = (thread_t *)tqp;
 8005226:	4613      	mov	r3, r2
 8005228:	e003      	b.n	8005232 <chMtxLockS+0x52>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800522a:	6888      	ldr	r0, [r1, #8]
 800522c:	689c      	ldr	r4, [r3, #8]
 800522e:	4284      	cmp	r4, r0
 8005230:	d302      	bcc.n	8005238 <chMtxLockS+0x58>
    cp = cp->queue.next;
 8005232:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005234:	429a      	cmp	r2, r3
 8005236:	d1f8      	bne.n	800522a <chMtxLockS+0x4a>
  tp->queue.prev             = cp->queue.prev;
 8005238:	6858      	ldr	r0, [r3, #4]
 800523a:	e9c1 3000 	strd	r3, r0, [r1]
  tp->queue.prev->queue.next = tp;
 800523e:	6001      	str	r1, [r0, #0]
  thread_t *tp = tqp->next;
 8005240:	6828      	ldr	r0, [r5, #0]
  cp->queue.prev             = tp;
 8005242:	6059      	str	r1, [r3, #4]
  otp->state = newstate;
 8005244:	2406      	movs	r4, #6
 8005246:	f881 4020 	strb.w	r4, [r1, #32]
  tqp->next             = tp->queue.next;
 800524a:	6803      	ldr	r3, [r0, #0]
 800524c:	602b      	str	r3, [r5, #0]
      ctp->u.wtmtxp = mp;
 800524e:	624a      	str	r2, [r1, #36]	@ 0x24
  tqp->next->queue.prev = (thread_t *)tqp;
 8005250:	605d      	str	r5, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8005252:	2301      	movs	r3, #1
 8005254:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005258:	61a8      	str	r0, [r5, #24]
}
 800525a:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(currp, otp);
 800525c:	f7fb b830 	b.w	80002c0 <_port_switch>
  tp->queue.prev->queue.next = tp->queue.next;
 8005260:	e9d3 0600 	ldrd	r0, r6, [r3]
 8005264:	6030      	str	r0, [r6, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8005266:	6046      	str	r6, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8005268:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
  thread_t *cp = (thread_t *)tqp;
 800526a:	4630      	mov	r0, r6
 800526c:	e002      	b.n	8005274 <chMtxLockS+0x94>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800526e:	6887      	ldr	r7, [r0, #8]
 8005270:	42bc      	cmp	r4, r7
 8005272:	d8d3      	bhi.n	800521c <chMtxLockS+0x3c>
    cp = cp->queue.next;
 8005274:	6800      	ldr	r0, [r0, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005276:	4286      	cmp	r6, r0
 8005278:	d1f9      	bne.n	800526e <chMtxLockS+0x8e>
 800527a:	e7cf      	b.n	800521c <chMtxLockS+0x3c>
    mp->next = ctp->mtxlist;
 800527c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
}
 800527e:	bcf0      	pop	{r4, r5, r6, r7}
    mp->next = ctp->mtxlist;
 8005280:	e9c0 1302 	strd	r1, r3, [r0, #8]
    ctp->mtxlist = mp;
 8005284:	6388      	str	r0, [r1, #56]	@ 0x38
}
 8005286:	4770      	bx	lr
  tp->queue.prev->queue.next = tp->queue.next;
 8005288:	e9d3 0600 	ldrd	r0, r6, [r3]
 800528c:	6030      	str	r0, [r6, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800528e:	6046      	str	r6, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8005290:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
  thread_t *cp = (thread_t *)tqp;
 8005292:	4630      	mov	r0, r6
 8005294:	e002      	b.n	800529c <chMtxLockS+0xbc>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005296:	6887      	ldr	r7, [r0, #8]
 8005298:	42a7      	cmp	r7, r4
 800529a:	d302      	bcc.n	80052a2 <chMtxLockS+0xc2>
    cp = cp->queue.next;
 800529c:	6800      	ldr	r0, [r0, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800529e:	4286      	cmp	r6, r0
 80052a0:	d1f9      	bne.n	8005296 <chMtxLockS+0xb6>
  tp->queue.prev             = cp->queue.prev;
 80052a2:	6844      	ldr	r4, [r0, #4]
  tp->queue.next             = cp;
 80052a4:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 80052a6:	605c      	str	r4, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80052a8:	6023      	str	r3, [r4, #0]
  cp->queue.prev             = tp;
 80052aa:	6043      	str	r3, [r0, #4]
          tp = tp->u.wtmtxp->owner;
 80052ac:	68b3      	ldr	r3, [r6, #8]
      while (tp->prio < ctp->prio) {
 80052ae:	688c      	ldr	r4, [r1, #8]
 80052b0:	6898      	ldr	r0, [r3, #8]
 80052b2:	42a0      	cmp	r0, r4
 80052b4:	d39f      	bcc.n	80051f6 <chMtxLockS+0x16>
 80052b6:	e7b6      	b.n	8005226 <chMtxLockS+0x46>
 80052b8:	200011c0 	.word	0x200011c0
 80052bc:	00000000 	.word	0x00000000

080052c0 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 80052c0:	b510      	push	{r4, lr}
 80052c2:	2420      	movs	r4, #32
 80052c4:	f384 8811 	msr	BASEPRI, r4
 80052c8:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80052cc:	2008      	movs	r0, #8
 80052ce:	f7fd fdcf 	bl	8002e70 <chSchGoSleepTimeoutS>
 80052d2:	2300      	movs	r3, #0
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f384 8811 	msr	BASEPRI, r4
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 80052dc:	480b      	ldr	r0, [pc, #44]	@ (800530c <thread4B+0x4c>)
 80052de:	f7ff ff7f 	bl	80051e0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 80052e2:	480a      	ldr	r0, [pc, #40]	@ (800530c <thread4B+0x4c>)
 80052e4:	f7fb fb5c 	bl	80009a0 <chMtxUnlockS>
  return firstprio(&ch.rlist.queue) > currp->prio;
 80052e8:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <thread4B+0x50>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80052ee:	6892      	ldr	r2, [r2, #8]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d803      	bhi.n	80052fe <thread4B+0x3e>
 80052f6:	2300      	movs	r3, #0
 80052f8:	f383 8811 	msr	BASEPRI, r3
}
 80052fc:	bd10      	pop	{r4, pc}
    chSchDoRescheduleAhead();
 80052fe:	f7fe fe27 	bl	8003f50 <chSchDoReschedule>
 8005302:	2300      	movs	r3, #0
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	200008c0 	.word	0x200008c0
 8005310:	200011c0 	.word	0x200011c0
	...

08005320 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8005320:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005322:	4d21      	ldr	r5, [pc, #132]	@ (80053a8 <chMtxUnlock+0x88>)
 8005324:	2320      	movs	r3, #32
 8005326:	69ae      	ldr	r6, [r5, #24]
 8005328:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800532c:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
 800532e:	68c3      	ldr	r3, [r0, #12]
 8005330:	63b3      	str	r3, [r6, #56]	@ 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8005332:	4284      	cmp	r4, r0
 8005334:	d031      	beq.n	800539a <chMtxUnlock+0x7a>
      tprio_t newprio = ctp->realprio;
 8005336:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
      while (lmp != NULL) {
 8005338:	b14b      	cbz	r3, 800534e <chMtxUnlock+0x2e>
 800533a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <chMtxUnlock+0x28>
 8005340:	6892      	ldr	r2, [r2, #8]
 8005342:	4291      	cmp	r1, r2
 8005344:	bf38      	it	cc
 8005346:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8005348:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f5      	bne.n	800533a <chMtxUnlock+0x1a>
  tqp->next             = tp->queue.next;
 800534e:	6823      	ldr	r3, [r4, #0]
      mp->next = tp->mtxlist;
 8005350:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      ctp->prio = newprio;
 8005352:	60b1      	str	r1, [r6, #8]
 8005354:	6003      	str	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005356:	6058      	str	r0, [r3, #4]
  tp->state = CH_STATE_READY;
 8005358:	2300      	movs	r3, #0
      mp->next = tp->mtxlist;
 800535a:	e9c0 4202 	strd	r4, r2, [r0, #8]
  } while (cp->prio >= tp->prio);
 800535e:	68a1      	ldr	r1, [r4, #8]
  tp->state = CH_STATE_READY;
 8005360:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8005364:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <chMtxUnlock+0x88>)
      tp->mtxlist = mp;
 8005366:	63a0      	str	r0, [r4, #56]	@ 0x38
    cp = cp->queue.next;
 8005368:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	428a      	cmp	r2, r1
 800536e:	d2fb      	bcs.n	8005368 <chMtxUnlock+0x48>
  return firstprio(&ch.rlist.queue) > currp->prio;
 8005370:	69a9      	ldr	r1, [r5, #24]
 8005372:	6828      	ldr	r0, [r5, #0]
  if (chSchIsRescRequiredI()) {
 8005374:	6889      	ldr	r1, [r1, #8]
 8005376:	6880      	ldr	r0, [r0, #8]
  tp->queue.prev             = cp->queue.prev;
 8005378:	685a      	ldr	r2, [r3, #4]
  if (chSchIsRescRequiredI()) {
 800537a:	4288      	cmp	r0, r1
  tp->queue.prev             = cp->queue.prev;
 800537c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005380:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005382:	605c      	str	r4, [r3, #4]
  if (chSchIsRescRequiredI()) {
 8005384:	d803      	bhi.n	800538e <chMtxUnlock+0x6e>
 8005386:	2300      	movs	r3, #0
 8005388:	f383 8811 	msr	BASEPRI, r3
}
 800538c:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 800538e:	f7fe fddf 	bl	8003f50 <chSchDoReschedule>
 8005392:	2300      	movs	r3, #0
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60a3      	str	r3, [r4, #8]
 800539e:	2300      	movs	r3, #0
 80053a0:	f383 8811 	msr	BASEPRI, r3
}
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
 80053a6:	bf00      	nop
 80053a8:	200011c0 	.word	0x200011c0
 80053ac:	00000000 	.word	0x00000000

080053b0 <chHeapStatus>:
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 80053b0:	4b1a      	ldr	r3, [pc, #104]	@ (800541c <chHeapStatus+0x6c>)
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 80053b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    heapp = &default_heap;
 80053b6:	2800      	cmp	r0, #0
 80053b8:	bf14      	ite	ne
 80053ba:	4604      	movne	r4, r0
 80053bc:	461c      	moveq	r4, r3
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 80053be:	460f      	mov	r7, r1
 80053c0:	4616      	mov	r6, r2
  }

  H_LOCK(heapp);
 80053c2:	f104 080c 	add.w	r8, r4, #12
 80053c6:	2320      	movs	r3, #32
 80053c8:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80053cc:	4640      	mov	r0, r8
 80053ce:	f7ff ff07 	bl	80051e0 <chMtxLockS>
 80053d2:	f04f 0c00 	mov.w	ip, #0
 80053d6:	f38c 8811 	msr	BASEPRI, ip
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	b1cb      	cbz	r3, 8005412 <chHeapStatus+0x62>
  tpages = 0U;
 80053de:	46e6      	mov	lr, ip
  n = 0U;
 80053e0:	4665      	mov	r5, ip
  while (H_NEXT(qp) != NULL) {
 80053e2:	e9d3 3400 	ldrd	r3, r4, [r3]
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
    tpages += pages;
    if (pages > lpages) {
 80053e6:	45a4      	cmp	ip, r4
    n++;
 80053e8:	f105 0501 	add.w	r5, r5, #1
    tpages += pages;
 80053ec:	44a6      	add	lr, r4
    if (pages > lpages) {
 80053ee:	bf38      	it	cc
 80053f0:	46a4      	movcc	ip, r4
  while (H_NEXT(qp) != NULL) {
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f5      	bne.n	80053e2 <chHeapStatus+0x32>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 80053f6:	b117      	cbz	r7, 80053fe <chHeapStatus+0x4e>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80053f8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80053fc:	603b      	str	r3, [r7, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 80053fe:	b116      	cbz	r6, 8005406 <chHeapStatus+0x56>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005400:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8005404:	6033      	str	r3, [r6, #0]
  }
  H_UNLOCK(heapp);
 8005406:	4640      	mov	r0, r8
 8005408:	f7ff ff8a 	bl	8005320 <chMtxUnlock>

  return n;
}
 800540c:	4628      	mov	r0, r5
 800540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  lpages = 0U;
 8005412:	469c      	mov	ip, r3
  tpages = 0U;
 8005414:	469e      	mov	lr, r3
  n = 0U;
 8005416:	461d      	mov	r5, r3
 8005418:	e7ed      	b.n	80053f6 <chHeapStatus+0x46>
 800541a:	bf00      	nop
 800541c:	20001120 	.word	0x20001120

08005420 <chFactoryReleaseObject>:
 *
 * @param[in] rop       registered object reference
 *
 * @api
 */
void chFactoryReleaseObject(registered_object_t *rop){
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4604      	mov	r4, r0
 8005424:	2320      	movs	r3, #32
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	4d15      	ldr	r5, [pc, #84]	@ (8005480 <chFactoryReleaseObject+0x60>)
 800542c:	4628      	mov	r0, r5
 800542e:	f7ff fed7 	bl	80051e0 <chMtxLockS>
 8005432:	2300      	movs	r3, #0
 8005434:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	3b01      	subs	r3, #1
 800543c:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800543e:	b99b      	cbnz	r3, 8005468 <chFactoryReleaseObject+0x48>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005440:	f105 0210 	add.w	r2, r5, #16
 8005444:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 8005446:	4619      	mov	r1, r3
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4293      	cmp	r3, r2
 800544c:	d011      	beq.n	8005472 <chFactoryReleaseObject+0x52>
    if (prev->next == element) {
 800544e:	429c      	cmp	r4, r3
 8005450:	d1f9      	bne.n	8005446 <chFactoryReleaseObject+0x26>
      prev->next = element->next;
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	600b      	str	r3, [r1, #0]
 8005456:	2320      	movs	r3, #32
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	696b      	ldr	r3, [r5, #20]
 800545e:	6023      	str	r3, [r4, #0]
 8005460:	2300      	movs	r3, #0
  mp->next = php;
 8005462:	616c      	str	r4, [r5, #20]
 8005464:	f383 8811 	msr	BASEPRI, r3
  dyn_release_object_pool(&rop->element,
                          &ch_factory.obj_list,
                          &ch_factory.obj_pool);

  F_UNLOCK();
}
 8005468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800546c:	4804      	ldr	r0, [pc, #16]	@ (8005480 <chFactoryReleaseObject+0x60>)
 800546e:	f7ff bf57 	b.w	8005320 <chMtxUnlock>
 8005472:	2320      	movs	r3, #32
 8005474:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005478:	2300      	movs	r3, #0
 800547a:	696a      	ldr	r2, [r5, #20]
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	deff      	udf	#255	@ 0xff
 8005480:	200010d8 	.word	0x200010d8
	...

08005490 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4604      	mov	r4, r0
 8005494:	2520      	movs	r5, #32
 8005496:	f385 8811 	msr	BASEPRI, r5
 800549a:	480c      	ldr	r0, [pc, #48]	@ (80054cc <thread1.lto_priv.2+0x3c>)
 800549c:	f7ff fea0 	bl	80051e0 <chMtxLockS>
 80054a0:	2300      	movs	r3, #0
 80054a2:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80054a6:	7820      	ldrb	r0, [r4, #0]
 80054a8:	f385 8811 	msr	BASEPRI, r5
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 80054ac:	4a08      	ldr	r2, [pc, #32]	@ (80054d0 <thread1.lto_priv.2+0x40>)
 80054ae:	4909      	ldr	r1, [pc, #36]	@ (80054d4 <thread1.lto_priv.2+0x44>)
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	428b      	cmp	r3, r1
 80054b4:	d202      	bcs.n	80054bc <thread1.lto_priv.2+0x2c>
    *test_tokp++ = token;
 80054b6:	1c59      	adds	r1, r3, #1
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	7018      	strb	r0, [r3, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	f383 8811 	msr	BASEPRI, r3
  chMtxUnlock(&m1);
 80054c2:	4802      	ldr	r0, [pc, #8]	@ (80054cc <thread1.lto_priv.2+0x3c>)
}
 80054c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 80054c8:	f7ff bf2a 	b.w	8005320 <chMtxUnlock>
 80054cc:	200008d0 	.word	0x200008d0
 80054d0:	200010c8 	.word	0x200010c8
 80054d4:	200010c8 	.word	0x200010c8
	...

080054e0 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 80054e0:	b530      	push	{r4, r5, lr}
 80054e2:	2320      	movs	r3, #32
 80054e4:	b087      	sub	sp, #28
 80054e6:	f383 8811 	msr	BASEPRI, r3
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80054ea:	4c16      	ldr	r4, [pc, #88]	@ (8005544 <thread4A+0x64>)
 80054ec:	4a16      	ldr	r2, [pc, #88]	@ (8005548 <thread4A+0x68>)
 80054ee:	69a5      	ldr	r5, [r4, #24]
 80054f0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80054f4:	462b      	mov	r3, r5
 80054f6:	a801      	add	r0, sp, #4
 80054f8:	f7fd f9da 	bl	80028b0 <chVTDoSetI>
  thread_t *tp = tqp->next;
 80054fc:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80054fe:	2308      	movs	r3, #8
 8005500:	f885 3020 	strb.w	r3, [r5, #32]
  tqp->next             = tp->queue.next;
 8005504:	6803      	ldr	r3, [r0, #0]
 8005506:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005508:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 800550a:	2301      	movs	r3, #1
 800550c:	f880 3020 	strb.w	r3, [r0, #32]
  chSysSwitch(currp, otp);
 8005510:	4629      	mov	r1, r5
  currp = queue_fifo_remove(&ch.rlist.queue);
 8005512:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8005514:	f7fa fed4 	bl	80002c0 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8005518:	9b04      	ldr	r3, [sp, #16]
 800551a:	b113      	cbz	r3, 8005522 <thread4A+0x42>
      chVTDoResetI(&vt);
 800551c:	a801      	add	r0, sp, #4
 800551e:	f7fd fa0f 	bl	8002940 <chVTDoResetI>
 8005522:	2400      	movs	r4, #0
 8005524:	f384 8811 	msr	BASEPRI, r4
 8005528:	2320      	movs	r3, #32
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	4807      	ldr	r0, [pc, #28]	@ (800554c <thread4A+0x6c>)
 8005530:	f7ff fe56 	bl	80051e0 <chMtxLockS>
 8005534:	f384 8811 	msr	BASEPRI, r4
  chMtxUnlock(&m1);
 8005538:	4804      	ldr	r0, [pc, #16]	@ (800554c <thread4A+0x6c>)
}
 800553a:	b007      	add	sp, #28
 800553c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chMtxUnlock(&m1);
 8005540:	f7ff beee 	b.w	8005320 <chMtxUnlock>
 8005544:	200011c0 	.word	0x200011c0
 8005548:	08000931 	.word	0x08000931
 800554c:	200008d0 	.word	0x200008d0

08005550 <thread6>:
static THD_FUNCTION(thread6, p) {
 8005550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005554:	4607      	mov	r7, r0
 8005556:	2420      	movs	r4, #32
 8005558:	f384 8811 	msr	BASEPRI, r4
 800555c:	4823      	ldr	r0, [pc, #140]	@ (80055ec <thread6+0x9c>)
 800555e:	f7ff fe3f 	bl	80051e0 <chMtxLockS>
 8005562:	2300      	movs	r3, #0
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f384 8811 	msr	BASEPRI, r4
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 800556c:	4e20      	ldr	r6, [pc, #128]	@ (80055f0 <thread6+0xa0>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->u.wtobjp = cp;
 800556e:	4d21      	ldr	r5, [pc, #132]	@ (80055f4 <thread6+0xa4>)
  thread_t *ctp = currp;
 8005570:	69b4      	ldr	r4, [r6, #24]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8005572:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
  chMtxUnlockS(mp);
 8005576:	4640      	mov	r0, r8
 8005578:	f7fb fa12 	bl	80009a0 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 800557c:	6265      	str	r5, [r4, #36]	@ 0x24
  thread_t *cp = (thread_t *)tqp;
 800557e:	462b      	mov	r3, r5
 8005580:	e003      	b.n	800558a <thread6+0x3a>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005582:	6899      	ldr	r1, [r3, #8]
 8005584:	68a2      	ldr	r2, [r4, #8]
 8005586:	4291      	cmp	r1, r2
 8005588:	d302      	bcc.n	8005590 <thread6+0x40>
    cp = cp->queue.next;
 800558a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800558c:	42ab      	cmp	r3, r5
 800558e:	d1f8      	bne.n	8005582 <thread6+0x32>
  tp->queue.prev             = cp->queue.prev;
 8005590:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8005592:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8005594:	6062      	str	r2, [r4, #4]
  thread_t *otp = currp;
 8005596:	69b1      	ldr	r1, [r6, #24]
  tp->queue.prev->queue.next = tp;
 8005598:	6014      	str	r4, [r2, #0]
  thread_t *tp = tqp->next;
 800559a:	6830      	ldr	r0, [r6, #0]
  cp->queue.prev             = tp;
 800559c:	605c      	str	r4, [r3, #4]
  otp->state = newstate;
 800559e:	2307      	movs	r3, #7
 80055a0:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 80055a4:	6803      	ldr	r3, [r0, #0]
 80055a6:	6033      	str	r3, [r6, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80055a8:	605e      	str	r6, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80055b0:	61b0      	str	r0, [r6, #24]
  chSysSwitch(currp, otp);
 80055b2:	f7fa fe85 	bl	80002c0 <_port_switch>
  queue_prio_insert(ctp, &cp->queue);
  chSchGoSleepS(CH_STATE_WTCOND);
  msg = ctp->u.rdymsg;
  chMtxLockS(mp);
 80055b6:	4640      	mov	r0, r8
 80055b8:	f7ff fe12 	bl	80051e0 <chMtxLockS>
 80055bc:	2300      	movs	r3, #0
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	2320      	movs	r3, #32
  test_emit_token(*(char *)p);
 80055c4:	7838      	ldrb	r0, [r7, #0]
 80055c6:	f383 8811 	msr	BASEPRI, r3
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 80055ca:	4a0b      	ldr	r2, [pc, #44]	@ (80055f8 <thread6+0xa8>)
 80055cc:	490b      	ldr	r1, [pc, #44]	@ (80055fc <thread6+0xac>)
 80055ce:	6813      	ldr	r3, [r2, #0]
 80055d0:	428b      	cmp	r3, r1
 80055d2:	d202      	bcs.n	80055da <thread6+0x8a>
    *test_tokp++ = token;
 80055d4:	1c59      	adds	r1, r3, #1
 80055d6:	6011      	str	r1, [r2, #0]
 80055d8:	7018      	strb	r0, [r3, #0]
 80055da:	2300      	movs	r3, #0
 80055dc:	f383 8811 	msr	BASEPRI, r3
  chMtxUnlock(&m1);
 80055e0:	4802      	ldr	r0, [pc, #8]	@ (80055ec <thread6+0x9c>)
}
 80055e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m1);
 80055e6:	f7ff be9b 	b.w	8005320 <chMtxUnlock>
 80055ea:	bf00      	nop
 80055ec:	200008d0 	.word	0x200008d0
 80055f0:	200011c0 	.word	0x200011c0
 80055f4:	200008b8 	.word	0x200008b8
 80055f8:	200010c8 	.word	0x200010c8
 80055fc:	200010c8 	.word	0x200010c8

08005600 <thread8>:
static THD_FUNCTION(thread8, p) {
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	4606      	mov	r6, r0
 8005604:	2420      	movs	r4, #32
 8005606:	f384 8811 	msr	BASEPRI, r4
 800560a:	482a      	ldr	r0, [pc, #168]	@ (80056b4 <thread8+0xb4>)
 800560c:	f7ff fde8 	bl	80051e0 <chMtxLockS>
 8005610:	2500      	movs	r5, #0
 8005612:	f385 8811 	msr	BASEPRI, r5
 8005616:	f384 8811 	msr	BASEPRI, r4
 800561a:	4827      	ldr	r0, [pc, #156]	@ (80056b8 <thread8+0xb8>)
 800561c:	f7ff fde0 	bl	80051e0 <chMtxLockS>
 8005620:	f385 8811 	msr	BASEPRI, r5
 8005624:	f384 8811 	msr	BASEPRI, r4
  return ch.rlist.current;
 8005628:	4d24      	ldr	r5, [pc, #144]	@ (80056bc <thread8+0xbc>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 800562a:	4c25      	ldr	r4, [pc, #148]	@ (80056c0 <thread8+0xc0>)
 800562c:	69ab      	ldr	r3, [r5, #24]
 800562e:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  chMtxUnlockS(mp);
 8005630:	4638      	mov	r0, r7
 8005632:	f7fb f9b5 	bl	80009a0 <chMtxUnlockS>
  currp->u.wtobjp = cp;
 8005636:	69a9      	ldr	r1, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8005638:	4623      	mov	r3, r4
 800563a:	624c      	str	r4, [r1, #36]	@ 0x24
 800563c:	e003      	b.n	8005646 <thread8+0x46>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800563e:	688a      	ldr	r2, [r1, #8]
 8005640:	6898      	ldr	r0, [r3, #8]
 8005642:	4290      	cmp	r0, r2
 8005644:	d302      	bcc.n	800564c <thread8+0x4c>
    cp = cp->queue.next;
 8005646:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005648:	42a3      	cmp	r3, r4
 800564a:	d1f8      	bne.n	800563e <thread8+0x3e>
  tp->queue.prev             = cp->queue.prev;
 800564c:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 800564e:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8005650:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8005652:	6011      	str	r1, [r2, #0]
  thread_t *tp = tqp->next;
 8005654:	6828      	ldr	r0, [r5, #0]
  cp->queue.prev             = tp;
 8005656:	6059      	str	r1, [r3, #4]
  otp->state = newstate;
 8005658:	2307      	movs	r3, #7
 800565a:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 800565e:	6803      	ldr	r3, [r0, #0]
 8005660:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005662:	605d      	str	r5, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8005664:	2301      	movs	r3, #1
 8005666:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800566a:	61a8      	str	r0, [r5, #24]
  chSysSwitch(currp, otp);
 800566c:	f7fa fe28 	bl	80002c0 <_port_switch>
  return currp->u.rdymsg;
 8005670:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	3301      	adds	r3, #1
 8005676:	d002      	beq.n	800567e <thread8+0x7e>
    chMtxLockS(mp);
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff fdb1 	bl	80051e0 <chMtxLockS>
 800567e:	2300      	movs	r3, #0
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	2320      	movs	r3, #32
  test_emit_token(*(char *)p);
 8005686:	7830      	ldrb	r0, [r6, #0]
 8005688:	f383 8811 	msr	BASEPRI, r3
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 800568c:	4a0d      	ldr	r2, [pc, #52]	@ (80056c4 <thread8+0xc4>)
 800568e:	490e      	ldr	r1, [pc, #56]	@ (80056c8 <thread8+0xc8>)
 8005690:	6813      	ldr	r3, [r2, #0]
 8005692:	428b      	cmp	r3, r1
 8005694:	d202      	bcs.n	800569c <thread8+0x9c>
    *test_tokp++ = token;
 8005696:	1c59      	adds	r1, r3, #1
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	7018      	strb	r0, [r3, #0]
 800569c:	2300      	movs	r3, #0
 800569e:	f383 8811 	msr	BASEPRI, r3
  chMtxUnlock(&m1);
 80056a2:	4805      	ldr	r0, [pc, #20]	@ (80056b8 <thread8+0xb8>)
 80056a4:	f7ff fe3c 	bl	8005320 <chMtxUnlock>
}
 80056a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 80056ac:	4801      	ldr	r0, [pc, #4]	@ (80056b4 <thread8+0xb4>)
 80056ae:	f7ff be37 	b.w	8005320 <chMtxUnlock>
 80056b2:	bf00      	nop
 80056b4:	200008c0 	.word	0x200008c0
 80056b8:	200008d0 	.word	0x200008d0
 80056bc:	200011c0 	.word	0x200011c0
 80056c0:	200008b8 	.word	0x200008b8
 80056c4:	200010c8 	.word	0x200010c8
 80056c8:	200010c8 	.word	0x200010c8
 80056cc:	00000000 	.word	0x00000000

080056d0 <thread9>:
static THD_FUNCTION(thread9, p) {
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4604      	mov	r4, r0
 80056d4:	2520      	movs	r5, #32
 80056d6:	f385 8811 	msr	BASEPRI, r5
 80056da:	480c      	ldr	r0, [pc, #48]	@ (800570c <thread9+0x3c>)
 80056dc:	f7ff fd80 	bl	80051e0 <chMtxLockS>
 80056e0:	2300      	movs	r3, #0
 80056e2:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80056e6:	7820      	ldrb	r0, [r4, #0]
 80056e8:	f385 8811 	msr	BASEPRI, r5
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 80056ec:	4a08      	ldr	r2, [pc, #32]	@ (8005710 <thread9+0x40>)
 80056ee:	4909      	ldr	r1, [pc, #36]	@ (8005714 <thread9+0x44>)
 80056f0:	6813      	ldr	r3, [r2, #0]
 80056f2:	428b      	cmp	r3, r1
 80056f4:	d202      	bcs.n	80056fc <thread9+0x2c>
    *test_tokp++ = token;
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	6011      	str	r1, [r2, #0]
 80056fa:	7018      	strb	r0, [r3, #0]
 80056fc:	2300      	movs	r3, #0
 80056fe:	f383 8811 	msr	BASEPRI, r3
  chMtxUnlock(&m2);
 8005702:	4802      	ldr	r0, [pc, #8]	@ (800570c <thread9+0x3c>)
}
 8005704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8005708:	f7ff be0a 	b.w	8005320 <chMtxUnlock>
 800570c:	200008c0 	.word	0x200008c0
 8005710:	200010c8 	.word	0x200010c8
 8005714:	200010c8 	.word	0x200010c8
	...

08005720 <rt_test_006_001_execute.lto_priv.0>:
static void rt_test_006_001_execute(void) {
 8005720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 80057dc <rt_test_006_001_execute.lto_priv.0+0xbc>
  test_set_step(2);
 8005728:	4e2d      	ldr	r6, [pc, #180]	@ (80057e0 <rt_test_006_001_execute.lto_priv.0+0xc0>)
  return chThdGetSelfX()->prio;
 800572a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800572e:	2302      	movs	r3, #2
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	6895      	ldr	r5, [r2, #8]
 8005734:	2320      	movs	r3, #32
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	482a      	ldr	r0, [pc, #168]	@ (80057e4 <rt_test_006_001_execute.lto_priv.0+0xc4>)
 800573c:	f7ff fd50 	bl	80051e0 <chMtxLockS>
 8005740:	2700      	movs	r7, #0
 8005742:	f387 8811 	msr	BASEPRI, r7
  test_set_step(3);
 8005746:	2303      	movs	r3, #3
 8005748:	6033      	str	r3, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800574a:	4a27      	ldr	r2, [pc, #156]	@ (80057e8 <rt_test_006_001_execute.lto_priv.0+0xc8>)
 800574c:	4b27      	ldr	r3, [pc, #156]	@ (80057ec <rt_test_006_001_execute.lto_priv.0+0xcc>)
 800574e:	4828      	ldr	r0, [pc, #160]	@ (80057f0 <rt_test_006_001_execute.lto_priv.0+0xd0>)
 8005750:	4c28      	ldr	r4, [pc, #160]	@ (80057f4 <rt_test_006_001_execute.lto_priv.0+0xd4>)
 8005752:	1c69      	adds	r1, r5, #1
 8005754:	f005 f9f4 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8005758:	4b27      	ldr	r3, [pc, #156]	@ (80057f8 <rt_test_006_001_execute.lto_priv.0+0xd8>)
 800575a:	4a23      	ldr	r2, [pc, #140]	@ (80057e8 <rt_test_006_001_execute.lto_priv.0+0xc8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800575c:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800575e:	1ca9      	adds	r1, r5, #2
 8005760:	4826      	ldr	r0, [pc, #152]	@ (80057fc <rt_test_006_001_execute.lto_priv.0+0xdc>)
 8005762:	f005 f9ed 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8005766:	4b26      	ldr	r3, [pc, #152]	@ (8005800 <rt_test_006_001_execute.lto_priv.0+0xe0>)
 8005768:	4a1f      	ldr	r2, [pc, #124]	@ (80057e8 <rt_test_006_001_execute.lto_priv.0+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800576a:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800576c:	1ce9      	adds	r1, r5, #3
 800576e:	4825      	ldr	r0, [pc, #148]	@ (8005804 <rt_test_006_001_execute.lto_priv.0+0xe4>)
 8005770:	f005 f9e6 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8005774:	4b24      	ldr	r3, [pc, #144]	@ (8005808 <rt_test_006_001_execute.lto_priv.0+0xe8>)
 8005776:	4a1c      	ldr	r2, [pc, #112]	@ (80057e8 <rt_test_006_001_execute.lto_priv.0+0xc8>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8005778:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800577a:	1d29      	adds	r1, r5, #4
 800577c:	4823      	ldr	r0, [pc, #140]	@ (800580c <rt_test_006_001_execute.lto_priv.0+0xec>)
 800577e:	f005 f9df 	bl	800ab40 <chThdCreateStatic.constprop.0>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8005782:	4b23      	ldr	r3, [pc, #140]	@ (8005810 <rt_test_006_001_execute.lto_priv.0+0xf0>)
 8005784:	4a18      	ldr	r2, [pc, #96]	@ (80057e8 <rt_test_006_001_execute.lto_priv.0+0xc8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8005786:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8005788:	1d69      	adds	r1, r5, #5
 800578a:	4822      	ldr	r0, [pc, #136]	@ (8005814 <rt_test_006_001_execute.lto_priv.0+0xf4>)
 800578c:	f005 f9d8 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 8005790:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8005792:	6120      	str	r0, [r4, #16]
    chMtxUnlock(&m1);
 8005794:	4813      	ldr	r0, [pc, #76]	@ (80057e4 <rt_test_006_001_execute.lto_priv.0+0xc4>)
  test_set_step(4);
 8005796:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8005798:	f7ff fdc2 	bl	8005320 <chMtxUnlock>
 800579c:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 80057a0:	f854 0b04 	ldr.w	r0, [r4], #4
 80057a4:	b118      	cbz	r0, 80057ae <rt_test_006_001_execute.lto_priv.0+0x8e>
      chThdWait(threads[i]);
 80057a6:	f005 fc73 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 80057aa:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80057ae:	42b4      	cmp	r4, r6
 80057b0:	d1f6      	bne.n	80057a0 <rt_test_006_001_execute.lto_priv.0+0x80>
 80057b2:	f8d8 3018 	ldr.w	r3, [r8, #24]
  if (!condition)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	d105      	bne.n	80057c8 <rt_test_006_001_execute.lto_priv.0+0xa8>
}
 80057bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80057c0:	4915      	ldr	r1, [pc, #84]	@ (8005818 <rt_test_006_001_execute.lto_priv.0+0xf8>)
 80057c2:	4816      	ldr	r0, [pc, #88]	@ (800581c <rt_test_006_001_execute.lto_priv.0+0xfc>)
 80057c4:	f7fb b9b4 	b.w	8000b30 <_test_assert_sequence>
  test_local_fail      = true;
 80057c8:	4c15      	ldr	r4, [pc, #84]	@ (8005820 <rt_test_006_001_execute.lto_priv.0+0x100>)
  test_global_fail     = true;
 80057ca:	4816      	ldr	r0, [pc, #88]	@ (8005824 <rt_test_006_001_execute.lto_priv.0+0x104>)
  test_failure_message = msg;
 80057cc:	4a16      	ldr	r2, [pc, #88]	@ (8005828 <rt_test_006_001_execute.lto_priv.0+0x108>)
 80057ce:	4917      	ldr	r1, [pc, #92]	@ (800582c <rt_test_006_001_execute.lto_priv.0+0x10c>)
 80057d0:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80057d2:	2301      	movs	r3, #1
 80057d4:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80057d6:	7003      	strb	r3, [r0, #0]
}
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057dc:	200011c0 	.word	0x200011c0
 80057e0:	200010b4 	.word	0x200010b4
 80057e4:	200008d0 	.word	0x200008d0
 80057e8:	08005491 	.word	0x08005491
 80057ec:	0800b1d4 	.word	0x0800b1d4
 80057f0:	20000a08 	.word	0x20000a08
 80057f4:	200010a0 	.word	0x200010a0
 80057f8:	0800b1c0 	.word	0x0800b1c0
 80057fc:	20000b50 	.word	0x20000b50
 8005800:	0800b1c4 	.word	0x0800b1c4
 8005804:	20000c98 	.word	0x20000c98
 8005808:	0800b1c8 	.word	0x0800b1c8
 800580c:	20000de0 	.word	0x20000de0
 8005810:	0800b1cc 	.word	0x0800b1cc
 8005814:	20000f28 	.word	0x20000f28
 8005818:	0800b170 	.word	0x0800b170
 800581c:	0800b1d0 	.word	0x0800b1d0
 8005820:	200010d1 	.word	0x200010d1
 8005824:	200010d0 	.word	0x200010d0
 8005828:	200010cc 	.word	0x200010cc
 800582c:	0800b450 	.word	0x0800b450

08005830 <rt_test_006_004_execute.lto_priv.0>:
static void rt_test_006_004_execute(void) {
 8005830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return ch.rlist.current;
 8005834:	4c37      	ldr	r4, [pc, #220]	@ (8005914 <rt_test_006_004_execute.lto_priv.0+0xe4>)
  test_set_step(2);
 8005836:	4d38      	ldr	r5, [pc, #224]	@ (8005918 <rt_test_006_004_execute.lto_priv.0+0xe8>)
  return chThdGetSelfX()->prio;
 8005838:	69a3      	ldr	r3, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800583a:	4a38      	ldr	r2, [pc, #224]	@ (800591c <rt_test_006_004_execute.lto_priv.0+0xec>)
 800583c:	689e      	ldr	r6, [r3, #8]
 800583e:	4838      	ldr	r0, [pc, #224]	@ (8005920 <rt_test_006_004_execute.lto_priv.0+0xf0>)
 8005840:	4f38      	ldr	r7, [pc, #224]	@ (8005924 <rt_test_006_004_execute.lto_priv.0+0xf4>)
    pa = p + 1;
 8005842:	f106 0901 	add.w	r9, r6, #1
  test_set_step(2);
 8005846:	2302      	movs	r3, #2
 8005848:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800584a:	4649      	mov	r1, r9
 800584c:	4b36      	ldr	r3, [pc, #216]	@ (8005928 <rt_test_006_004_execute.lto_priv.0+0xf8>)
 800584e:	f005 f977 	bl	800ab40 <chThdCreateStatic.constprop.0>
    pb = p + 2;
 8005852:	f106 0a02 	add.w	sl, r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005856:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005858:	4b34      	ldr	r3, [pc, #208]	@ (800592c <rt_test_006_004_execute.lto_priv.0+0xfc>)
 800585a:	4a35      	ldr	r2, [pc, #212]	@ (8005930 <rt_test_006_004_execute.lto_priv.0+0x100>)
 800585c:	4835      	ldr	r0, [pc, #212]	@ (8005934 <rt_test_006_004_execute.lto_priv.0+0x104>)
 800585e:	4651      	mov	r1, sl
 8005860:	f005 f96e 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8005864:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005866:	6078      	str	r0, [r7, #4]
  test_set_step(3);
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	f04f 0820 	mov.w	r8, #32
 800586e:	f388 8811 	msr	BASEPRI, r8
 8005872:	4831      	ldr	r0, [pc, #196]	@ (8005938 <rt_test_006_004_execute.lto_priv.0+0x108>)
 8005874:	f7ff fcb4 	bl	80051e0 <chMtxLockS>
 8005878:	2700      	movs	r7, #0
 800587a:	f387 8811 	msr	BASEPRI, r7
 800587e:	69a3      	ldr	r3, [r4, #24]
  if (!condition)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	429e      	cmp	r6, r3
 8005884:	d13c      	bne.n	8005900 <rt_test_006_004_execute.lto_priv.0+0xd0>
  test_set_step(4);
 8005886:	2304      	movs	r3, #4
 8005888:	602b      	str	r3, [r5, #0]
 800588a:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800588e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005892:	2008      	movs	r0, #8
 8005894:	f7fd faec 	bl	8002e70 <chSchGoSleepTimeoutS>
 8005898:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->prio;
 800589c:	69a3      	ldr	r3, [r4, #24]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4599      	cmp	r9, r3
 80058a2:	d12d      	bne.n	8005900 <rt_test_006_004_execute.lto_priv.0+0xd0>
  test_set_step(5);
 80058a4:	2305      	movs	r3, #5
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f388 8811 	msr	BASEPRI, r8
 80058ac:	4823      	ldr	r0, [pc, #140]	@ (800593c <rt_test_006_004_execute.lto_priv.0+0x10c>)
 80058ae:	f7ff fc97 	bl	80051e0 <chMtxLockS>
 80058b2:	f387 8811 	msr	BASEPRI, r7
 80058b6:	69a3      	ldr	r3, [r4, #24]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4599      	cmp	r9, r3
 80058bc:	d120      	bne.n	8005900 <rt_test_006_004_execute.lto_priv.0+0xd0>
  test_set_step(6);
 80058be:	2306      	movs	r3, #6
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80058c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80058ca:	2008      	movs	r0, #8
 80058cc:	f7fd fad0 	bl	8002e70 <chSchGoSleepTimeoutS>
 80058d0:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->prio;
 80058d4:	69a3      	ldr	r3, [r4, #24]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	459a      	cmp	sl, r3
 80058da:	d111      	bne.n	8005900 <rt_test_006_004_execute.lto_priv.0+0xd0>
  test_set_step(7);
 80058dc:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 80058de:	4817      	ldr	r0, [pc, #92]	@ (800593c <rt_test_006_004_execute.lto_priv.0+0x10c>)
  test_set_step(7);
 80058e0:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m2);
 80058e2:	f7ff fd1d 	bl	8005320 <chMtxUnlock>
 80058e6:	69a3      	ldr	r3, [r4, #24]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	4599      	cmp	r9, r3
 80058ec:	d108      	bne.n	8005900 <rt_test_006_004_execute.lto_priv.0+0xd0>
  test_set_step(8);
 80058ee:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 80058f0:	4811      	ldr	r0, [pc, #68]	@ (8005938 <rt_test_006_004_execute.lto_priv.0+0x108>)
  test_set_step(8);
 80058f2:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m1);
 80058f4:	f7ff fd14 	bl	8005320 <chMtxUnlock>
 80058f8:	69a3      	ldr	r3, [r4, #24]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	429e      	cmp	r6, r3
 80058fe:	d007      	beq.n	8005910 <rt_test_006_004_execute.lto_priv.0+0xe0>
  test_local_fail      = true;
 8005900:	4c0f      	ldr	r4, [pc, #60]	@ (8005940 <rt_test_006_004_execute.lto_priv.0+0x110>)
  test_global_fail     = true;
 8005902:	4810      	ldr	r0, [pc, #64]	@ (8005944 <rt_test_006_004_execute.lto_priv.0+0x114>)
  test_failure_message = msg;
 8005904:	4a10      	ldr	r2, [pc, #64]	@ (8005948 <rt_test_006_004_execute.lto_priv.0+0x118>)
 8005906:	4911      	ldr	r1, [pc, #68]	@ (800594c <rt_test_006_004_execute.lto_priv.0+0x11c>)
 8005908:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800590a:	2301      	movs	r3, #1
 800590c:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800590e:	7003      	strb	r3, [r0, #0]
}
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	200011c0 	.word	0x200011c0
 8005918:	200010b4 	.word	0x200010b4
 800591c:	080054e1 	.word	0x080054e1
 8005920:	20000a08 	.word	0x20000a08
 8005924:	200010a0 	.word	0x200010a0
 8005928:	0800b1cc 	.word	0x0800b1cc
 800592c:	0800b1c8 	.word	0x0800b1c8
 8005930:	080052c1 	.word	0x080052c1
 8005934:	20000b50 	.word	0x20000b50
 8005938:	200008d0 	.word	0x200008d0
 800593c:	200008c0 	.word	0x200008c0
 8005940:	200010d1 	.word	0x200010d1
 8005944:	200010d0 	.word	0x200010d0
 8005948:	200010cc 	.word	0x200010cc
 800594c:	0800b450 	.word	0x0800b450

08005950 <rt_test_009_001_execute.lto_priv.0>:
static void rt_test_009_001_execute(void) {
 8005950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return ch.rlist.current;
 8005954:	4b69      	ldr	r3, [pc, #420]	@ (8005afc <rt_test_009_001_execute.lto_priv.0+0x1ac>)
  test_set_step(2);
 8005956:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005b00 <rt_test_009_001_execute.lto_priv.0+0x1b0>
  return chThdGetSelfX()->prio;
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	2302      	movs	r3, #2
 800595e:	f8c8 3000 	str.w	r3, [r8]
 8005962:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8005966:	2320      	movs	r3, #32
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	4865      	ldr	r0, [pc, #404]	@ (8005b04 <rt_test_009_001_execute.lto_priv.0+0x1b4>)
 800596e:	f7ff fc37 	bl	80051e0 <chMtxLockS>
 8005972:	2500      	movs	r5, #0
 8005974:	f385 8811 	msr	BASEPRI, r5
  while (H_NEXT(qp) != NULL) {
 8005978:	f8df 918c 	ldr.w	r9, [pc, #396]	@ 8005b08 <rt_test_009_001_execute.lto_priv.0+0x1b8>
 800597c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8005980:	2c00      	cmp	r4, #0
 8005982:	f000 8091 	beq.w	8005aa8 <rt_test_009_001_execute.lto_priv.0+0x158>
  tpages = 0U;
 8005986:	462f      	mov	r7, r5
  n = 0U;
 8005988:	462e      	mov	r6, r5
  while (H_NEXT(qp) != NULL) {
 800598a:	e9d4 4300 	ldrd	r4, r3, [r4]
    if (pages > lpages) {
 800598e:	429d      	cmp	r5, r3
    n++;
 8005990:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8005994:	441f      	add	r7, r3
    if (pages > lpages) {
 8005996:	bf38      	it	cc
 8005998:	461d      	movcc	r5, r3
  while (H_NEXT(qp) != NULL) {
 800599a:	2c00      	cmp	r4, #0
 800599c:	d1f5      	bne.n	800598a <rt_test_009_001_execute.lto_priv.0+0x3a>
  H_UNLOCK(heapp);
 800599e:	4859      	ldr	r0, [pc, #356]	@ (8005b04 <rt_test_009_001_execute.lto_priv.0+0x1b4>)
 80059a0:	f7ff fcbe 	bl	8005320 <chMtxUnlock>
  if (!condition)
 80059a4:	2e01      	cmp	r6, #1
 80059a6:	f040 8083 	bne.w	8005ab0 <rt_test_009_001_execute.lto_priv.0+0x160>
  test_set_step(3);
 80059aa:	2303      	movs	r3, #3
 80059ac:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateFromHeap(&heap1,
 80059b0:	4956      	ldr	r1, [pc, #344]	@ (8005b0c <rt_test_009_001_execute.lto_priv.0+0x1bc>)
 80059b2:	4b57      	ldr	r3, [pc, #348]	@ (8005b10 <rt_test_009_001_execute.lto_priv.0+0x1c0>)
 80059b4:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8005b14 <rt_test_009_001_execute.lto_priv.0+0x1c4>
 80059b8:	f10a 32ff 	add.w	r2, sl, #4294967295	@ 0xffffffff
 80059bc:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 80059c0:	f005 f866 	bl	800aa90 <chThdCreateFromHeap.constprop.0>
 80059c4:	f8cb 0000 	str.w	r0, [fp]
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d063      	beq.n	8005a94 <rt_test_009_001_execute.lto_priv.0+0x144>
  test_set_step(4);
 80059cc:	2304      	movs	r3, #4
 80059ce:	f8c8 3000 	str.w	r3, [r8]
    threads[1] = chThdCreateFromHeap(&heap1,
 80059d2:	4951      	ldr	r1, [pc, #324]	@ (8005b18 <rt_test_009_001_execute.lto_priv.0+0x1c8>)
 80059d4:	4b51      	ldr	r3, [pc, #324]	@ (8005b1c <rt_test_009_001_execute.lto_priv.0+0x1cc>)
 80059d6:	f1aa 0202 	sub.w	r2, sl, #2
 80059da:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 80059de:	f005 f857 	bl	800aa90 <chThdCreateFromHeap.constprop.0>
 80059e2:	f8cb 0004 	str.w	r0, [fp, #4]
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d054      	beq.n	8005a94 <rt_test_009_001_execute.lto_priv.0+0x144>
  test_set_step(5);
 80059ea:	2305      	movs	r3, #5
 80059ec:	f8c8 3000 	str.w	r3, [r8]
    threads[2] = chThdCreateFromHeap(&heap1,
 80059f0:	494b      	ldr	r1, [pc, #300]	@ (8005b20 <rt_test_009_001_execute.lto_priv.0+0x1d0>)
 80059f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005b24 <rt_test_009_001_execute.lto_priv.0+0x1d4>)
 80059f4:	f1aa 0203 	sub.w	r2, sl, #3
 80059f8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80059fc:	f005 f848 	bl	800aa90 <chThdCreateFromHeap.constprop.0>
 8005a00:	f8cb 0008 	str.w	r0, [fp, #8]
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d15d      	bne.n	8005ac4 <rt_test_009_001_execute.lto_priv.0+0x174>
  test_set_step(6);
 8005a08:	2306      	movs	r3, #6
 8005a0a:	f8c8 3000 	str.w	r3, [r8]
 8005a0e:	f10b 0614 	add.w	r6, fp, #20
    if (threads[i] != NULL) {
 8005a12:	f85b 0b04 	ldr.w	r0, [fp], #4
 8005a16:	b118      	cbz	r0, 8005a20 <rt_test_009_001_execute.lto_priv.0+0xd0>
      chThdWait(threads[i]);
 8005a18:	f005 fb3a 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8005a1c:	f84b 4c04 	str.w	r4, [fp, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005a20:	455e      	cmp	r6, fp
 8005a22:	d1f6      	bne.n	8005a12 <rt_test_009_001_execute.lto_priv.0+0xc2>
    test_assert_sequence("AB", "invalid sequence");
 8005a24:	4940      	ldr	r1, [pc, #256]	@ (8005b28 <rt_test_009_001_execute.lto_priv.0+0x1d8>)
 8005a26:	4841      	ldr	r0, [pc, #260]	@ (8005b2c <rt_test_009_001_execute.lto_priv.0+0x1dc>)
 8005a28:	f7fb f882 	bl	8000b30 <_test_assert_sequence>
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d138      	bne.n	8005aa4 <rt_test_009_001_execute.lto_priv.0+0x154>
  test_set_step(7);
 8005a32:	2307      	movs	r3, #7
 8005a34:	f8c8 3000 	str.w	r3, [r8]
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	4831      	ldr	r0, [pc, #196]	@ (8005b04 <rt_test_009_001_execute.lto_priv.0+0x1b4>)
 8005a40:	f7ff fbce 	bl	80051e0 <chMtxLockS>
 8005a44:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 8005a48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d041      	beq.n	8005ad4 <rt_test_009_001_execute.lto_priv.0+0x184>
  tpages = 0U;
 8005a50:	46a0      	mov	r8, r4
  n = 0U;
 8005a52:	4626      	mov	r6, r4
  while (H_NEXT(qp) != NULL) {
 8005a54:	e9d3 3200 	ldrd	r3, r2, [r3]
    if (pages > lpages) {
 8005a58:	4294      	cmp	r4, r2
    n++;
 8005a5a:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8005a5e:	4490      	add	r8, r2
    if (pages > lpages) {
 8005a60:	bf38      	it	cc
 8005a62:	4614      	movcc	r4, r2
  while (H_NEXT(qp) != NULL) {
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f5      	bne.n	8005a54 <rt_test_009_001_execute.lto_priv.0+0x104>
  H_UNLOCK(heapp);
 8005a68:	4826      	ldr	r0, [pc, #152]	@ (8005b04 <rt_test_009_001_execute.lto_priv.0+0x1b4>)
 8005a6a:	f7ff fc59 	bl	8005320 <chMtxUnlock>
 8005a6e:	2e01      	cmp	r6, #1
 8005a70:	d133      	bne.n	8005ada <rt_test_009_001_execute.lto_priv.0+0x18a>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8005a72:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005a76:	ebb8 0fc7 	cmp.w	r8, r7, lsl #3
 8005a7a:	d137      	bne.n	8005aec <rt_test_009_001_execute.lto_priv.0+0x19c>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005a7c:	00e4      	lsls	r4, r4, #3
 8005a7e:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 8005a82:	d00f      	beq.n	8005aa4 <rt_test_009_001_execute.lto_priv.0+0x154>
  test_local_fail      = true;
 8005a84:	482a      	ldr	r0, [pc, #168]	@ (8005b30 <rt_test_009_001_execute.lto_priv.0+0x1e0>)
  test_global_fail     = true;
 8005a86:	492b      	ldr	r1, [pc, #172]	@ (8005b34 <rt_test_009_001_execute.lto_priv.0+0x1e4>)
  test_failure_message = msg;
 8005a88:	4b2b      	ldr	r3, [pc, #172]	@ (8005b38 <rt_test_009_001_execute.lto_priv.0+0x1e8>)
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b3c <rt_test_009_001_execute.lto_priv.0+0x1ec>)
  test_local_fail      = true;
 8005a8c:	7006      	strb	r6, [r0, #0]
  test_global_fail     = true;
 8005a8e:	700e      	strb	r6, [r1, #0]
  test_failure_message = msg;
 8005a90:	601a      	str	r2, [r3, #0]
  return true;
 8005a92:	e007      	b.n	8005aa4 <rt_test_009_001_execute.lto_priv.0+0x154>
  test_local_fail      = true;
 8005a94:	4c26      	ldr	r4, [pc, #152]	@ (8005b30 <rt_test_009_001_execute.lto_priv.0+0x1e0>)
  test_global_fail     = true;
 8005a96:	4827      	ldr	r0, [pc, #156]	@ (8005b34 <rt_test_009_001_execute.lto_priv.0+0x1e4>)
  test_failure_message = msg;
 8005a98:	4a27      	ldr	r2, [pc, #156]	@ (8005b38 <rt_test_009_001_execute.lto_priv.0+0x1e8>)
 8005a9a:	4929      	ldr	r1, [pc, #164]	@ (8005b40 <rt_test_009_001_execute.lto_priv.0+0x1f0>)
 8005a9c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8005aa2:	7003      	strb	r3, [r0, #0]
}
 8005aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  H_UNLOCK(heapp);
 8005aa8:	f109 000c 	add.w	r0, r9, #12
 8005aac:	f7ff fc38 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 8005ab0:	4c1f      	ldr	r4, [pc, #124]	@ (8005b30 <rt_test_009_001_execute.lto_priv.0+0x1e0>)
  test_global_fail     = true;
 8005ab2:	4820      	ldr	r0, [pc, #128]	@ (8005b34 <rt_test_009_001_execute.lto_priv.0+0x1e4>)
  test_failure_message = msg;
 8005ab4:	4a20      	ldr	r2, [pc, #128]	@ (8005b38 <rt_test_009_001_execute.lto_priv.0+0x1e8>)
 8005ab6:	4923      	ldr	r1, [pc, #140]	@ (8005b44 <rt_test_009_001_execute.lto_priv.0+0x1f4>)
 8005ab8:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8005aba:	2301      	movs	r3, #1
 8005abc:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8005abe:	7003      	strb	r3, [r0, #0]
 8005ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_local_fail      = true;
 8005ac4:	481a      	ldr	r0, [pc, #104]	@ (8005b30 <rt_test_009_001_execute.lto_priv.0+0x1e0>)
  test_global_fail     = true;
 8005ac6:	491b      	ldr	r1, [pc, #108]	@ (8005b34 <rt_test_009_001_execute.lto_priv.0+0x1e4>)
  test_failure_message = msg;
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <rt_test_009_001_execute.lto_priv.0+0x1e8>)
 8005aca:	4a1f      	ldr	r2, [pc, #124]	@ (8005b48 <rt_test_009_001_execute.lto_priv.0+0x1f8>)
  test_local_fail      = true;
 8005acc:	7006      	strb	r6, [r0, #0]
  test_global_fail     = true;
 8005ace:	700e      	strb	r6, [r1, #0]
  test_failure_message = msg;
 8005ad0:	601a      	str	r2, [r3, #0]
  return true;
 8005ad2:	e7e7      	b.n	8005aa4 <rt_test_009_001_execute.lto_priv.0+0x154>
 8005ad4:	480b      	ldr	r0, [pc, #44]	@ (8005b04 <rt_test_009_001_execute.lto_priv.0+0x1b4>)
 8005ad6:	f7ff fc23 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 8005ada:	4c15      	ldr	r4, [pc, #84]	@ (8005b30 <rt_test_009_001_execute.lto_priv.0+0x1e0>)
  test_global_fail     = true;
 8005adc:	4815      	ldr	r0, [pc, #84]	@ (8005b34 <rt_test_009_001_execute.lto_priv.0+0x1e4>)
  test_failure_message = msg;
 8005ade:	4a16      	ldr	r2, [pc, #88]	@ (8005b38 <rt_test_009_001_execute.lto_priv.0+0x1e8>)
 8005ae0:	491a      	ldr	r1, [pc, #104]	@ (8005b4c <rt_test_009_001_execute.lto_priv.0+0x1fc>)
 8005ae2:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8005ae8:	7003      	strb	r3, [r0, #0]
  return true;
 8005aea:	e7db      	b.n	8005aa4 <rt_test_009_001_execute.lto_priv.0+0x154>
  test_local_fail      = true;
 8005aec:	4810      	ldr	r0, [pc, #64]	@ (8005b30 <rt_test_009_001_execute.lto_priv.0+0x1e0>)
  test_global_fail     = true;
 8005aee:	4911      	ldr	r1, [pc, #68]	@ (8005b34 <rt_test_009_001_execute.lto_priv.0+0x1e4>)
  test_failure_message = msg;
 8005af0:	4b11      	ldr	r3, [pc, #68]	@ (8005b38 <rt_test_009_001_execute.lto_priv.0+0x1e8>)
 8005af2:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <rt_test_009_001_execute.lto_priv.0+0x200>)
  test_local_fail      = true;
 8005af4:	7006      	strb	r6, [r0, #0]
  test_global_fail     = true;
 8005af6:	700e      	strb	r6, [r1, #0]
  test_failure_message = msg;
 8005af8:	601a      	str	r2, [r3, #0]
  return true;
 8005afa:	e7d3      	b.n	8005aa4 <rt_test_009_001_execute.lto_priv.0+0x154>
 8005afc:	200011c0 	.word	0x200011c0
 8005b00:	200010b4 	.word	0x200010b4
 8005b04:	2000107c 	.word	0x2000107c
 8005b08:	20001070 	.word	0x20001070
 8005b0c:	0800b1fc 	.word	0x0800b1fc
 8005b10:	0800b1cc 	.word	0x0800b1cc
 8005b14:	200010a0 	.word	0x200010a0
 8005b18:	0800b204 	.word	0x0800b204
 8005b1c:	0800b1c8 	.word	0x0800b1c8
 8005b20:	0800b20c 	.word	0x0800b20c
 8005b24:	0800b1c4 	.word	0x0800b1c4
 8005b28:	0800b170 	.word	0x0800b170
 8005b2c:	0800b478 	.word	0x0800b478
 8005b30:	200010d1 	.word	0x200010d1
 8005b34:	200010d0 	.word	0x200010d0
 8005b38:	200010cc 	.word	0x200010cc
 8005b3c:	0800b4b0 	.word	0x0800b4b0
 8005b40:	0800b224 	.word	0x0800b224
 8005b44:	0800b468 	.word	0x0800b468
 8005b48:	0800b23c 	.word	0x0800b23c
 8005b4c:	0800b47c 	.word	0x0800b47c
 8005b50:	0800b494 	.word	0x0800b494
	...

08005b60 <oslib_test_005_001_teardown.lto_priv.0>:
 * - [5.1.6] Retrieving the registered object by name again, must not
 *   exist.
 * .
 */

static void oslib_test_005_001_teardown(void) {
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	2320      	movs	r3, #32
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	4d15      	ldr	r5, [pc, #84]	@ (8005bc0 <oslib_test_005_001_teardown.lto_priv.0+0x60>)
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7ff fb38 	bl	80051e0 <chMtxLockS>
 8005b70:	2300      	movs	r3, #0
 8005b72:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8005b76:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 8005b7a:	42ac      	cmp	r4, r5
 8005b7c:	d01b      	beq.n	8005bb6 <oslib_test_005_001_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005b7e:	4e11      	ldr	r6, [pc, #68]	@ (8005bc4 <oslib_test_005_001_teardown.lto_priv.0+0x64>)
 8005b80:	e002      	b.n	8005b88 <oslib_test_005_001_teardown.lto_priv.0+0x28>
    p = p->next;
 8005b82:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005b84:	42ac      	cmp	r4, r5
 8005b86:	d016      	beq.n	8005bb6 <oslib_test_005_001_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005b88:	4631      	mov	r1, r6
 8005b8a:	f104 0008 	add.w	r0, r4, #8
 8005b8e:	f7fa fc37 	bl	8000400 <strcmp>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d1f5      	bne.n	8005b82 <oslib_test_005_001_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 8005b96:	b174      	cbz	r4, 8005bb6 <oslib_test_005_001_teardown.lto_priv.0+0x56>
    dep->refs++;
 8005b98:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 8005b9a:	4809      	ldr	r0, [pc, #36]	@ (8005bc0 <oslib_test_005_001_teardown.lto_priv.0+0x60>)
    dep->refs++;
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8005ba0:	f7ff fbbe 	bl	8005320 <chMtxUnlock>
  registered_object_t *rop;

  rop = chFactoryFindObject("myobj");
  if (rop != NULL) {
    while (rop->element.refs > 0U) {
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	b12b      	cbz	r3, 8005bb4 <oslib_test_005_001_teardown.lto_priv.0+0x54>
      chFactoryReleaseObject(rop);
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f7ff fc39 	bl	8005420 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8005bae:	6863      	ldr	r3, [r4, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f9      	bne.n	8005ba8 <oslib_test_005_001_teardown.lto_priv.0+0x48>
    }
  }
}
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
 8005bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005bba:	4801      	ldr	r0, [pc, #4]	@ (8005bc0 <oslib_test_005_001_teardown.lto_priv.0+0x60>)
 8005bbc:	f7ff bbb0 	b.w	8005320 <chMtxUnlock>
 8005bc0:	200010d8 	.word	0x200010d8
 8005bc4:	0800b4d0 	.word	0x0800b4d0
	...

08005bd0 <chHeapFree>:
void chHeapFree(void *p) {
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 8005bd2:	e950 7302 	ldrd	r7, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005bd6:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005bd8:	08db      	lsrs	r3, r3, #3
  qp = &heapp->header;
 8005bda:	1d3d      	adds	r5, r7, #4
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005bdc:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8005be0:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8005be2:	f1a0 0408 	sub.w	r4, r0, #8
  H_LOCK(heapp);
 8005be6:	370c      	adds	r7, #12
 8005be8:	2320      	movs	r3, #32
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	4638      	mov	r0, r7
 8005bf0:	f7ff faf6 	bl	80051e0 <chMtxLockS>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 8005bfa:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005bfc:	42ab      	cmp	r3, r5
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005bfe:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005c00:	d001      	beq.n	8005c06 <chHeapFree+0x36>
 8005c02:	429c      	cmp	r4, r3
 8005c04:	d902      	bls.n	8005c0c <chHeapFree+0x3c>
 8005c06:	b11a      	cbz	r2, 8005c10 <chHeapFree+0x40>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005c08:	4294      	cmp	r4, r2
 8005c0a:	d301      	bcc.n	8005c10 <chHeapFree+0x40>
void chHeapFree(void *p) {
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	e7f5      	b.n	8005bfc <chHeapFree+0x2c>
      H_NEXT(hp) = H_NEXT(qp);
 8005c10:	f846 2c08 	str.w	r2, [r6, #-8]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005c14:	f856 2c04 	ldr.w	r2, [r6, #-4]
      H_NEXT(qp) = hp;
 8005c18:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005c1a:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8005c1e:	3201      	adds	r2, #1
 8005c20:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8005c24:	4281      	cmp	r1, r0
 8005c26:	d00a      	beq.n	8005c3e <chHeapFree+0x6e>
      if ((H_LIMIT(qp) == hp)) {
 8005c28:	6859      	ldr	r1, [r3, #4]
 8005c2a:	1c4a      	adds	r2, r1, #1
 8005c2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005c30:	4294      	cmp	r4, r2
 8005c32:	d011      	beq.n	8005c58 <chHeapFree+0x88>
  H_UNLOCK(heapp);
 8005c34:	4638      	mov	r0, r7
}
 8005c36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8005c3a:	f7ff bb71 	b.w	8005320 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8005c3e:	6848      	ldr	r0, [r1, #4]
 8005c40:	4410      	add	r0, r2
 8005c42:	f846 0c04 	str.w	r0, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005c46:	680a      	ldr	r2, [r1, #0]
      if ((H_LIMIT(qp) == hp)) {
 8005c48:	6859      	ldr	r1, [r3, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8005c4a:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 8005c4e:	1c4a      	adds	r2, r1, #1
 8005c50:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8005c54:	4294      	cmp	r4, r2
 8005c56:	d1ed      	bne.n	8005c34 <chHeapFree+0x64>
        H_NEXT(qp) = H_NEXT(hp);
 8005c58:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8005c5c:	3201      	adds	r2, #1
 8005c5e:	440a      	add	r2, r1
        H_NEXT(qp) = H_NEXT(hp);
 8005c60:	e9c3 0200 	strd	r0, r2, [r3]
  H_UNLOCK(heapp);
 8005c64:	4638      	mov	r0, r7
}
 8005c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8005c6a:	f7ff bb59 	b.w	8005320 <chMtxUnlock>
 8005c6e:	bf00      	nop

08005c70 <chThdRelease.part.0>:
    REG_REMOVE(tp);
 8005c70:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8005c74:	2100      	movs	r1, #0
 8005c76:	6113      	str	r3, [r2, #16]
 8005c78:	615a      	str	r2, [r3, #20]
 8005c7a:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8005c7e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d00d      	beq.n	8005ca6 <chThdRelease.part.0+0x36>
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d000      	beq.n	8005c90 <chThdRelease.part.0+0x20>
 8005c8e:	4770      	bx	lr
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8005c90:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  return tp->wabase;
 8005c92:	69c2      	ldr	r2, [r0, #28]
 8005c94:	2020      	movs	r0, #32
 8005c96:	f380 8811 	msr	BASEPRI, r0
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f381 8811 	msr	BASEPRI, r1
}
 8005ca4:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 8005ca6:	69c0      	ldr	r0, [r0, #28]
 8005ca8:	f7ff bf92 	b.w	8005bd0 <chHeapFree>
 8005cac:	0000      	movs	r0, r0
	...

08005cb0 <chFactoryReleaseBuffer>:
 *
 * @param[in] dbp       dynamic buffer object reference
 *
 * @api
 */
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	2320      	movs	r3, #32
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	480f      	ldr	r0, [pc, #60]	@ (8005cf8 <chFactoryReleaseBuffer+0x48>)
 8005cbc:	f7ff fa90 	bl	80051e0 <chMtxLockS>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005ccc:	b95b      	cbnz	r3, 8005ce6 <chFactoryReleaseBuffer+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005cce:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <chFactoryReleaseBuffer+0x4c>)
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	e001      	b.n	8005cd8 <chFactoryReleaseBuffer+0x28>
    if (prev->next == element) {
 8005cd4:	4284      	cmp	r4, r0
 8005cd6:	d00b      	beq.n	8005cf0 <chFactoryReleaseBuffer+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8005cd8:	4602      	mov	r2, r0
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	4298      	cmp	r0, r3
 8005cde:	d1f9      	bne.n	8005cd4 <chFactoryReleaseBuffer+0x24>
  return NULL;
 8005ce0:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8005ce2:	f7ff ff75 	bl	8005bd0 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);

  F_UNLOCK();
}
 8005ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8005cea:	4803      	ldr	r0, [pc, #12]	@ (8005cf8 <chFactoryReleaseBuffer+0x48>)
 8005cec:	f7ff bb18 	b.w	8005320 <chMtxUnlock>
      prev->next = element->next;
 8005cf0:	6803      	ldr	r3, [r0, #0]
 8005cf2:	6013      	str	r3, [r2, #0]
      return element;
 8005cf4:	e7f5      	b.n	8005ce2 <chFactoryReleaseBuffer+0x32>
 8005cf6:	bf00      	nop
 8005cf8:	200010d8 	.word	0x200010d8
 8005cfc:	200010fc 	.word	0x200010fc

08005d00 <oslib_test_004_002_execute.lto_priv.0>:
 *   is freed using chHeapFree(), must not fail.
 * - [4.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_004_002_execute(void) {
 8005d00:	b538      	push	{r3, r4, r5, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [4.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8005d02:	4d1a      	ldr	r5, [pc, #104]	@ (8005d6c <oslib_test_004_002_execute.lto_priv.0+0x6c>)
 8005d04:	2301      	movs	r3, #1
 8005d06:	602b      	str	r3, [r5, #0]
 8005d08:	2320      	movs	r3, #32
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	4818      	ldr	r0, [pc, #96]	@ (8005d70 <oslib_test_004_002_execute.lto_priv.0+0x70>)
 8005d10:	f7ff fa66 	bl	80051e0 <chMtxLockS>
 8005d14:	2300      	movs	r3, #0
 8005d16:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 8005d1a:	4c16      	ldr	r4, [pc, #88]	@ (8005d74 <oslib_test_004_002_execute.lto_priv.0+0x74>)
  while (H_NEXT(qp) != NULL) {
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	d1fc      	bne.n	8005d1c <oslib_test_004_002_execute.lto_priv.0+0x1c>
  H_UNLOCK(heapp);
 8005d22:	4813      	ldr	r0, [pc, #76]	@ (8005d70 <oslib_test_004_002_execute.lto_priv.0+0x70>)
 8005d24:	f7ff fafc 	bl	8005320 <chMtxUnlock>
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8005d28:	4813      	ldr	r0, [pc, #76]	@ (8005d78 <oslib_test_004_002_execute.lto_priv.0+0x78>)
 8005d2a:	2110      	movs	r1, #16
 8005d2c:	f004 fe30 	bl	800a990 <chHeapAllocAligned.constprop.0>
  if (!condition)
 8005d30:	b150      	cbz	r0, 8005d48 <oslib_test_004_002_execute.lto_priv.0+0x48>
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 8005d32:	f7ff ff4d 	bl	8005bd0 <chHeapFree>
  }

  /* [4.2.2] Testing allocation failure.*/
  test_set_step(2);
 8005d36:	2302      	movs	r3, #2
 8005d38:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f004 fe26 	bl	800a990 <chHeapAllocAligned.constprop.0>
 8005d44:	b948      	cbnz	r0, 8005d5a <oslib_test_004_002_execute.lto_priv.0+0x5a>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
}
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
  test_local_fail      = true;
 8005d48:	4c0c      	ldr	r4, [pc, #48]	@ (8005d7c <oslib_test_004_002_execute.lto_priv.0+0x7c>)
  test_global_fail     = true;
 8005d4a:	480d      	ldr	r0, [pc, #52]	@ (8005d80 <oslib_test_004_002_execute.lto_priv.0+0x80>)
  test_failure_message = msg;
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d84 <oslib_test_004_002_execute.lto_priv.0+0x84>)
 8005d4e:	490e      	ldr	r1, [pc, #56]	@ (8005d88 <oslib_test_004_002_execute.lto_priv.0+0x88>)
 8005d50:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8005d52:	2301      	movs	r3, #1
 8005d54:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8005d56:	7003      	strb	r3, [r0, #0]
 8005d58:	bd38      	pop	{r3, r4, r5, pc}
  test_local_fail      = true;
 8005d5a:	4c08      	ldr	r4, [pc, #32]	@ (8005d7c <oslib_test_004_002_execute.lto_priv.0+0x7c>)
  test_global_fail     = true;
 8005d5c:	4808      	ldr	r0, [pc, #32]	@ (8005d80 <oslib_test_004_002_execute.lto_priv.0+0x80>)
  test_failure_message = msg;
 8005d5e:	4a09      	ldr	r2, [pc, #36]	@ (8005d84 <oslib_test_004_002_execute.lto_priv.0+0x84>)
 8005d60:	490a      	ldr	r1, [pc, #40]	@ (8005d8c <oslib_test_004_002_execute.lto_priv.0+0x8c>)
 8005d62:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8005d64:	2301      	movs	r3, #1
 8005d66:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8005d68:	7003      	strb	r3, [r0, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	200010b4 	.word	0x200010b4
 8005d70:	2000112c 	.word	0x2000112c
 8005d74:	20001124 	.word	0x20001124
 8005d78:	20000960 	.word	0x20000960
 8005d7c:	200010d1 	.word	0x200010d1
 8005d80:	200010d0 	.word	0x200010d0
 8005d84:	200010cc 	.word	0x200010cc
 8005d88:	0800b4d8 	.word	0x0800b4d8
 8005d8c:	0800b4ec 	.word	0x0800b4ec

08005d90 <oslib_test_005_002_teardown.lto_priv.0>:
 * - [5.2.6] Retrieving the dynamic buffer by name again, must not
 *   exist.
 * .
 */

static void oslib_test_005_002_teardown(void) {
 8005d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d94:	2320      	movs	r3, #32
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	4e25      	ldr	r6, [pc, #148]	@ (8005e30 <oslib_test_005_002_teardown.lto_priv.0+0xa0>)
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7ff fa1f 	bl	80051e0 <chMtxLockS>
 8005da2:	2300      	movs	r3, #0
 8005da4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8005da8:	f856 4f24 	ldr.w	r4, [r6, #36]!
  while (p != (dyn_element_t *)dlp) {
 8005dac:	42b4      	cmp	r4, r6
 8005dae:	d039      	beq.n	8005e24 <oslib_test_005_002_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005db0:	4f20      	ldr	r7, [pc, #128]	@ (8005e34 <oslib_test_005_002_teardown.lto_priv.0+0xa4>)
 8005db2:	e002      	b.n	8005dba <oslib_test_005_002_teardown.lto_priv.0+0x2a>
    p = p->next;
 8005db4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005db6:	42b4      	cmp	r4, r6
 8005db8:	d034      	beq.n	8005e24 <oslib_test_005_002_teardown.lto_priv.0+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f104 0008 	add.w	r0, r4, #8
 8005dc0:	f7fa fb1e 	bl	8000400 <strcmp>
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d1f4      	bne.n	8005db4 <oslib_test_005_002_teardown.lto_priv.0+0x24>
  if (dep != NULL) {
 8005dca:	b35c      	cbz	r4, 8005e24 <oslib_test_005_002_teardown.lto_priv.0+0x94>
    dep->refs++;
 8005dcc:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 8005dce:	4818      	ldr	r0, [pc, #96]	@ (8005e30 <oslib_test_005_002_teardown.lto_priv.0+0xa0>)
    dep->refs++;
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8005dd4:	f7ff faa4 	bl	8005320 <chMtxUnlock>
  dyn_buffer_t *dbp;

  dbp = chFactoryFindBuffer("mybuf");
  if (dbp != NULL) {
    while (dbp->element.refs > 0U) {
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	b1f3      	cbz	r3, 8005e1a <oslib_test_005_002_teardown.lto_priv.0+0x8a>
 8005ddc:	4f14      	ldr	r7, [pc, #80]	@ (8005e30 <oslib_test_005_002_teardown.lto_priv.0+0xa0>)
 8005dde:	f04f 0820 	mov.w	r8, #32
 8005de2:	f388 8811 	msr	BASEPRI, r8
 8005de6:	4638      	mov	r0, r7
 8005de8:	f7ff f9fa 	bl	80051e0 <chMtxLockS>
 8005dec:	f385 8811 	msr	BASEPRI, r5
  dep->refs--;
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005df6:	b953      	cbnz	r3, 8005e0e <oslib_test_005_002_teardown.lto_priv.0+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005df8:	480f      	ldr	r0, [pc, #60]	@ (8005e38 <oslib_test_005_002_teardown.lto_priv.0+0xa8>)
 8005dfa:	e001      	b.n	8005e00 <oslib_test_005_002_teardown.lto_priv.0+0x70>
    if (prev->next == element) {
 8005dfc:	4284      	cmp	r4, r0
 8005dfe:	d00e      	beq.n	8005e1e <oslib_test_005_002_teardown.lto_priv.0+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 8005e00:	4603      	mov	r3, r0
 8005e02:	6800      	ldr	r0, [r0, #0]
 8005e04:	42b0      	cmp	r0, r6
 8005e06:	d1f9      	bne.n	8005dfc <oslib_test_005_002_teardown.lto_priv.0+0x6c>
  return NULL;
 8005e08:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8005e0a:	f7ff fee1 	bl	8005bd0 <chHeapFree>
  F_UNLOCK();
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff fa86 	bl	8005320 <chMtxUnlock>
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e3      	bne.n	8005de2 <oslib_test_005_002_teardown.lto_priv.0+0x52>
      chFactoryReleaseBuffer(dbp);
    }
  }
}
 8005e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 8005e1e:	6822      	ldr	r2, [r4, #0]
 8005e20:	601a      	str	r2, [r3, #0]
      return element;
 8005e22:	e7f2      	b.n	8005e0a <oslib_test_005_002_teardown.lto_priv.0+0x7a>
 8005e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  F_UNLOCK();
 8005e28:	4801      	ldr	r0, [pc, #4]	@ (8005e30 <oslib_test_005_002_teardown.lto_priv.0+0xa0>)
 8005e2a:	f7ff ba79 	b.w	8005320 <chMtxUnlock>
 8005e2e:	bf00      	nop
 8005e30:	200010d8 	.word	0x200010d8
 8005e34:	0800b504 	.word	0x0800b504
 8005e38:	200010fc 	.word	0x200010fc
 8005e3c:	00000000 	.word	0x00000000

08005e40 <dyn_create_object_heap.lto_priv.0>:
                                             size_t size) {
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8005e42:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8005e44:	42a1      	cmp	r1, r4
                                             size_t size) {
 8005e46:	460d      	mov	r5, r1
 8005e48:	4606      	mov	r6, r0
 8005e4a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8005e4c:	d103      	bne.n	8005e56 <dyn_create_object_heap.lto_priv.0+0x16>
 8005e4e:	e00d      	b.n	8005e6c <dyn_create_object_heap.lto_priv.0+0x2c>
    p = p->next;
 8005e50:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005e52:	42a5      	cmp	r5, r4
 8005e54:	d00a      	beq.n	8005e6c <dyn_create_object_heap.lto_priv.0+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005e56:	2208      	movs	r2, #8
 8005e58:	4631      	mov	r1, r6
 8005e5a:	18a0      	adds	r0, r4, r2
 8005e5c:	f7fa fc40 	bl	80006e0 <strncmp>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d1f5      	bne.n	8005e50 <dyn_create_object_heap.lto_priv.0+0x10>
  if (dep != NULL) {
 8005e64:	b114      	cbz	r4, 8005e6c <dyn_create_object_heap.lto_priv.0+0x2c>
    return NULL;
 8005e66:	4604      	mov	r4, r0
}
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f004 fd8e 	bl	800a990 <chHeapAllocAligned.constprop.0>
  if (dep == NULL) {
 8005e74:	4604      	mov	r4, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d0f6      	beq.n	8005e68 <dyn_create_object_heap.lto_priv.0+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4410      	add	r0, r2
 8005e80:	f7fa fa32 	bl	80002e8 <strncpy>
  dep->next = dlp->next;
 8005e84:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8005e86:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8005e88:	e9c4 3200 	strd	r3, r2, [r4]
}
 8005e8c:	4620      	mov	r0, r4
  dlp->next = dep;
 8005e8e:	602c      	str	r4, [r5, #0]
}
 8005e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e92:	bf00      	nop
	...

08005ea0 <chFactoryReleaseSemaphore>:
 *
 * @param[in] dsp       dynamic semaphore object reference
 *
 * @api
 */
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	4d15      	ldr	r5, [pc, #84]	@ (8005f00 <chFactoryReleaseSemaphore+0x60>)
 8005eac:	4628      	mov	r0, r5
 8005eae:	f7ff f997 	bl	80051e0 <chMtxLockS>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005ebe:	b99b      	cbnz	r3, 8005ee8 <chFactoryReleaseSemaphore+0x48>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005ec0:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8005ec4:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d011      	beq.n	8005ef2 <chFactoryReleaseSemaphore+0x52>
    if (prev->next == element) {
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d1f9      	bne.n	8005ec6 <chFactoryReleaseSemaphore+0x26>
      prev->next = element->next;
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	600b      	str	r3, [r1, #0]
 8005ed6:	2320      	movs	r3, #32
 8005ed8:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005edc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	2300      	movs	r3, #0
  mp->next = php;
 8005ee2:	62ec      	str	r4, [r5, #44]	@ 0x2c
 8005ee4:	f383 8811 	msr	BASEPRI, r3
  dyn_release_object_pool(&dsp->element,
                          &ch_factory.sem_list,
                          &ch_factory.sem_pool);

  F_UNLOCK();
}
 8005ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8005eec:	4804      	ldr	r0, [pc, #16]	@ (8005f00 <chFactoryReleaseSemaphore+0x60>)
 8005eee:	f7ff ba17 	b.w	8005320 <chMtxUnlock>
 8005ef2:	2320      	movs	r3, #32
 8005ef4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	deff      	udf	#255	@ 0xff
 8005f00:	200010d8 	.word	0x200010d8
	...

08005f10 <oslib_test_005_003_teardown.lto_priv.0>:
 * - [5.3.6] Retrieving the dynamic semaphore by name again, must not
 *   exist.
 * .
 */

static void oslib_test_005_003_teardown(void) {
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	2320      	movs	r3, #32
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	4d15      	ldr	r5, [pc, #84]	@ (8005f70 <oslib_test_005_003_teardown.lto_priv.0+0x60>)
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f7ff f960 	bl	80051e0 <chMtxLockS>
 8005f20:	2300      	movs	r3, #0
 8005f22:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8005f26:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 8005f2a:	42ac      	cmp	r4, r5
 8005f2c:	d01b      	beq.n	8005f66 <oslib_test_005_003_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005f2e:	4e11      	ldr	r6, [pc, #68]	@ (8005f74 <oslib_test_005_003_teardown.lto_priv.0+0x64>)
 8005f30:	e002      	b.n	8005f38 <oslib_test_005_003_teardown.lto_priv.0+0x28>
    p = p->next;
 8005f32:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005f34:	42ac      	cmp	r4, r5
 8005f36:	d016      	beq.n	8005f66 <oslib_test_005_003_teardown.lto_priv.0+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005f38:	4631      	mov	r1, r6
 8005f3a:	f104 0008 	add.w	r0, r4, #8
 8005f3e:	f7fa fa5f 	bl	8000400 <strcmp>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d1f5      	bne.n	8005f32 <oslib_test_005_003_teardown.lto_priv.0+0x22>
  if (dep != NULL) {
 8005f46:	b174      	cbz	r4, 8005f66 <oslib_test_005_003_teardown.lto_priv.0+0x56>
    dep->refs++;
 8005f48:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 8005f4a:	4809      	ldr	r0, [pc, #36]	@ (8005f70 <oslib_test_005_003_teardown.lto_priv.0+0x60>)
    dep->refs++;
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8005f50:	f7ff f9e6 	bl	8005320 <chMtxUnlock>
  dyn_semaphore_t *dsp;

  dsp = chFactoryFindSemaphore("mysem");
  if (dsp != NULL) {
    while (dsp->element.refs > 0U) {
 8005f54:	6863      	ldr	r3, [r4, #4]
 8005f56:	b12b      	cbz	r3, 8005f64 <oslib_test_005_003_teardown.lto_priv.0+0x54>
      chFactoryReleaseSemaphore(dsp);
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7ff ffa1 	bl	8005ea0 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f9      	bne.n	8005f58 <oslib_test_005_003_teardown.lto_priv.0+0x48>
    }
  }
}
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
 8005f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f6a:	4801      	ldr	r0, [pc, #4]	@ (8005f70 <oslib_test_005_003_teardown.lto_priv.0+0x60>)
 8005f6c:	f7ff b9d8 	b.w	8005320 <chMtxUnlock>
 8005f70:	200010d8 	.word	0x200010d8
 8005f74:	0800b50c 	.word	0x0800b50c
	...

08005f80 <chFactoryReleaseMailbox>:
 *
 * @param[in] dmp       dynamic mailbox object reference
 *
 * @api
 */
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8005f80:	b510      	push	{r4, lr}
 8005f82:	2320      	movs	r3, #32
 8005f84:	4604      	mov	r4, r0
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	480f      	ldr	r0, [pc, #60]	@ (8005fc8 <chFactoryReleaseMailbox+0x48>)
 8005f8c:	f7ff f928 	bl	80051e0 <chMtxLockS>
 8005f90:	2300      	movs	r3, #0
 8005f92:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005f9c:	b95b      	cbnz	r3, 8005fb6 <chFactoryReleaseMailbox+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <chFactoryReleaseMailbox+0x4c>)
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	e001      	b.n	8005fa8 <chFactoryReleaseMailbox+0x28>
    if (prev->next == element) {
 8005fa4:	4284      	cmp	r4, r0
 8005fa6:	d00b      	beq.n	8005fc0 <chFactoryReleaseMailbox+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6800      	ldr	r0, [r0, #0]
 8005fac:	4298      	cmp	r0, r3
 8005fae:	d1f9      	bne.n	8005fa4 <chFactoryReleaseMailbox+0x24>
  return NULL;
 8005fb0:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8005fb2:	f7ff fe0d 	bl	8005bd0 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);

  F_UNLOCK();
}
 8005fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8005fba:	4803      	ldr	r0, [pc, #12]	@ (8005fc8 <chFactoryReleaseMailbox+0x48>)
 8005fbc:	f7ff b9b0 	b.w	8005320 <chMtxUnlock>
      prev->next = element->next;
 8005fc0:	6803      	ldr	r3, [r0, #0]
 8005fc2:	6013      	str	r3, [r2, #0]
      return element;
 8005fc4:	e7f5      	b.n	8005fb2 <chFactoryReleaseMailbox+0x32>
 8005fc6:	bf00      	nop
 8005fc8:	200010d8 	.word	0x200010d8
 8005fcc:	20001114 	.word	0x20001114

08005fd0 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	480f      	ldr	r0, [pc, #60]	@ (8006018 <chFactoryReleaseObjectsFIFO+0x48>)
 8005fdc:	f7ff f900 	bl	80051e0 <chMtxLockS>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8005fe6:	6863      	ldr	r3, [r4, #4]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8005fec:	b95b      	cbnz	r3, 8006006 <chFactoryReleaseObjectsFIFO+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8005fee:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <chFactoryReleaseObjectsFIFO+0x4c>)
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	e001      	b.n	8005ff8 <chFactoryReleaseObjectsFIFO+0x28>
    if (prev->next == element) {
 8005ff4:	4284      	cmp	r4, r0
 8005ff6:	d00b      	beq.n	8006010 <chFactoryReleaseObjectsFIFO+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6800      	ldr	r0, [r0, #0]
 8005ffc:	4298      	cmp	r0, r3
 8005ffe:	d1f9      	bne.n	8005ff4 <chFactoryReleaseObjectsFIFO+0x24>
  return NULL;
 8006000:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006002:	f7ff fde5 	bl	8005bd0 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  F_UNLOCK();
}
 8006006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800600a:	4803      	ldr	r0, [pc, #12]	@ (8006018 <chFactoryReleaseObjectsFIFO+0x48>)
 800600c:	f7ff b988 	b.w	8005320 <chMtxUnlock>
      prev->next = element->next;
 8006010:	6803      	ldr	r3, [r0, #0]
 8006012:	6013      	str	r3, [r2, #0]
      return element;
 8006014:	e7f5      	b.n	8006002 <chFactoryReleaseObjectsFIFO+0x32>
 8006016:	bf00      	nop
 8006018:	200010d8 	.word	0x200010d8
 800601c:	20001118 	.word	0x20001118

08006020 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8006020:	b510      	push	{r4, lr}
 8006022:	2320      	movs	r3, #32
 8006024:	4604      	mov	r4, r0
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	480f      	ldr	r0, [pc, #60]	@ (8006068 <chFactoryReleasePipe+0x48>)
 800602c:	f7ff f8d8 	bl	80051e0 <chMtxLockS>
 8006030:	2300      	movs	r3, #0
 8006032:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8006036:	6863      	ldr	r3, [r4, #4]
 8006038:	3b01      	subs	r3, #1
 800603a:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800603c:	b95b      	cbnz	r3, 8006056 <chFactoryReleasePipe+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800603e:	4b0b      	ldr	r3, [pc, #44]	@ (800606c <chFactoryReleasePipe+0x4c>)
 8006040:	4618      	mov	r0, r3
 8006042:	e001      	b.n	8006048 <chFactoryReleasePipe+0x28>
    if (prev->next == element) {
 8006044:	4284      	cmp	r4, r0
 8006046:	d00b      	beq.n	8006060 <chFactoryReleasePipe+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8006048:	4602      	mov	r2, r0
 800604a:	6800      	ldr	r0, [r0, #0]
 800604c:	4298      	cmp	r0, r3
 800604e:	d1f9      	bne.n	8006044 <chFactoryReleasePipe+0x24>
  return NULL;
 8006050:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006052:	f7ff fdbd 	bl	8005bd0 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
}
 8006056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800605a:	4803      	ldr	r0, [pc, #12]	@ (8006068 <chFactoryReleasePipe+0x48>)
 800605c:	f7ff b960 	b.w	8005320 <chMtxUnlock>
      prev->next = element->next;
 8006060:	6803      	ldr	r3, [r0, #0]
 8006062:	6013      	str	r3, [r2, #0]
      return element;
 8006064:	e7f5      	b.n	8006052 <chFactoryReleasePipe+0x32>
 8006066:	bf00      	nop
 8006068:	200010d8 	.word	0x200010d8
 800606c:	2000111c 	.word	0x2000111c

08006070 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006070:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8006074:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8006076:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800607a:	2300      	movs	r3, #0
 800607c:	f383 8811 	msr	BASEPRI, r3
}
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
	...

08006090 <print_line.lto_priv.0>:
static void print_line(void) {
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4d08      	ldr	r5, [pc, #32]	@ (80060b4 <print_line.lto_priv.0+0x24>)
 8006094:	244c      	movs	r4, #76	@ 0x4c
    streamPut(test_chp, '-');
 8006096:	6828      	ldr	r0, [r5, #0]
 8006098:	6803      	ldr	r3, [r0, #0]
 800609a:	212d      	movs	r1, #45	@ 0x2d
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80060a0:	3c01      	subs	r4, #1
 80060a2:	d1f8      	bne.n	8006096 <print_line.lto_priv.0+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80060a4:	6828      	ldr	r0, [r5, #0]
 80060a6:	4904      	ldr	r1, [pc, #16]	@ (80060b8 <print_line.lto_priv.0+0x28>)
 80060a8:	6803      	ldr	r3, [r0, #0]
}
 80060aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2202      	movs	r2, #2
 80060b2:	4718      	bx	r3
 80060b4:	200010d4 	.word	0x200010d4
 80060b8:	0800b514 	.word	0x0800b514
 80060bc:	00000000 	.word	0x00000000

080060c0 <_test_assert>:
  if (!condition)
 80060c0:	b108      	cbz	r0, 80060c6 <_test_assert+0x6>
  return false;
 80060c2:	2000      	movs	r0, #0
}
 80060c4:	4770      	bx	lr
bool _test_assert(bool condition, const char *msg) {
 80060c6:	b410      	push	{r4}
  test_global_fail     = true;
 80060c8:	4a04      	ldr	r2, [pc, #16]	@ (80060dc <_test_assert+0x1c>)
  test_local_fail      = true;
 80060ca:	4c05      	ldr	r4, [pc, #20]	@ (80060e0 <_test_assert+0x20>)
  test_failure_message = msg;
 80060cc:	4b05      	ldr	r3, [pc, #20]	@ (80060e4 <_test_assert+0x24>)
  test_local_fail      = true;
 80060ce:	2001      	movs	r0, #1
 80060d0:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 80060d2:	7010      	strb	r0, [r2, #0]
}
 80060d4:	bc10      	pop	{r4}
  test_failure_message = msg;
 80060d6:	6019      	str	r1, [r3, #0]
}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	200010d0 	.word	0x200010d0
 80060e0:	200010d1 	.word	0x200010d1
 80060e4:	200010cc 	.word	0x200010cc
	...

080060f0 <rt_test_006_005_execute.lto_priv.0>:
static void rt_test_006_005_execute(void) {
 80060f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80060f4:	4e64      	ldr	r6, [pc, #400]	@ (8006288 <rt_test_006_005_execute.lto_priv.0+0x198>)
  test_set_step(2);
 80060f6:	4d65      	ldr	r5, [pc, #404]	@ (800628c <rt_test_006_005_execute.lto_priv.0+0x19c>)
  return chThdGetSelfX()->prio;
 80060f8:	69b2      	ldr	r2, [r6, #24]
 80060fa:	2302      	movs	r3, #2
 80060fc:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8006100:	602b      	str	r3, [r5, #0]
 8006102:	2720      	movs	r7, #32
 8006104:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8006108:	4c61      	ldr	r4, [pc, #388]	@ (8006290 <rt_test_006_005_execute.lto_priv.0+0x1a0>)
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	b163      	cbz	r3, 8006128 <rt_test_006_005_execute.lto_priv.0+0x38>
 800610e:	2300      	movs	r3, #0
 8006110:	f383 8811 	msr	BASEPRI, r3
  test_local_fail      = true;
 8006114:	4c5f      	ldr	r4, [pc, #380]	@ (8006294 <rt_test_006_005_execute.lto_priv.0+0x1a4>)
  test_global_fail     = true;
 8006116:	4860      	ldr	r0, [pc, #384]	@ (8006298 <rt_test_006_005_execute.lto_priv.0+0x1a8>)
  test_failure_message = msg;
 8006118:	4a60      	ldr	r2, [pc, #384]	@ (800629c <rt_test_006_005_execute.lto_priv.0+0x1ac>)
 800611a:	4961      	ldr	r1, [pc, #388]	@ (80062a0 <rt_test_006_005_execute.lto_priv.0+0x1b0>)
 800611c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800611e:	2301      	movs	r3, #1
 8006120:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8006122:	7003      	strb	r3, [r0, #0]
}
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mp->owner = currp;
 8006128:	69b2      	ldr	r2, [r6, #24]
 800612a:	60a2      	str	r2, [r4, #8]
  mp->next = currp->mtxlist;
 800612c:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800612e:	60e1      	str	r1, [r4, #12]
  currp->mtxlist = mp;
 8006130:	6394      	str	r4, [r2, #56]	@ 0x38
 8006132:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8006136:	2203      	movs	r2, #3
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 800613e:	68a2      	ldr	r2, [r4, #8]
 8006140:	2a00      	cmp	r2, #0
 8006142:	d066      	beq.n	8006212 <rt_test_006_005_execute.lto_priv.0+0x122>
 8006144:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8006148:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 800614a:	4620      	mov	r0, r4
  test_set_step(4);
 800614c:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m1);
 800614e:	f7ff f8e7 	bl	8005320 <chMtxUnlock>
  if (!condition)
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d16d      	bne.n	8006234 <rt_test_006_005_execute.lto_priv.0+0x144>
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	42a2      	cmp	r2, r4
 800615c:	d173      	bne.n	8006246 <rt_test_006_005_execute.lto_priv.0+0x156>
 800615e:	69b1      	ldr	r1, [r6, #24]
 8006160:	6889      	ldr	r1, [r1, #8]
  test_set_step(5);
 8006162:	2005      	movs	r0, #5
 8006164:	4588      	cmp	r8, r1
 8006166:	6028      	str	r0, [r5, #0]
 8006168:	d17a      	bne.n	8006260 <rt_test_006_005_execute.lto_priv.0+0x170>
  test_set_step(6);
 800616a:	2106      	movs	r1, #6
 800616c:	6029      	str	r1, [r5, #0]
 800616e:	f387 8811 	msr	BASEPRI, r7
 8006172:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006176:	f1bc 0f00 	cmp.w	ip, #0
 800617a:	d1c9      	bne.n	8006110 <rt_test_006_005_execute.lto_priv.0+0x20>
  mp->owner = currp;
 800617c:	69b1      	ldr	r1, [r6, #24]
 800617e:	6091      	str	r1, [r2, #8]
  mp->next = currp->mtxlist;
 8006180:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8006182:	60d3      	str	r3, [r2, #12]
  currp->mtxlist = mp;
 8006184:	638a      	str	r2, [r1, #56]	@ 0x38
 8006186:	f38c 8811 	msr	BASEPRI, ip
 800618a:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 800618e:	6893      	ldr	r3, [r2, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d06e      	beq.n	8006272 <rt_test_006_005_execute.lto_priv.0+0x182>
 8006194:	f38c 8811 	msr	BASEPRI, ip
 8006198:	f387 8811 	msr	BASEPRI, r7
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *ctp = currp;
 800619c:	69b7      	ldr	r7, [r6, #24]

  if (ctp->mtxlist != NULL) {
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	b30b      	cbz	r3, 80061e6 <rt_test_006_005_execute.lto_priv.0+0xf6>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80061a2:	6819      	ldr	r1, [r3, #0]
    do {
      mutex_t *mp = ctp->mtxlist;
      ctp->mtxlist = mp->next;
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	63ba      	str	r2, [r7, #56]	@ 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 80061a8:	428b      	cmp	r3, r1
 80061aa:	d055      	beq.n	8006258 <rt_test_006_005_execute.lto_priv.0+0x168>
  tqp->next             = tp->queue.next;
 80061ac:	680a      	ldr	r2, [r1, #0]
 80061ae:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80061b0:	6053      	str	r3, [r2, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        tp = queue_fifo_remove(&mp->queue);
        mp->owner   = tp;
        mp->next    = tp->mtxlist;
 80061b2:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
        mp->owner   = tp;
 80061b4:	6099      	str	r1, [r3, #8]
        mp->next    = tp->mtxlist;
 80061b6:	60da      	str	r2, [r3, #12]
  } while (cp->prio >= tp->prio);
 80061b8:	6888      	ldr	r0, [r1, #8]
        tp->mtxlist = mp;
 80061ba:	638b      	str	r3, [r1, #56]	@ 0x38
  cp = (thread_t *)&ch.rlist.queue;
 80061bc:	4b32      	ldr	r3, [pc, #200]	@ (8006288 <rt_test_006_005_execute.lto_priv.0+0x198>)
  tp->state = CH_STATE_READY;
 80061be:	f881 c020 	strb.w	ip, [r1, #32]
    cp = cp->queue.next;
 80061c2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	4282      	cmp	r2, r0
 80061c8:	d2fb      	bcs.n	80061c2 <rt_test_006_005_execute.lto_priv.0+0xd2>
  tp->queue.prev             = cp->queue.prev;
 80061ca:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80061cc:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 80061ce:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 80061d0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80061d2:	6059      	str	r1, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (ctp->mtxlist != NULL);
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e3      	bne.n	80061a2 <rt_test_006_005_execute.lto_priv.0+0xb2>
    ctp->prio = ctp->realprio;
 80061da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  return firstprio(&ch.rlist.queue) > currp->prio;
 80061dc:	6832      	ldr	r2, [r6, #0]
 80061de:	60bb      	str	r3, [r7, #8]
  if (chSchIsRescRequiredI()) {
 80061e0:	6892      	ldr	r2, [r2, #8]
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d34d      	bcc.n	8006282 <rt_test_006_005_execute.lto_priv.0+0x192>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	68a3      	ldr	r3, [r4, #8]
 80061ee:	bb0b      	cbnz	r3, 8006234 <rt_test_006_005_execute.lto_priv.0+0x144>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	d127      	bne.n	8006246 <rt_test_006_005_execute.lto_priv.0+0x156>
 80061f6:	69b2      	ldr	r2, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80061f8:	492a      	ldr	r1, [pc, #168]	@ (80062a4 <rt_test_006_005_execute.lto_priv.0+0x1b4>)
 80061fa:	6890      	ldr	r0, [r2, #8]
 80061fc:	eba0 0008 	sub.w	r0, r0, r8
  test_set_step(7);
 8006200:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8006202:	fab0 f080 	clz	r0, r0
  test_set_step(7);
 8006206:	602b      	str	r3, [r5, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8006208:	0940      	lsrs	r0, r0, #5
}
 800620a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800620e:	f7ff bf57 	b.w	80060c0 <_test_assert>
  mp->owner = currp;
 8006212:	69b3      	ldr	r3, [r6, #24]
 8006214:	60a3      	str	r3, [r4, #8]
  mp->next = currp->mtxlist;
 8006216:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006218:	60e1      	str	r1, [r4, #12]
  currp->mtxlist = mp;
 800621a:	639c      	str	r4, [r3, #56]	@ 0x38
 800621c:	f382 8811 	msr	BASEPRI, r2
  test_local_fail      = true;
 8006220:	4c1c      	ldr	r4, [pc, #112]	@ (8006294 <rt_test_006_005_execute.lto_priv.0+0x1a4>)
  test_global_fail     = true;
 8006222:	481d      	ldr	r0, [pc, #116]	@ (8006298 <rt_test_006_005_execute.lto_priv.0+0x1a8>)
  test_failure_message = msg;
 8006224:	4a1d      	ldr	r2, [pc, #116]	@ (800629c <rt_test_006_005_execute.lto_priv.0+0x1ac>)
 8006226:	4920      	ldr	r1, [pc, #128]	@ (80062a8 <rt_test_006_005_execute.lto_priv.0+0x1b8>)
 8006228:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800622a:	2301      	movs	r3, #1
 800622c:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800622e:	7003      	strb	r3, [r0, #0]
}
 8006230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_local_fail      = true;
 8006234:	4c17      	ldr	r4, [pc, #92]	@ (8006294 <rt_test_006_005_execute.lto_priv.0+0x1a4>)
  test_global_fail     = true;
 8006236:	4818      	ldr	r0, [pc, #96]	@ (8006298 <rt_test_006_005_execute.lto_priv.0+0x1a8>)
  test_failure_message = msg;
 8006238:	4a18      	ldr	r2, [pc, #96]	@ (800629c <rt_test_006_005_execute.lto_priv.0+0x1ac>)
 800623a:	491c      	ldr	r1, [pc, #112]	@ (80062ac <rt_test_006_005_execute.lto_priv.0+0x1bc>)
 800623c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800623e:	2301      	movs	r3, #1
 8006240:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8006242:	7003      	strb	r3, [r0, #0]
 8006244:	e76e      	b.n	8006124 <rt_test_006_005_execute.lto_priv.0+0x34>
  test_local_fail      = true;
 8006246:	4c13      	ldr	r4, [pc, #76]	@ (8006294 <rt_test_006_005_execute.lto_priv.0+0x1a4>)
  test_global_fail     = true;
 8006248:	4813      	ldr	r0, [pc, #76]	@ (8006298 <rt_test_006_005_execute.lto_priv.0+0x1a8>)
  test_failure_message = msg;
 800624a:	4a14      	ldr	r2, [pc, #80]	@ (800629c <rt_test_006_005_execute.lto_priv.0+0x1ac>)
 800624c:	4918      	ldr	r1, [pc, #96]	@ (80062b0 <rt_test_006_005_execute.lto_priv.0+0x1c0>)
 800624e:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8006250:	2301      	movs	r3, #1
 8006252:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8006254:	7003      	strb	r3, [r0, #0]
 8006256:	e765      	b.n	8006124 <rt_test_006_005_execute.lto_priv.0+0x34>
        mp->owner = NULL;
 8006258:	f8c3 c008 	str.w	ip, [r3, #8]
 800625c:	4613      	mov	r3, r2
 800625e:	e7ba      	b.n	80061d6 <rt_test_006_005_execute.lto_priv.0+0xe6>
  test_local_fail      = true;
 8006260:	4c0c      	ldr	r4, [pc, #48]	@ (8006294 <rt_test_006_005_execute.lto_priv.0+0x1a4>)
  test_global_fail     = true;
 8006262:	480d      	ldr	r0, [pc, #52]	@ (8006298 <rt_test_006_005_execute.lto_priv.0+0x1a8>)
  test_failure_message = msg;
 8006264:	4a0d      	ldr	r2, [pc, #52]	@ (800629c <rt_test_006_005_execute.lto_priv.0+0x1ac>)
 8006266:	490f      	ldr	r1, [pc, #60]	@ (80062a4 <rt_test_006_005_execute.lto_priv.0+0x1b4>)
 8006268:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800626a:	2301      	movs	r3, #1
 800626c:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800626e:	7003      	strb	r3, [r0, #0]
 8006270:	e758      	b.n	8006124 <rt_test_006_005_execute.lto_priv.0+0x34>
  mp->owner = currp;
 8006272:	69b1      	ldr	r1, [r6, #24]
 8006274:	6091      	str	r1, [r2, #8]
  mp->next = currp->mtxlist;
 8006276:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8006278:	60d0      	str	r0, [r2, #12]
  currp->mtxlist = mp;
 800627a:	638a      	str	r2, [r1, #56]	@ 0x38
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	e7ce      	b.n	8006220 <rt_test_006_005_execute.lto_priv.0+0x130>
    chSchDoRescheduleAhead();
 8006282:	f7fd fe65 	bl	8003f50 <chSchDoReschedule>
 8006286:	e7ae      	b.n	80061e6 <rt_test_006_005_execute.lto_priv.0+0xf6>
 8006288:	200011c0 	.word	0x200011c0
 800628c:	200010b4 	.word	0x200010b4
 8006290:	200008d0 	.word	0x200008d0
 8006294:	200010d1 	.word	0x200010d1
 8006298:	200010d0 	.word	0x200010d0
 800629c:	200010cc 	.word	0x200010cc
 80062a0:	0800b518 	.word	0x0800b518
 80062a4:	0800b450 	.word	0x0800b450
 80062a8:	0800b528 	.word	0x0800b528
 80062ac:	0800b534 	.word	0x0800b534
 80062b0:	0800b1d8 	.word	0x0800b1d8
	...

080062c0 <oslib_test_001_001_execute.lto_priv.0>:
static void oslib_test_001_001_execute(void) {
 80062c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80062c4:	4f72      	ldr	r7, [pc, #456]	@ (8006490 <oslib_test_001_001_execute.lto_priv.0+0x1d0>)
 80062c6:	2501      	movs	r5, #1
static void oslib_test_001_001_execute(void) {
 80062c8:	b085      	sub	sp, #20
  test_set_step(1);
 80062ca:	603d      	str	r5, [r7, #0]
 80062cc:	2620      	movs	r6, #32
 80062ce:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80062d2:	4c70      	ldr	r4, [pc, #448]	@ (8006494 <oslib_test_001_001_execute.lto_priv.0+0x1d4>)
 80062d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80062d8:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition)
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d17e      	bne.n	80063e2 <oslib_test_001_001_execute.lto_priv.0+0x122>
 80062e4:	f04f 0900 	mov.w	r9, #0
 80062e8:	f389 8811 	msr	BASEPRI, r9
  test_set_step(2);
 80062ec:	2302      	movs	r3, #2
 80062ee:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 80062f0:	f004 fa8e 	bl	800a810 <chMBReset.constprop.0>
 80062f4:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80062f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80062fc:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80062fe:	6922      	ldr	r2, [r4, #16]
 8006300:	ebc2 08a3 	rsb	r8, r2, r3, asr #2
 8006304:	f1b8 0f04 	cmp.w	r8, #4
 8006308:	d178      	bne.n	80063fc <oslib_test_001_001_execute.lto_priv.0+0x13c>
 800630a:	f389 8811 	msr	BASEPRI, r9
 800630e:	f386 8811 	msr	BASEPRI, r6
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f040 8087 	bne.w	8006428 <oslib_test_001_001_execute.lto_priv.0+0x168>
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f386 8811 	msr	BASEPRI, r6
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	68a2      	ldr	r2, [r4, #8]
 8006326:	4291      	cmp	r1, r2
 8006328:	d174      	bne.n	8006414 <oslib_test_001_001_execute.lto_priv.0+0x154>
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f386 8811 	msr	BASEPRI, r6
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	68e2      	ldr	r2, [r4, #12]
 8006336:	4291      	cmp	r1, r2
 8006338:	f040 808b 	bne.w	8006452 <oslib_test_001_001_execute.lto_priv.0+0x192>
 800633c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8006340:	2203      	movs	r2, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8006342:	4618      	mov	r0, r3
 8006344:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006348:	9301      	str	r3, [sp, #4]
  test_set_step(3);
 800634a:	603a      	str	r2, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800634c:	f004 f9f8 	bl	800a740 <chMBPostTimeout.constprop.0>
 8006350:	3002      	adds	r0, #2
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	d174      	bne.n	8006440 <oslib_test_001_001_execute.lto_priv.0+0x180>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8006356:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800635a:	4618      	mov	r0, r3
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	f004 f987 	bl	800a670 <chMBPostAheadTimeout.constprop.0>
 8006362:	3002      	adds	r0, #2
 8006364:	d16c      	bne.n	8006440 <oslib_test_001_001_execute.lto_priv.0+0x180>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8006366:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800636a:	a803      	add	r0, sp, #12
 800636c:	f004 f8e0 	bl	800a530 <chMBFetchTimeout.constprop.0>
 8006370:	3002      	adds	r0, #2
 8006372:	d165      	bne.n	8006440 <oslib_test_001_001_execute.lto_priv.0+0x180>
  mbp->reset = false;
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	7523      	strb	r3, [r4, #20]
  test_set_step(4);
 8006378:	f8c7 8000 	str.w	r8, [r7]
 800637c:	2542      	movs	r5, #66	@ 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800637e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006382:	4628      	mov	r0, r5
 8006384:	f004 f9dc 	bl	800a740 <chMBPostTimeout.constprop.0>
 8006388:	2800      	cmp	r0, #0
 800638a:	d16c      	bne.n	8006466 <oslib_test_001_001_execute.lto_priv.0+0x1a6>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800638c:	3501      	adds	r5, #1
 800638e:	2d45      	cmp	r5, #69	@ 0x45
 8006390:	d1f5      	bne.n	800637e <oslib_test_001_001_execute.lto_priv.0+0xbe>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8006392:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006396:	2041      	movs	r0, #65	@ 0x41
 8006398:	f004 f96a 	bl	800a670 <chMBPostAheadTimeout.constprop.0>
 800639c:	4605      	mov	r5, r0
 800639e:	2800      	cmp	r0, #0
 80063a0:	d161      	bne.n	8006466 <oslib_test_001_001_execute.lto_priv.0+0x1a6>
  test_set_step(5);
 80063a2:	2305      	movs	r3, #5
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	f04f 0920 	mov.w	r9, #32
 80063aa:	f389 8811 	msr	BASEPRI, r9
  return (size_t)(mbp->top - mbp->buffer);
 80063ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	6922      	ldr	r2, [r4, #16]
 80063b6:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80063ba:	d15d      	bne.n	8006478 <oslib_test_001_001_execute.lto_priv.0+0x1b8>
 80063bc:	f380 8811 	msr	BASEPRI, r0
 80063c0:	f389 8811 	msr	BASEPRI, r9
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80063c4:	6920      	ldr	r0, [r4, #16]
 80063c6:	4934      	ldr	r1, [pc, #208]	@ (8006498 <oslib_test_001_001_execute.lto_priv.0+0x1d8>)
 80063c8:	f1a0 0004 	sub.w	r0, r0, #4
 80063cc:	fab0 f080 	clz	r0, r0
 80063d0:	0940      	lsrs	r0, r0, #5
 80063d2:	f7ff fe75 	bl	80060c0 <_test_assert>
 80063d6:	4606      	mov	r6, r0
 80063d8:	2800      	cmp	r0, #0
 80063da:	d075      	beq.n	80064c8 <oslib_test_001_001_execute.lto_priv.0+0x208>
 80063dc:	f385 8811 	msr	BASEPRI, r5
 80063e0:	e009      	b.n	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
  test_local_fail      = true;
 80063e2:	482e      	ldr	r0, [pc, #184]	@ (800649c <oslib_test_001_001_execute.lto_priv.0+0x1dc>)
  test_global_fail     = true;
 80063e4:	492e      	ldr	r1, [pc, #184]	@ (80064a0 <oslib_test_001_001_execute.lto_priv.0+0x1e0>)
  test_failure_message = msg;
 80063e6:	4b2f      	ldr	r3, [pc, #188]	@ (80064a4 <oslib_test_001_001_execute.lto_priv.0+0x1e4>)
 80063e8:	4a2f      	ldr	r2, [pc, #188]	@ (80064a8 <oslib_test_001_001_execute.lto_priv.0+0x1e8>)
 80063ea:	601a      	str	r2, [r3, #0]
  test_local_fail      = true;
 80063ec:	7005      	strb	r5, [r0, #0]
  test_global_fail     = true;
 80063ee:	700d      	strb	r5, [r1, #0]
 80063f0:	2300      	movs	r3, #0
 80063f2:	f383 8811 	msr	BASEPRI, r3
}
 80063f6:	b005      	add	sp, #20
 80063f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063fc:	4a28      	ldr	r2, [pc, #160]	@ (80064a0 <oslib_test_001_001_execute.lto_priv.0+0x1e0>)
  test_local_fail      = true;
 80063fe:	4927      	ldr	r1, [pc, #156]	@ (800649c <oslib_test_001_001_execute.lto_priv.0+0x1dc>)
  test_failure_message = msg;
 8006400:	4b28      	ldr	r3, [pc, #160]	@ (80064a4 <oslib_test_001_001_execute.lto_priv.0+0x1e4>)
  test_global_fail     = true;
 8006402:	7015      	strb	r5, [r2, #0]
  test_failure_message = msg;
 8006404:	4a29      	ldr	r2, [pc, #164]	@ (80064ac <oslib_test_001_001_execute.lto_priv.0+0x1ec>)
  test_local_fail      = true;
 8006406:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f389 8811 	msr	BASEPRI, r9
 800640e:	b005      	add	sp, #20
 8006410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  test_global_fail     = true;
 8006414:	4922      	ldr	r1, [pc, #136]	@ (80064a0 <oslib_test_001_001_execute.lto_priv.0+0x1e0>)
  test_local_fail      = true;
 8006416:	4821      	ldr	r0, [pc, #132]	@ (800649c <oslib_test_001_001_execute.lto_priv.0+0x1dc>)
  test_failure_message = msg;
 8006418:	4a22      	ldr	r2, [pc, #136]	@ (80064a4 <oslib_test_001_001_execute.lto_priv.0+0x1e4>)
  test_global_fail     = true;
 800641a:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 800641c:	4924      	ldr	r1, [pc, #144]	@ (80064b0 <oslib_test_001_001_execute.lto_priv.0+0x1f0>)
  test_local_fail      = true;
 800641e:	7005      	strb	r5, [r0, #0]
  test_failure_message = msg;
 8006420:	6011      	str	r1, [r2, #0]
 8006422:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006426:	e7e6      	b.n	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
  test_global_fail     = true;
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <oslib_test_001_001_execute.lto_priv.0+0x1e0>)
  test_local_fail      = true;
 800642a:	491c      	ldr	r1, [pc, #112]	@ (800649c <oslib_test_001_001_execute.lto_priv.0+0x1dc>)
  test_failure_message = msg;
 800642c:	4b1d      	ldr	r3, [pc, #116]	@ (80064a4 <oslib_test_001_001_execute.lto_priv.0+0x1e4>)
  test_global_fail     = true;
 800642e:	7015      	strb	r5, [r2, #0]
  test_failure_message = msg;
 8006430:	4a20      	ldr	r2, [pc, #128]	@ (80064b4 <oslib_test_001_001_execute.lto_priv.0+0x1f4>)
  test_local_fail      = true;
 8006432:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	f389 8811 	msr	BASEPRI, r9
}
 800643a:	b005      	add	sp, #20
 800643c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 8006440:	4c16      	ldr	r4, [pc, #88]	@ (800649c <oslib_test_001_001_execute.lto_priv.0+0x1dc>)
  test_global_fail     = true;
 8006442:	4817      	ldr	r0, [pc, #92]	@ (80064a0 <oslib_test_001_001_execute.lto_priv.0+0x1e0>)
  test_failure_message = msg;
 8006444:	4a17      	ldr	r2, [pc, #92]	@ (80064a4 <oslib_test_001_001_execute.lto_priv.0+0x1e4>)
 8006446:	491c      	ldr	r1, [pc, #112]	@ (80064b8 <oslib_test_001_001_execute.lto_priv.0+0x1f8>)
 8006448:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800644a:	2301      	movs	r3, #1
 800644c:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800644e:	7003      	strb	r3, [r0, #0]
 8006450:	e7d1      	b.n	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
 8006452:	4913      	ldr	r1, [pc, #76]	@ (80064a0 <oslib_test_001_001_execute.lto_priv.0+0x1e0>)
  test_local_fail      = true;
 8006454:	4811      	ldr	r0, [pc, #68]	@ (800649c <oslib_test_001_001_execute.lto_priv.0+0x1dc>)
  test_failure_message = msg;
 8006456:	4a13      	ldr	r2, [pc, #76]	@ (80064a4 <oslib_test_001_001_execute.lto_priv.0+0x1e4>)
  test_global_fail     = true;
 8006458:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 800645a:	4918      	ldr	r1, [pc, #96]	@ (80064bc <oslib_test_001_001_execute.lto_priv.0+0x1fc>)
  test_local_fail      = true;
 800645c:	7005      	strb	r5, [r0, #0]
  test_failure_message = msg;
 800645e:	6011      	str	r1, [r2, #0]
 8006460:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006464:	e7c7      	b.n	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
  test_local_fail      = true;
 8006466:	4c0d      	ldr	r4, [pc, #52]	@ (800649c <oslib_test_001_001_execute.lto_priv.0+0x1dc>)
  test_global_fail     = true;
 8006468:	480d      	ldr	r0, [pc, #52]	@ (80064a0 <oslib_test_001_001_execute.lto_priv.0+0x1e0>)
  test_failure_message = msg;
 800646a:	4a0e      	ldr	r2, [pc, #56]	@ (80064a4 <oslib_test_001_001_execute.lto_priv.0+0x1e4>)
 800646c:	4914      	ldr	r1, [pc, #80]	@ (80064c0 <oslib_test_001_001_execute.lto_priv.0+0x200>)
 800646e:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8006470:	2301      	movs	r3, #1
 8006472:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8006474:	7003      	strb	r3, [r0, #0]
 8006476:	e7be      	b.n	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
  test_local_fail      = true;
 8006478:	4908      	ldr	r1, [pc, #32]	@ (800649c <oslib_test_001_001_execute.lto_priv.0+0x1dc>)
  test_global_fail     = true;
 800647a:	4809      	ldr	r0, [pc, #36]	@ (80064a0 <oslib_test_001_001_execute.lto_priv.0+0x1e0>)
  test_failure_message = msg;
 800647c:	4a09      	ldr	r2, [pc, #36]	@ (80064a4 <oslib_test_001_001_execute.lto_priv.0+0x1e4>)
  test_local_fail      = true;
 800647e:	2301      	movs	r3, #1
 8006480:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8006482:	4910      	ldr	r1, [pc, #64]	@ (80064c4 <oslib_test_001_001_execute.lto_priv.0+0x204>)
  test_global_fail     = true;
 8006484:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 8006486:	6011      	str	r1, [r2, #0]
 8006488:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800648c:	e7b3      	b.n	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
 800648e:	bf00      	nop
 8006490:	200010b4 	.word	0x200010b4
 8006494:	20000888 	.word	0x20000888
 8006498:	0800b5c0 	.word	0x0800b5c0
 800649c:	200010d1 	.word	0x200010d1
 80064a0:	200010d0 	.word	0x200010d0
 80064a4:	200010cc 	.word	0x200010cc
 80064a8:	0800b2b0 	.word	0x0800b2b0
 80064ac:	0800b540 	.word	0x0800b540
 80064b0:	0800b558 	.word	0x0800b558
 80064b4:	0800b54c 	.word	0x0800b54c
 80064b8:	0800b5a0 	.word	0x0800b5a0
 80064bc:	0800b57c 	.word	0x0800b57c
 80064c0:	0800b284 	.word	0x0800b284
 80064c4:	0800b5b4 	.word	0x0800b5b4
 80064c8:	f380 8811 	msr	BASEPRI, r0
 80064cc:	f389 8811 	msr	BASEPRI, r9
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80064d0:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 80064d4:	eba0 0c03 	sub.w	ip, r0, r3
 80064d8:	f1dc 0000 	rsbs	r0, ip, #0
 80064dc:	eb40 000c 	adc.w	r0, r0, ip
 80064e0:	4946      	ldr	r1, [pc, #280]	@ (80065fc <oslib_test_001_001_execute.lto_priv.0+0x33c>)
 80064e2:	f7ff fded 	bl	80060c0 <_test_assert>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	f040 8081 	bne.w	80065ee <oslib_test_001_001_execute.lto_priv.0+0x32e>
 80064ec:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 80064f0:	2306      	movs	r3, #6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80064f2:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8006600 <oslib_test_001_001_execute.lto_priv.0+0x340>
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 80064f6:	4d43      	ldr	r5, [pc, #268]	@ (8006604 <oslib_test_001_001_execute.lto_priv.0+0x344>)
 80064f8:	4e43      	ldr	r6, [pc, #268]	@ (8006608 <oslib_test_001_001_execute.lto_priv.0+0x348>)
  test_set_step(6);
 80064fa:	603b      	str	r3, [r7, #0]
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80064fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006500:	a803      	add	r0, sp, #12
 8006502:	f004 f815 	bl	800a530 <chMBFetchTimeout.constprop.0>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006506:	fab0 f080 	clz	r0, r0
 800650a:	4649      	mov	r1, r9
 800650c:	0940      	lsrs	r0, r0, #5
 800650e:	f7ff fdd7 	bl	80060c0 <_test_assert>
 8006512:	2320      	movs	r3, #32
 8006514:	2800      	cmp	r0, #0
 8006516:	f47f af6e 	bne.w	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
      test_emit_token(msg2);
 800651a:	9903      	ldr	r1, [sp, #12]
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	42b3      	cmp	r3, r6
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	d202      	bcs.n	8006530 <oslib_test_001_001_execute.lto_priv.0+0x270>
    *test_tokp++ = token;
 800652a:	1c58      	adds	r0, r3, #1
 800652c:	6028      	str	r0, [r5, #0]
 800652e:	7019      	strb	r1, [r3, #0]
 8006530:	f382 8811 	msr	BASEPRI, r2
    for (i = 0; i < MB_SIZE; i++) {
 8006534:	f1b8 0801 	subs.w	r8, r8, #1
 8006538:	d1e0      	bne.n	80064fc <oslib_test_001_001_execute.lto_priv.0+0x23c>
    test_assert_sequence("ABCD", "wrong get sequence");
 800653a:	4934      	ldr	r1, [pc, #208]	@ (800660c <oslib_test_001_001_execute.lto_priv.0+0x34c>)
 800653c:	4834      	ldr	r0, [pc, #208]	@ (8006610 <oslib_test_001_001_execute.lto_priv.0+0x350>)
 800653e:	f7fa faf7 	bl	8000b30 <_test_assert_sequence>
 8006542:	2800      	cmp	r0, #0
 8006544:	f47f af57 	bne.w	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
  test_set_step(7);
 8006548:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800654a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800654e:	2046      	movs	r0, #70	@ 0x46
  test_set_step(7);
 8006550:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006552:	f004 f8f5 	bl	800a740 <chMBPostTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006556:	fab0 f080 	clz	r0, r0
 800655a:	4929      	ldr	r1, [pc, #164]	@ (8006600 <oslib_test_001_001_execute.lto_priv.0+0x340>)
 800655c:	0940      	lsrs	r0, r0, #5
 800655e:	f7ff fdaf 	bl	80060c0 <_test_assert>
 8006562:	2800      	cmp	r0, #0
 8006564:	f47f af47 	bne.w	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8006568:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800656c:	a803      	add	r0, sp, #12
 800656e:	f003 ffdf 	bl	800a530 <chMBFetchTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006572:	fab0 f080 	clz	r0, r0
 8006576:	4922      	ldr	r1, [pc, #136]	@ (8006600 <oslib_test_001_001_execute.lto_priv.0+0x340>)
 8006578:	0940      	lsrs	r0, r0, #5
 800657a:	f7ff fda1 	bl	80060c0 <_test_assert>
 800657e:	2800      	cmp	r0, #0
 8006580:	f47f af39 	bne.w	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
  test_set_step(8);
 8006584:	2308      	movs	r3, #8
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	2520      	movs	r5, #32
 800658a:	f385 8811 	msr	BASEPRI, r5
 800658e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006592:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006594:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006596:	491f      	ldr	r1, [pc, #124]	@ (8006614 <oslib_test_001_001_execute.lto_priv.0+0x354>)
 8006598:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800659c:	1f1e      	subs	r6, r3, #4
 800659e:	4270      	negs	r0, r6
 80065a0:	4170      	adcs	r0, r6
 80065a2:	f7ff fd8d 	bl	80060c0 <_test_assert>
 80065a6:	bb28      	cbnz	r0, 80065f4 <oslib_test_001_001_execute.lto_priv.0+0x334>
 80065a8:	f388 8811 	msr	BASEPRI, r8
 80065ac:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80065b0:	6920      	ldr	r0, [r4, #16]
 80065b2:	4919      	ldr	r1, [pc, #100]	@ (8006618 <oslib_test_001_001_execute.lto_priv.0+0x358>)
 80065b4:	fab0 f080 	clz	r0, r0
 80065b8:	0940      	lsrs	r0, r0, #5
 80065ba:	f7ff fd81 	bl	80060c0 <_test_assert>
 80065be:	b9c8      	cbnz	r0, 80065f4 <oslib_test_001_001_execute.lto_priv.0+0x334>
 80065c0:	f388 8811 	msr	BASEPRI, r8
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80065c4:	68a0      	ldr	r0, [r4, #8]
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	4914      	ldr	r1, [pc, #80]	@ (800661c <oslib_test_001_001_execute.lto_priv.0+0x35c>)
 80065ca:	1b42      	subs	r2, r0, r5
 80065cc:	4250      	negs	r0, r2
 80065ce:	4150      	adcs	r0, r2
 80065d0:	f7ff fd76 	bl	80060c0 <_test_assert>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f47f af0e 	bne.w	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80065da:	68e0      	ldr	r0, [r4, #12]
 80065dc:	4910      	ldr	r1, [pc, #64]	@ (8006620 <oslib_test_001_001_execute.lto_priv.0+0x360>)
 80065de:	1b43      	subs	r3, r0, r5
 80065e0:	4258      	negs	r0, r3
 80065e2:	4158      	adcs	r0, r3
}
 80065e4:	b005      	add	sp, #20
 80065e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80065ea:	f7ff bd69 	b.w	80060c0 <_test_assert>
 80065ee:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80065f2:	e700      	b.n	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
 80065f4:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80065f8:	e6fd      	b.n	80063f6 <oslib_test_001_001_execute.lto_priv.0+0x136>
 80065fa:	bf00      	nop
 80065fc:	0800b5cc 	.word	0x0800b5cc
 8006600:	0800b284 	.word	0x0800b284
 8006604:	200010c8 	.word	0x200010c8
 8006608:	200010c8 	.word	0x200010c8
 800660c:	0800b5e4 	.word	0x0800b5e4
 8006610:	0800b258 	.word	0x0800b258
 8006614:	0800b540 	.word	0x0800b540
 8006618:	0800b54c 	.word	0x0800b54c
 800661c:	0800b558 	.word	0x0800b558
 8006620:	0800b57c 	.word	0x0800b57c
	...

08006630 <oslib_test_001_002_execute.lto_priv.0>:
static void oslib_test_001_002_execute(void) {
 8006630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8006634:	4dbe      	ldr	r5, [pc, #760]	@ (8006930 <oslib_test_001_002_execute.lto_priv.0+0x300>)
 8006636:	2101      	movs	r1, #1
static void oslib_test_001_002_execute(void) {
 8006638:	b083      	sub	sp, #12
  test_set_step(1);
 800663a:	6029      	str	r1, [r5, #0]
 800663c:	2020      	movs	r0, #32
 800663e:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 8006642:	4cbc      	ldr	r4, [pc, #752]	@ (8006934 <oslib_test_001_002_execute.lto_priv.0+0x304>)
 8006644:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006648:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition)
 8006650:	2b04      	cmp	r3, #4
 8006652:	f040 818c 	bne.w	800696e <oslib_test_001_002_execute.lto_priv.0+0x33e>
 8006656:	f04f 0c00 	mov.w	ip, #0
 800665a:	f38c 8811 	msr	BASEPRI, ip
  test_set_step(2);
 800665e:	2302      	movs	r3, #2
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	f380 8811 	msr	BASEPRI, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006666:	4627      	mov	r7, r4
  mbp->wrptr = mbp->buffer;
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	f857 6f18 	ldr.w	r6, [r7, #24]!
  mbp->cnt   = (size_t)0;
 800666e:	f8c4 c010 	str.w	ip, [r4, #16]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8006672:	42be      	cmp	r6, r7
  mbp->wrptr = mbp->buffer;
 8006674:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->reset = true;
 8006678:	7521      	strb	r1, [r4, #20]
 800667a:	d021      	beq.n	80066c0 <oslib_test_001_002_execute.lto_priv.0+0x90>
  tp->u.rdymsg = msg;
 800667c:	f06f 0e01 	mvn.w	lr, #1
 8006680:	4630      	mov	r0, r6
  tqp->next             = tp->queue.next;
 8006682:	6836      	ldr	r6, [r6, #0]
  cp = (thread_t *)&ch.rlist.queue;
 8006684:	4bac      	ldr	r3, [pc, #688]	@ (8006938 <oslib_test_001_002_execute.lto_priv.0+0x308>)
  } while (cp->prio >= tp->prio);
 8006686:	6881      	ldr	r1, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006688:	6077      	str	r7, [r6, #4]
 800668a:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800668e:	f880 c020 	strb.w	ip, [r0, #32]
    cp = cp->queue.next;
 8006692:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	428a      	cmp	r2, r1
 8006698:	d2fb      	bcs.n	8006692 <oslib_test_001_002_execute.lto_priv.0+0x62>
  tp->queue.prev             = cp->queue.prev;
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	42be      	cmp	r6, r7
 800669e:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80066a2:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80066a4:	6058      	str	r0, [r3, #4]
 80066a6:	d1eb      	bne.n	8006680 <oslib_test_001_002_execute.lto_priv.0+0x50>
 80066a8:	f06f 0101 	mvn.w	r1, #1
 80066ac:	6241      	str	r1, [r0, #36]	@ 0x24
 80066ae:	2100      	movs	r1, #0
 80066b0:	e9c4 6606 	strd	r6, r6, [r4, #24]
 80066b4:	f880 1020 	strb.w	r1, [r0, #32]
 80066b8:	e9c0 3200 	strd	r3, r2, [r0]
 80066bc:	6010      	str	r0, [r2, #0]
 80066be:	6058      	str	r0, [r3, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
 80066c0:	6a26      	ldr	r6, [r4, #32]
 80066c2:	4f9e      	ldr	r7, [pc, #632]	@ (800693c <oslib_test_001_002_execute.lto_priv.0+0x30c>)
 80066c4:	42be      	cmp	r6, r7
 80066c6:	d023      	beq.n	8006710 <oslib_test_001_002_execute.lto_priv.0+0xe0>
 80066c8:	f06f 0e01 	mvn.w	lr, #1
  tp->state = CH_STATE_READY;
 80066cc:	f04f 0c00 	mov.w	ip, #0
 80066d0:	4630      	mov	r0, r6
  tqp->next             = tp->queue.next;
 80066d2:	6836      	ldr	r6, [r6, #0]
  cp = (thread_t *)&ch.rlist.queue;
 80066d4:	4b98      	ldr	r3, [pc, #608]	@ (8006938 <oslib_test_001_002_execute.lto_priv.0+0x308>)
  } while (cp->prio >= tp->prio);
 80066d6:	6881      	ldr	r1, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 80066d8:	6077      	str	r7, [r6, #4]
 80066da:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 80066de:	f880 c020 	strb.w	ip, [r0, #32]
    cp = cp->queue.next;
 80066e2:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	428a      	cmp	r2, r1
 80066e8:	d2fb      	bcs.n	80066e2 <oslib_test_001_002_execute.lto_priv.0+0xb2>
  tp->queue.prev             = cp->queue.prev;
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	42be      	cmp	r6, r7
 80066ee:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80066f2:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80066f4:	6058      	str	r0, [r3, #4]
 80066f6:	d1eb      	bne.n	80066d0 <oslib_test_001_002_execute.lto_priv.0+0xa0>
 80066f8:	f06f 0101 	mvn.w	r1, #1
 80066fc:	e9c4 7708 	strd	r7, r7, [r4, #32]
 8006700:	6241      	str	r1, [r0, #36]	@ 0x24
 8006702:	2100      	movs	r1, #0
 8006704:	e9c0 3200 	strd	r3, r2, [r0]
 8006708:	f880 1020 	strb.w	r1, [r0, #32]
 800670c:	6010      	str	r0, [r2, #0]
 800670e:	6058      	str	r0, [r3, #4]
 8006710:	2000      	movs	r0, #0
 8006712:	f380 8811 	msr	BASEPRI, r0
 8006716:	2120      	movs	r1, #32
 8006718:	f381 8811 	msr	BASEPRI, r1
  return (size_t)(mbp->top - mbp->buffer);
 800671c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006720:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006728:	2b04      	cmp	r3, #4
 800672a:	f040 812d 	bne.w	8006988 <oslib_test_001_002_execute.lto_priv.0+0x358>
 800672e:	f380 8811 	msr	BASEPRI, r0
 8006732:	f381 8811 	msr	BASEPRI, r1
 8006736:	6922      	ldr	r2, [r4, #16]
 8006738:	2a00      	cmp	r2, #0
 800673a:	f040 813d 	bne.w	80069b8 <oslib_test_001_002_execute.lto_priv.0+0x388>
 800673e:	f382 8811 	msr	BASEPRI, r2
 8006742:	f381 8811 	msr	BASEPRI, r1
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	68a3      	ldr	r3, [r4, #8]
 800674a:	4298      	cmp	r0, r3
 800674c:	f040 8129 	bne.w	80069a2 <oslib_test_001_002_execute.lto_priv.0+0x372>
 8006750:	f382 8811 	msr	BASEPRI, r2
 8006754:	f381 8811 	msr	BASEPRI, r1
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	68e3      	ldr	r3, [r4, #12]
 800675c:	4298      	cmp	r0, r3
 800675e:	f040 8143 	bne.w	80069e8 <oslib_test_001_002_execute.lto_priv.0+0x3b8>
 8006762:	f382 8811 	msr	BASEPRI, r2
  test_set_step(3);
 8006766:	2303      	movs	r3, #3
  mbp->reset = false;
 8006768:	7522      	strb	r2, [r4, #20]
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	f04f 0e42 	mov.w	lr, #66	@ 0x42
 8006770:	4690      	mov	r8, r2
 8006772:	f381 8811 	msr	BASEPRI, r1
  if (mbp->reset) {
 8006776:	7d26      	ldrb	r6, [r4, #20]
 8006778:	2e00      	cmp	r6, #0
 800677a:	f040 8161 	bne.w	8006a40 <oslib_test_001_002_execute.lto_priv.0+0x410>
  return (size_t)(mbp->top - mbp->buffer);
 800677e:	e9d4 0c00 	ldrd	r0, ip, [r4]
  return mbp->cnt;
 8006782:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8006784:	ebac 0900 	sub.w	r9, ip, r0
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006788:	ebb3 0fa9 	cmp.w	r3, r9, asr #2
 800678c:	f000 8121 	beq.w	80069d2 <oslib_test_001_002_execute.lto_priv.0+0x3a2>
    *mbp->wrptr++ = msg;
 8006790:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8006794:	f109 0604 	add.w	r6, r9, #4
    if (mbp->wrptr >= mbp->top) {
 8006798:	45b4      	cmp	ip, r6
  return (bool)(tqp->next != (const thread_t *)tqp);
 800679a:	f8d4 c020 	ldr.w	ip, [r4, #32]
    *mbp->wrptr++ = msg;
 800679e:	60a6      	str	r6, [r4, #8]
 80067a0:	f8c9 e000 	str.w	lr, [r9]
      mbp->wrptr = mbp->buffer;
 80067a4:	bf88      	it	hi
 80067a6:	68a0      	ldrhi	r0, [r4, #8]
 80067a8:	60a0      	str	r0, [r4, #8]
    mbp->cnt++;
 80067aa:	3301      	adds	r3, #1
  if (queue_notempty(tqp)) {
 80067ac:	45bc      	cmp	ip, r7
 80067ae:	6123      	str	r3, [r4, #16]
 80067b0:	d017      	beq.n	80067e2 <oslib_test_001_002_execute.lto_priv.0+0x1b2>
  tqp->next             = tp->queue.next;
 80067b2:	f8dc 3000 	ldr.w	r3, [ip]
 80067b6:	6223      	str	r3, [r4, #32]
  } while (cp->prio >= tp->prio);
 80067b8:	f8dc 6008 	ldr.w	r6, [ip, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 80067bc:	605f      	str	r7, [r3, #4]
  cp = (thread_t *)&ch.rlist.queue;
 80067be:	4b5e      	ldr	r3, [pc, #376]	@ (8006938 <oslib_test_001_002_execute.lto_priv.0+0x308>)
 80067c0:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 80067c4:	f88c 2020 	strb.w	r2, [ip, #32]
    cp = cp->queue.next;
 80067c8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80067ca:	6898      	ldr	r0, [r3, #8]
 80067cc:	42b0      	cmp	r0, r6
 80067ce:	d2fb      	bcs.n	80067c8 <oslib_test_001_002_execute.lto_priv.0+0x198>
  tp->queue.prev             = cp->queue.prev;
 80067d0:	6858      	ldr	r0, [r3, #4]
  tp->queue.next             = cp;
 80067d2:	f8cc 3000 	str.w	r3, [ip]
  tp->queue.prev             = cp->queue.prev;
 80067d6:	f8cc 0004 	str.w	r0, [ip, #4]
  tp->queue.prev->queue.next = tp;
 80067da:	f8c0 c000 	str.w	ip, [r0]
  cp->queue.prev             = tp;
 80067de:	f8c3 c004 	str.w	ip, [r3, #4]
 80067e2:	f388 8811 	msr	BASEPRI, r8
    for (i = 0; i < MB_SIZE - 1; i++) {
 80067e6:	f10e 0e01 	add.w	lr, lr, #1
 80067ea:	f1be 0f45 	cmp.w	lr, #69	@ 0x45
 80067ee:	d1c0      	bne.n	8006772 <oslib_test_001_002_execute.lto_priv.0+0x142>
 80067f0:	f04f 0820 	mov.w	r8, #32
 80067f4:	f388 8811 	msr	BASEPRI, r8
    msg1 = chMBPostAheadI(&mb1, 'A');
 80067f8:	2041      	movs	r0, #65	@ 0x41
 80067fa:	f003 fef9 	bl	800a5f0 <chMBPostAheadI.constprop.0>
 80067fe:	2200      	movs	r2, #0
 8006800:	4603      	mov	r3, r0
 8006802:	f382 8811 	msr	BASEPRI, r2
 8006806:	2800      	cmp	r0, #0
 8006808:	f040 80e5 	bne.w	80069d6 <oslib_test_001_002_execute.lto_priv.0+0x3a6>
  test_set_step(4);
 800680c:	2204      	movs	r2, #4
 800680e:	602a      	str	r2, [r5, #0]
 8006810:	f388 8811 	msr	BASEPRI, r8
 8006814:	e9d4 1200 	ldrd	r1, r2, [r4]
 8006818:	1a52      	subs	r2, r2, r1
 800681a:	6921      	ldr	r1, [r4, #16]
 800681c:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8006820:	f040 80ed 	bne.w	80069fe <oslib_test_001_002_execute.lto_priv.0+0x3ce>
 8006824:	f380 8811 	msr	BASEPRI, r0
 8006828:	f388 8811 	msr	BASEPRI, r8
  return mbp->cnt;
 800682c:	6926      	ldr	r6, [r4, #16]
 800682e:	2e04      	cmp	r6, #4
 8006830:	f040 80f0 	bne.w	8006a14 <oslib_test_001_002_execute.lto_priv.0+0x3e4>
 8006834:	f380 8811 	msr	BASEPRI, r0
 8006838:	f388 8811 	msr	BASEPRI, r8
 800683c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006840:	4291      	cmp	r1, r2
 8006842:	f040 80f2 	bne.w	8006a2a <oslib_test_001_002_execute.lto_priv.0+0x3fa>
 8006846:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800684a:	2305      	movs	r3, #5
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 800684c:	4f3c      	ldr	r7, [pc, #240]	@ (8006940 <oslib_test_001_002_execute.lto_priv.0+0x310>)
 800684e:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8006944 <oslib_test_001_002_execute.lto_priv.0+0x314>
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f388 8811 	msr	BASEPRI, r8
      msg1 = chMBFetchI(&mb1, &msg2);
 8006858:	a801      	add	r0, sp, #4
 800685a:	f003 fe31 	bl	800a4c0 <chMBFetchI.constprop.0>
 800685e:	2200      	movs	r2, #0
 8006860:	f382 8811 	msr	BASEPRI, r2
  if (!condition)
 8006864:	2800      	cmp	r0, #0
 8006866:	f040 80b6 	bne.w	80069d6 <oslib_test_001_002_execute.lto_priv.0+0x3a6>
      test_emit_token(msg2);
 800686a:	9901      	ldr	r1, [sp, #4]
 800686c:	f388 8811 	msr	BASEPRI, r8
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	454b      	cmp	r3, r9
 8006874:	d202      	bcs.n	800687c <oslib_test_001_002_execute.lto_priv.0+0x24c>
    *test_tokp++ = token;
 8006876:	1c58      	adds	r0, r3, #1
 8006878:	6038      	str	r0, [r7, #0]
 800687a:	7019      	strb	r1, [r3, #0]
 800687c:	f382 8811 	msr	BASEPRI, r2
    for (i = 0; i < MB_SIZE; i++) {
 8006880:	3e01      	subs	r6, #1
 8006882:	d1e7      	bne.n	8006854 <oslib_test_001_002_execute.lto_priv.0+0x224>
    test_assert_sequence("ABCD", "wrong get sequence");
 8006884:	4930      	ldr	r1, [pc, #192]	@ (8006948 <oslib_test_001_002_execute.lto_priv.0+0x318>)
 8006886:	4831      	ldr	r0, [pc, #196]	@ (800694c <oslib_test_001_002_execute.lto_priv.0+0x31c>)
 8006888:	f7fa f952 	bl	8000b30 <_test_assert_sequence>
 800688c:	2800      	cmp	r0, #0
 800688e:	d178      	bne.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
  test_set_step(6);
 8006890:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006892:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006896:	2046      	movs	r0, #70	@ 0x46
  test_set_step(6);
 8006898:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800689a:	f003 ff51 	bl	800a740 <chMBPostTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800689e:	fab0 f080 	clz	r0, r0
 80068a2:	492b      	ldr	r1, [pc, #172]	@ (8006950 <oslib_test_001_002_execute.lto_priv.0+0x320>)
 80068a4:	0940      	lsrs	r0, r0, #5
 80068a6:	f7ff fc0b 	bl	80060c0 <_test_assert>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d169      	bne.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80068ae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80068b2:	a801      	add	r0, sp, #4
 80068b4:	f003 fe3c 	bl	800a530 <chMBFetchTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80068b8:	fab0 f080 	clz	r0, r0
 80068bc:	4924      	ldr	r1, [pc, #144]	@ (8006950 <oslib_test_001_002_execute.lto_priv.0+0x320>)
 80068be:	0940      	lsrs	r0, r0, #5
 80068c0:	f7ff fbfe 	bl	80060c0 <_test_assert>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d15c      	bne.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
  test_set_step(7);
 80068c8:	2307      	movs	r3, #7
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	2520      	movs	r5, #32
 80068ce:	f385 8811 	msr	BASEPRI, r5
  return (size_t)(mbp->top - mbp->buffer);
 80068d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80068d6:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80068d8:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80068da:	491e      	ldr	r1, [pc, #120]	@ (8006954 <oslib_test_001_002_execute.lto_priv.0+0x324>)
 80068dc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80068e0:	1f1f      	subs	r7, r3, #4
 80068e2:	4278      	negs	r0, r7
 80068e4:	4178      	adcs	r0, r7
 80068e6:	f7ff fbeb 	bl	80060c0 <_test_assert>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f040 80ac 	bne.w	8006a48 <oslib_test_001_002_execute.lto_priv.0+0x418>
 80068f0:	f386 8811 	msr	BASEPRI, r6
 80068f4:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80068f8:	6920      	ldr	r0, [r4, #16]
 80068fa:	4917      	ldr	r1, [pc, #92]	@ (8006958 <oslib_test_001_002_execute.lto_priv.0+0x328>)
 80068fc:	fab0 f080 	clz	r0, r0
 8006900:	0940      	lsrs	r0, r0, #5
 8006902:	f7ff fbdd 	bl	80060c0 <_test_assert>
 8006906:	2800      	cmp	r0, #0
 8006908:	f040 809e 	bne.w	8006a48 <oslib_test_001_002_execute.lto_priv.0+0x418>
 800690c:	f386 8811 	msr	BASEPRI, r6
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006910:	68a0      	ldr	r0, [r4, #8]
 8006912:	6825      	ldr	r5, [r4, #0]
 8006914:	4911      	ldr	r1, [pc, #68]	@ (800695c <oslib_test_001_002_execute.lto_priv.0+0x32c>)
 8006916:	1b42      	subs	r2, r0, r5
 8006918:	4250      	negs	r0, r2
 800691a:	4150      	adcs	r0, r2
 800691c:	f7ff fbd0 	bl	80060c0 <_test_assert>
 8006920:	bb78      	cbnz	r0, 8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006922:	68e0      	ldr	r0, [r4, #12]
 8006924:	490e      	ldr	r1, [pc, #56]	@ (8006960 <oslib_test_001_002_execute.lto_priv.0+0x330>)
 8006926:	1b43      	subs	r3, r0, r5
 8006928:	4258      	negs	r0, r3
 800692a:	4158      	adcs	r0, r3
}
 800692c:	e01a      	b.n	8006964 <oslib_test_001_002_execute.lto_priv.0+0x334>
 800692e:	bf00      	nop
 8006930:	200010b4 	.word	0x200010b4
 8006934:	20000888 	.word	0x20000888
 8006938:	200011c0 	.word	0x200011c0
 800693c:	200008a8 	.word	0x200008a8
 8006940:	200010c8 	.word	0x200010c8
 8006944:	200010c8 	.word	0x200010c8
 8006948:	0800b5e4 	.word	0x0800b5e4
 800694c:	0800b258 	.word	0x0800b258
 8006950:	0800b284 	.word	0x0800b284
 8006954:	0800b540 	.word	0x0800b540
 8006958:	0800b54c 	.word	0x0800b54c
 800695c:	0800b558 	.word	0x0800b558
 8006960:	0800b57c 	.word	0x0800b57c
 8006964:	b003      	add	sp, #12
 8006966:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800696a:	f7ff bba9 	b.w	80060c0 <_test_assert>
  test_local_fail      = true;
 800696e:	4c38      	ldr	r4, [pc, #224]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 8006970:	4838      	ldr	r0, [pc, #224]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 8006972:	4b39      	ldr	r3, [pc, #228]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
 8006974:	4a39      	ldr	r2, [pc, #228]	@ (8006a5c <oslib_test_001_002_execute.lto_priv.0+0x42c>)
 8006976:	601a      	str	r2, [r3, #0]
  test_local_fail      = true;
 8006978:	7021      	strb	r1, [r4, #0]
  test_global_fail     = true;
 800697a:	7001      	strb	r1, [r0, #0]
 800697c:	2300      	movs	r3, #0
 800697e:	f383 8811 	msr	BASEPRI, r3
}
 8006982:	b003      	add	sp, #12
 8006984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 8006988:	4931      	ldr	r1, [pc, #196]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 800698a:	4c32      	ldr	r4, [pc, #200]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 800698c:	4a32      	ldr	r2, [pc, #200]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
  test_local_fail      = true;
 800698e:	2301      	movs	r3, #1
 8006990:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8006992:	4933      	ldr	r1, [pc, #204]	@ (8006a60 <oslib_test_001_002_execute.lto_priv.0+0x430>)
  test_global_fail     = true;
 8006994:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
 8006996:	6011      	str	r1, [r2, #0]
 8006998:	f380 8811 	msr	BASEPRI, r0
 800699c:	b003      	add	sp, #12
 800699e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 80069a2:	482b      	ldr	r0, [pc, #172]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 80069a4:	4c2b      	ldr	r4, [pc, #172]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 80069a6:	492c      	ldr	r1, [pc, #176]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
  test_local_fail      = true;
 80069a8:	2301      	movs	r3, #1
 80069aa:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 80069ac:	482d      	ldr	r0, [pc, #180]	@ (8006a64 <oslib_test_001_002_execute.lto_priv.0+0x434>)
  test_global_fail     = true;
 80069ae:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
 80069b0:	6008      	str	r0, [r1, #0]
 80069b2:	f382 8811 	msr	BASEPRI, r2
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80069b6:	e7e4      	b.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
  test_local_fail      = true;
 80069b8:	4925      	ldr	r1, [pc, #148]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 80069ba:	4c26      	ldr	r4, [pc, #152]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 80069bc:	4a26      	ldr	r2, [pc, #152]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
  test_local_fail      = true;
 80069be:	2301      	movs	r3, #1
 80069c0:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80069c2:	4929      	ldr	r1, [pc, #164]	@ (8006a68 <oslib_test_001_002_execute.lto_priv.0+0x438>)
  test_global_fail     = true;
 80069c4:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
 80069c6:	6011      	str	r1, [r2, #0]
 80069c8:	f380 8811 	msr	BASEPRI, r0
}
 80069cc:	b003      	add	sp, #12
 80069ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069d2:	f386 8811 	msr	BASEPRI, r6
  test_local_fail      = true;
 80069d6:	4c1e      	ldr	r4, [pc, #120]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 80069d8:	481e      	ldr	r0, [pc, #120]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 80069da:	4a1f      	ldr	r2, [pc, #124]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
 80069dc:	4923      	ldr	r1, [pc, #140]	@ (8006a6c <oslib_test_001_002_execute.lto_priv.0+0x43c>)
 80069de:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80069e0:	2301      	movs	r3, #1
 80069e2:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80069e4:	7003      	strb	r3, [r0, #0]
 80069e6:	e7cc      	b.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
  test_local_fail      = true;
 80069e8:	4819      	ldr	r0, [pc, #100]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 80069ea:	4c1a      	ldr	r4, [pc, #104]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 80069ec:	491a      	ldr	r1, [pc, #104]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
  test_local_fail      = true;
 80069ee:	2301      	movs	r3, #1
 80069f0:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 80069f2:	481f      	ldr	r0, [pc, #124]	@ (8006a70 <oslib_test_001_002_execute.lto_priv.0+0x440>)
  test_global_fail     = true;
 80069f4:	7023      	strb	r3, [r4, #0]
  test_failure_message = msg;
 80069f6:	6008      	str	r0, [r1, #0]
 80069f8:	f382 8811 	msr	BASEPRI, r2
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80069fc:	e7c1      	b.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
  test_local_fail      = true;
 80069fe:	4814      	ldr	r0, [pc, #80]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 8006a00:	4c14      	ldr	r4, [pc, #80]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 8006a02:	4915      	ldr	r1, [pc, #84]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
  test_local_fail      = true;
 8006a04:	2201      	movs	r2, #1
 8006a06:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 8006a08:	481a      	ldr	r0, [pc, #104]	@ (8006a74 <oslib_test_001_002_execute.lto_priv.0+0x444>)
  test_global_fail     = true;
 8006a0a:	7022      	strb	r2, [r4, #0]
  test_failure_message = msg;
 8006a0c:	6008      	str	r0, [r1, #0]
 8006a0e:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8006a12:	e7b6      	b.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
  test_local_fail      = true;
 8006a14:	480e      	ldr	r0, [pc, #56]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 8006a16:	4c0f      	ldr	r4, [pc, #60]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 8006a18:	490f      	ldr	r1, [pc, #60]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
  test_local_fail      = true;
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 8006a1e:	4816      	ldr	r0, [pc, #88]	@ (8006a78 <oslib_test_001_002_execute.lto_priv.0+0x448>)
  test_global_fail     = true;
 8006a20:	7022      	strb	r2, [r4, #0]
  test_failure_message = msg;
 8006a22:	6008      	str	r0, [r1, #0]
 8006a24:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8006a28:	e7ab      	b.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
  test_local_fail      = true;
 8006a2a:	4809      	ldr	r0, [pc, #36]	@ (8006a50 <oslib_test_001_002_execute.lto_priv.0+0x420>)
  test_global_fail     = true;
 8006a2c:	4c09      	ldr	r4, [pc, #36]	@ (8006a54 <oslib_test_001_002_execute.lto_priv.0+0x424>)
  test_failure_message = msg;
 8006a2e:	490a      	ldr	r1, [pc, #40]	@ (8006a58 <oslib_test_001_002_execute.lto_priv.0+0x428>)
  test_local_fail      = true;
 8006a30:	2201      	movs	r2, #1
 8006a32:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 8006a34:	4811      	ldr	r0, [pc, #68]	@ (8006a7c <oslib_test_001_002_execute.lto_priv.0+0x44c>)
  test_global_fail     = true;
 8006a36:	7022      	strb	r2, [r4, #0]
  test_failure_message = msg;
 8006a38:	6008      	str	r0, [r1, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8006a3e:	e7a0      	b.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
 8006a40:	2300      	movs	r3, #0
 8006a42:	f383 8811 	msr	BASEPRI, r3
bool _test_assert(bool condition, const char *msg) {
 8006a46:	e7c6      	b.n	80069d6 <oslib_test_001_002_execute.lto_priv.0+0x3a6>
 8006a48:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006a4c:	e799      	b.n	8006982 <oslib_test_001_002_execute.lto_priv.0+0x352>
 8006a4e:	bf00      	nop
 8006a50:	200010d1 	.word	0x200010d1
 8006a54:	200010d0 	.word	0x200010d0
 8006a58:	200010cc 	.word	0x200010cc
 8006a5c:	0800b2b0 	.word	0x0800b2b0
 8006a60:	0800b540 	.word	0x0800b540
 8006a64:	0800b558 	.word	0x0800b558
 8006a68:	0800b54c 	.word	0x0800b54c
 8006a6c:	0800b284 	.word	0x0800b284
 8006a70:	0800b57c 	.word	0x0800b57c
 8006a74:	0800b5b4 	.word	0x0800b5b4
 8006a78:	0800b5c0 	.word	0x0800b5c0
 8006a7c:	0800b5cc 	.word	0x0800b5cc

08006a80 <oslib_test_002_001_execute.lto_priv.0>:
static void oslib_test_002_001_execute(void) {
 8006a80:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 8006a82:	4e76      	ldr	r6, [pc, #472]	@ (8006c5c <oslib_test_002_001_execute.lto_priv.0+0x1dc>)
 8006a84:	2501      	movs	r5, #1
static void oslib_test_002_001_execute(void) {
 8006a86:	b085      	sub	sp, #20
  test_set_step(1);
 8006a88:	6035      	str	r5, [r6, #0]
 8006a8a:	2720      	movs	r7, #32
 8006a8c:	f387 8811 	msr	BASEPRI, r7
  chMtxLockS(mp);
 8006a90:	4c73      	ldr	r4, [pc, #460]	@ (8006c60 <oslib_test_002_001_execute.lto_priv.0+0x1e0>)
 8006a92:	4620      	mov	r0, r4
 8006a94:	f7fe fba4 	bl	80051e0 <chMtxLockS>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f854 2c20 	ldr.w	r2, [r4, #-32]
  pp->reset = true;
 8006aa2:	f804 5c0c 	strb.w	r5, [r4, #-12]
  pp->wrptr = pp->buffer;
 8006aa6:	e944 2206 	strd	r2, r2, [r4, #-24]
  pp->cnt   = (size_t)0;
 8006aaa:	f844 3c10 	str.w	r3, [r4, #-16]
  pp->wrptr = pp->buffer;
 8006aae:	f1a4 0520 	sub.w	r5, r4, #32
 8006ab2:	f387 8811 	msr	BASEPRI, r7
  if (*trp != NULL) {
 8006ab6:	69a9      	ldr	r1, [r5, #24]
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d040      	beq.n	8006b3e <oslib_test_002_001_execute.lto_priv.0+0xbe>
  cp = (thread_t *)&ch.rlist.queue;
 8006abc:	4f69      	ldr	r7, [pc, #420]	@ (8006c64 <oslib_test_002_001_execute.lto_priv.0+0x1e4>)
    *trp = NULL;
 8006abe:	61ab      	str	r3, [r5, #24]
  tp->state = CH_STATE_READY;
 8006ac0:	f881 3020 	strb.w	r3, [r1, #32]
  } while (cp->prio >= tp->prio);
 8006ac4:	6888      	ldr	r0, [r1, #8]
    tp->u.rdymsg = msg;
 8006ac6:	f06f 0301 	mvn.w	r3, #1
 8006aca:	624b      	str	r3, [r1, #36]	@ 0x24
  cp = (thread_t *)&ch.rlist.queue;
 8006acc:	463b      	mov	r3, r7
    cp = cp->queue.next;
 8006ace:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	4282      	cmp	r2, r0
 8006ad4:	d2fb      	bcs.n	8006ace <oslib_test_002_001_execute.lto_priv.0+0x4e>
  tp->queue.prev             = cp->queue.prev;
 8006ad6:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8006ad8:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8006ada:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8006adc:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8006ade:	6059      	str	r1, [r3, #4]
  if (*trp != NULL) {
 8006ae0:	69e9      	ldr	r1, [r5, #28]
 8006ae2:	b189      	cbz	r1, 8006b08 <oslib_test_002_001_execute.lto_priv.0+0x88>
    *trp = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61eb      	str	r3, [r5, #28]
  tp->state = CH_STATE_READY;
 8006ae8:	f881 3020 	strb.w	r3, [r1, #32]
    tp->u.rdymsg = msg;
 8006aec:	f06f 0301 	mvn.w	r3, #1
 8006af0:	624b      	str	r3, [r1, #36]	@ 0x24
  } while (cp->prio >= tp->prio);
 8006af2:	6888      	ldr	r0, [r1, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8006af4:	4b5b      	ldr	r3, [pc, #364]	@ (8006c64 <oslib_test_002_001_execute.lto_priv.0+0x1e4>)
    cp = cp->queue.next;
 8006af6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	4282      	cmp	r2, r0
 8006afc:	d2fb      	bcs.n	8006af6 <oslib_test_002_001_execute.lto_priv.0+0x76>
  tp->queue.prev             = cp->queue.prev;
 8006afe:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8006b00:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8006b02:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8006b04:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8006b06:	6059      	str	r1, [r3, #4]
  return firstprio(&ch.rlist.queue) > currp->prio;
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
  if (chSchIsRescRequiredI()) {
 8006b0c:	6892      	ldr	r2, [r2, #8]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d816      	bhi.n	8006b42 <oslib_test_002_001_execute.lto_priv.0+0xc2>
 8006b14:	2300      	movs	r3, #0
 8006b16:	f383 8811 	msr	BASEPRI, r3
  PC_UNLOCK(pp);
 8006b1a:	4851      	ldr	r0, [pc, #324]	@ (8006c60 <oslib_test_002_001_execute.lto_priv.0+0x1e0>)
 8006b1c:	f7fe fc00 	bl	8005320 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006b20:	f854 2c20 	ldr.w	r2, [r4, #-32]
 8006b24:	68eb      	ldr	r3, [r5, #12]
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00e      	beq.n	8006b48 <oslib_test_002_001_execute.lto_priv.0+0xc8>
  test_local_fail      = true;
 8006b2a:	4c4f      	ldr	r4, [pc, #316]	@ (8006c68 <oslib_test_002_001_execute.lto_priv.0+0x1e8>)
  test_global_fail     = true;
 8006b2c:	484f      	ldr	r0, [pc, #316]	@ (8006c6c <oslib_test_002_001_execute.lto_priv.0+0x1ec>)
  test_failure_message = msg;
 8006b2e:	4a50      	ldr	r2, [pc, #320]	@ (8006c70 <oslib_test_002_001_execute.lto_priv.0+0x1f0>)
 8006b30:	4950      	ldr	r1, [pc, #320]	@ (8006c74 <oslib_test_002_001_execute.lto_priv.0+0x1f4>)
 8006b32:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8006b34:	2301      	movs	r3, #1
 8006b36:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8006b38:	7003      	strb	r3, [r0, #0]
}
 8006b3a:	b005      	add	sp, #20
 8006b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3e:	4f49      	ldr	r7, [pc, #292]	@ (8006c64 <oslib_test_002_001_execute.lto_priv.0+0x1e4>)
 8006b40:	e7ce      	b.n	8006ae0 <oslib_test_002_001_execute.lto_priv.0+0x60>
    chSchDoRescheduleAhead();
 8006b42:	f7fd fa05 	bl	8003f50 <chSchDoReschedule>
 8006b46:	e7e5      	b.n	8006b14 <oslib_test_002_001_execute.lto_priv.0+0x94>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006b48:	68aa      	ldr	r2, [r5, #8]
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d1ed      	bne.n	8006b2a <oslib_test_002_001_execute.lto_priv.0+0xaa>
 8006b4e:	692b      	ldr	r3, [r5, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1ea      	bne.n	8006b2a <oslib_test_002_001_execute.lto_priv.0+0xaa>
  test_set_step(2);
 8006b54:	2302      	movs	r3, #2
 8006b56:	6033      	str	r3, [r6, #0]
  if (pp->reset) {
 8006b58:	7d2b      	ldrb	r3, [r5, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d047      	beq.n	8006bee <oslib_test_002_001_execute.lto_priv.0+0x16e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006b5e:	692b      	ldr	r3, [r5, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e2      	bne.n	8006b2a <oslib_test_002_001_execute.lto_priv.0+0xaa>
  if (pp->reset) {
 8006b64:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(3);
 8006b66:	2103      	movs	r1, #3
 8006b68:	6031      	str	r1, [r6, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d056      	beq.n	8006c1c <oslib_test_002_001_execute.lto_priv.0+0x19c>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d012      	beq.n	8006b9a <oslib_test_002_001_execute.lto_priv.0+0x11a>
 8006b74:	4a3f      	ldr	r2, [pc, #252]	@ (8006c74 <oslib_test_002_001_execute.lto_priv.0+0x1f4>)
  test_local_fail      = true;
 8006b76:	4c3c      	ldr	r4, [pc, #240]	@ (8006c68 <oslib_test_002_001_execute.lto_priv.0+0x1e8>)
  test_global_fail     = true;
 8006b78:	483c      	ldr	r0, [pc, #240]	@ (8006c6c <oslib_test_002_001_execute.lto_priv.0+0x1ec>)
  test_failure_message = msg;
 8006b7a:	493d      	ldr	r1, [pc, #244]	@ (8006c70 <oslib_test_002_001_execute.lto_priv.0+0x1f0>)
  test_local_fail      = true;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8006b80:	7003      	strb	r3, [r0, #0]
  test_failure_message = msg;
 8006b82:	600a      	str	r2, [r1, #0]
 8006b84:	e7d9      	b.n	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
 8006b86:	682a      	ldr	r2, [r5, #0]
 8006b88:	68eb      	ldr	r3, [r5, #12]
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d1f2      	bne.n	8006b74 <oslib_test_002_001_execute.lto_priv.0+0xf4>
 8006b8e:	68aa      	ldr	r2, [r5, #8]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d1ef      	bne.n	8006b74 <oslib_test_002_001_execute.lto_priv.0+0xf4>
 8006b94:	692b      	ldr	r3, [r5, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1ec      	bne.n	8006b74 <oslib_test_002_001_execute.lto_priv.0+0xf4>
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8006b9a:	2200      	movs	r2, #0
  test_set_step(5);
 8006b9c:	2305      	movs	r3, #5
 8006b9e:	2010      	movs	r0, #16
 8006ba0:	752a      	strb	r2, [r5, #20]
 8006ba2:	6033      	str	r3, [r6, #0]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8006ba4:	f003 fbdc 	bl	800a360 <chPipeWriteTimeout.part.0.constprop.0>
  if (!condition)
 8006ba8:	2810      	cmp	r0, #16
 8006baa:	d13f      	bne.n	8006c2c <oslib_test_002_001_execute.lto_priv.0+0x1ac>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006bac:	682a      	ldr	r2, [r5, #0]
 8006bae:	68eb      	ldr	r3, [r5, #12]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d1ba      	bne.n	8006b2a <oslib_test_002_001_execute.lto_priv.0+0xaa>
 8006bb4:	68aa      	ldr	r2, [r5, #8]
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d1b7      	bne.n	8006b2a <oslib_test_002_001_execute.lto_priv.0+0xaa>
 8006bba:	6929      	ldr	r1, [r5, #16]
 8006bbc:	2910      	cmp	r1, #16
 8006bbe:	d1b4      	bne.n	8006b2a <oslib_test_002_001_execute.lto_priv.0+0xaa>
  if (pp->reset) {
 8006bc0:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(6);
 8006bc2:	2206      	movs	r2, #6
 8006bc4:	6032      	str	r2, [r6, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d139      	bne.n	8006c3e <oslib_test_002_001_execute.lto_priv.0+0x1be>
 8006bca:	4668      	mov	r0, sp
 8006bcc:	f003 fb58 	bl	800a280 <chPipeReadTimeout.part.0.constprop.0>
 8006bd0:	2810      	cmp	r0, #16
 8006bd2:	d134      	bne.n	8006c3e <oslib_test_002_001_execute.lto_priv.0+0x1be>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006bd4:	682a      	ldr	r2, [r5, #0]
 8006bd6:	68eb      	ldr	r3, [r5, #12]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d032      	beq.n	8006c42 <oslib_test_002_001_execute.lto_priv.0+0x1c2>
 8006bdc:	4b25      	ldr	r3, [pc, #148]	@ (8006c74 <oslib_test_002_001_execute.lto_priv.0+0x1f4>)
  test_local_fail      = true;
 8006bde:	4c22      	ldr	r4, [pc, #136]	@ (8006c68 <oslib_test_002_001_execute.lto_priv.0+0x1e8>)
  test_global_fail     = true;
 8006be0:	4822      	ldr	r0, [pc, #136]	@ (8006c6c <oslib_test_002_001_execute.lto_priv.0+0x1ec>)
  test_failure_message = msg;
 8006be2:	4923      	ldr	r1, [pc, #140]	@ (8006c70 <oslib_test_002_001_execute.lto_priv.0+0x1f0>)
  test_local_fail      = true;
 8006be4:	2201      	movs	r2, #1
 8006be6:	7022      	strb	r2, [r4, #0]
  test_global_fail     = true;
 8006be8:	7002      	strb	r2, [r0, #0]
  test_failure_message = msg;
 8006bea:	600b      	str	r3, [r1, #0]
 8006bec:	e7a5      	b.n	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
 8006bee:	2010      	movs	r0, #16
 8006bf0:	f003 fbb6 	bl	800a360 <chPipeWriteTimeout.part.0.constprop.0>
  if (!condition)
 8006bf4:	b148      	cbz	r0, 8006c0a <oslib_test_002_001_execute.lto_priv.0+0x18a>
  test_local_fail      = true;
 8006bf6:	4c1c      	ldr	r4, [pc, #112]	@ (8006c68 <oslib_test_002_001_execute.lto_priv.0+0x1e8>)
  test_global_fail     = true;
 8006bf8:	481c      	ldr	r0, [pc, #112]	@ (8006c6c <oslib_test_002_001_execute.lto_priv.0+0x1ec>)
  test_failure_message = msg;
 8006bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8006c70 <oslib_test_002_001_execute.lto_priv.0+0x1f0>)
 8006bfc:	491e      	ldr	r1, [pc, #120]	@ (8006c78 <oslib_test_002_001_execute.lto_priv.0+0x1f8>)
 8006bfe:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8006c00:	2301      	movs	r3, #1
 8006c02:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8006c04:	7003      	strb	r3, [r0, #0]
}
 8006c06:	b005      	add	sp, #20
 8006c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006c0a:	f854 2c20 	ldr.w	r2, [r4, #-32]
 8006c0e:	68eb      	ldr	r3, [r5, #12]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d18a      	bne.n	8006b2a <oslib_test_002_001_execute.lto_priv.0+0xaa>
 8006c14:	68aa      	ldr	r2, [r5, #8]
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d187      	bne.n	8006b2a <oslib_test_002_001_execute.lto_priv.0+0xaa>
 8006c1a:	e7a0      	b.n	8006b5e <oslib_test_002_001_execute.lto_priv.0+0xde>
 8006c1c:	2110      	movs	r1, #16
 8006c1e:	4668      	mov	r0, sp
 8006c20:	f003 fb2e 	bl	800a280 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition)
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d0ae      	beq.n	8006b86 <oslib_test_002_001_execute.lto_priv.0+0x106>
 8006c28:	4a13      	ldr	r2, [pc, #76]	@ (8006c78 <oslib_test_002_001_execute.lto_priv.0+0x1f8>)
 8006c2a:	e7a4      	b.n	8006b76 <oslib_test_002_001_execute.lto_priv.0+0xf6>
  test_local_fail      = true;
 8006c2c:	4c0e      	ldr	r4, [pc, #56]	@ (8006c68 <oslib_test_002_001_execute.lto_priv.0+0x1e8>)
  test_global_fail     = true;
 8006c2e:	480f      	ldr	r0, [pc, #60]	@ (8006c6c <oslib_test_002_001_execute.lto_priv.0+0x1ec>)
  test_failure_message = msg;
 8006c30:	4a0f      	ldr	r2, [pc, #60]	@ (8006c70 <oslib_test_002_001_execute.lto_priv.0+0x1f0>)
 8006c32:	4912      	ldr	r1, [pc, #72]	@ (8006c7c <oslib_test_002_001_execute.lto_priv.0+0x1fc>)
 8006c34:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8006c36:	2301      	movs	r3, #1
 8006c38:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8006c3a:	7003      	strb	r3, [r0, #0]
 8006c3c:	e77d      	b.n	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c7c <oslib_test_002_001_execute.lto_priv.0+0x1fc>)
 8006c40:	e7cd      	b.n	8006bde <oslib_test_002_001_execute.lto_priv.0+0x15e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006c42:	68aa      	ldr	r2, [r5, #8]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d1c9      	bne.n	8006bdc <oslib_test_002_001_execute.lto_priv.0+0x15c>
 8006c48:	692f      	ldr	r7, [r5, #16]
 8006c4a:	2f00      	cmp	r7, #0
 8006c4c:	d1c6      	bne.n	8006bdc <oslib_test_002_001_execute.lto_priv.0+0x15c>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <oslib_test_002_001_execute.lto_priv.0+0x200>)
 8006c50:	9a00      	ldr	r2, [sp, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d018      	beq.n	8006c88 <oslib_test_002_001_execute.lto_priv.0+0x208>
 8006c56:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <oslib_test_002_001_execute.lto_priv.0+0x204>)
 8006c58:	e7c1      	b.n	8006bde <oslib_test_002_001_execute.lto_priv.0+0x15e>
 8006c5a:	bf00      	nop
 8006c5c:	200010b4 	.word	0x200010b4
 8006c60:	20000858 	.word	0x20000858
 8006c64:	200011c0 	.word	0x200011c0
 8006c68:	200010d1 	.word	0x200010d1
 8006c6c:	200010d0 	.word	0x200010d0
 8006c70:	200010cc 	.word	0x200010cc
 8006c74:	0800b29c 	.word	0x0800b29c
 8006c78:	0800b5f8 	.word	0x0800b5f8
 8006c7c:	0800b2b0 	.word	0x0800b2b0
 8006c80:	33323130 	.word	0x33323130
 8006c84:	0800b604 	.word	0x0800b604
 8006c88:	4aad      	ldr	r2, [pc, #692]	@ (8006f40 <oslib_test_002_001_execute.lto_priv.0+0x4c0>)
 8006c8a:	9901      	ldr	r1, [sp, #4]
 8006c8c:	4291      	cmp	r1, r2
 8006c8e:	ab01      	add	r3, sp, #4
 8006c90:	d1e1      	bne.n	8006c56 <oslib_test_002_001_execute.lto_priv.0+0x1d6>
 8006c92:	f102 6230 	add.w	r2, r2, #184549376	@ 0xb000000
 8006c96:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8006c9a:	f502 2230 	add.w	r2, r2, #720896	@ 0xb0000
 8006c9e:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8006ca2:	4291      	cmp	r1, r2
 8006ca4:	d1d7      	bne.n	8006c56 <oslib_test_002_001_execute.lto_priv.0+0x1d6>
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	4ba6      	ldr	r3, [pc, #664]	@ (8006f44 <oslib_test_002_001_execute.lto_priv.0+0x4c4>)
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d1d3      	bne.n	8006c56 <oslib_test_002_001_execute.lto_priv.0+0x1d6>
  if (pp->reset) {
 8006cae:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(7);
 8006cb0:	2207      	movs	r2, #7
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8006cb2:	2400      	movs	r4, #0
  test_set_step(7);
 8006cb4:	6032      	str	r2, [r6, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1b8      	bne.n	8006c2c <oslib_test_002_001_execute.lto_priv.0+0x1ac>
 8006cba:	2004      	movs	r0, #4
 8006cbc:	f003 fb50 	bl	800a360 <chPipeWriteTimeout.part.0.constprop.0>
  if (!condition)
 8006cc0:	2804      	cmp	r0, #4
 8006cc2:	d1b3      	bne.n	8006c2c <oslib_test_002_001_execute.lto_priv.0+0x1ac>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8006cc4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <oslib_test_002_001_execute.lto_priv.0+0x254>
 8006ccc:	682a      	ldr	r2, [r5, #0]
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	f000 8116 	beq.w	8006f00 <oslib_test_002_001_execute.lto_priv.0+0x480>
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	499c      	ldr	r1, [pc, #624]	@ (8006f48 <oslib_test_002_001_execute.lto_priv.0+0x4c8>)
 8006cd8:	f7ff f9f2 	bl	80060c0 <_test_assert>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	f47f af2c 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
 8006ce2:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(8);
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	6032      	str	r2, [r6, #0]
 8006ce8:	b913      	cbnz	r3, 8006cf0 <oslib_test_002_001_execute.lto_priv.0+0x270>
 8006cea:	200c      	movs	r0, #12
 8006cec:	f003 fb38 	bl	800a360 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8006cf0:	f1a0 020c 	sub.w	r2, r0, #12
 8006cf4:	4250      	negs	r0, r2
 8006cf6:	4150      	adcs	r0, r2
 8006cf8:	4994      	ldr	r1, [pc, #592]	@ (8006f4c <oslib_test_002_001_execute.lto_priv.0+0x4cc>)
 8006cfa:	f7ff f9e1 	bl	80060c0 <_test_assert>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f47f af1b 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006d04:	682a      	ldr	r2, [r5, #0]
 8006d06:	68eb      	ldr	r3, [r5, #12]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	f000 80fe 	beq.w	8006f0a <oslib_test_002_001_execute.lto_priv.0+0x48a>
 8006d0e:	498e      	ldr	r1, [pc, #568]	@ (8006f48 <oslib_test_002_001_execute.lto_priv.0+0x4c8>)
 8006d10:	f7ff f9d6 	bl	80060c0 <_test_assert>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f47f af10 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
  if (pp->reset) {
 8006d1a:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(9);
 8006d1c:	2209      	movs	r2, #9
 8006d1e:	6032      	str	r2, [r6, #0]
 8006d20:	b91b      	cbnz	r3, 8006d2a <oslib_test_002_001_execute.lto_priv.0+0x2aa>
 8006d22:	2104      	movs	r1, #4
 8006d24:	4668      	mov	r0, sp
 8006d26:	f003 faab 	bl	800a280 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 4, "wrong size");
 8006d2a:	f1a0 0e04 	sub.w	lr, r0, #4
 8006d2e:	f1de 0000 	rsbs	r0, lr, #0
 8006d32:	eb40 000e 	adc.w	r0, r0, lr
 8006d36:	4985      	ldr	r1, [pc, #532]	@ (8006f4c <oslib_test_002_001_execute.lto_priv.0+0x4cc>)
 8006d38:	f7ff f9c2 	bl	80060c0 <_test_assert>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f47f aefc 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	68ea      	ldr	r2, [r5, #12]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d003      	beq.n	8006d52 <oslib_test_002_001_execute.lto_priv.0+0x2d2>
 8006d4a:	68aa      	ldr	r2, [r5, #8]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	f000 80e6 	beq.w	8006f1e <oslib_test_002_001_execute.lto_priv.0+0x49e>
 8006d52:	497d      	ldr	r1, [pc, #500]	@ (8006f48 <oslib_test_002_001_execute.lto_priv.0+0x4c8>)
 8006d54:	f7ff f9b4 	bl	80060c0 <_test_assert>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f47f aeee 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 8006d5e:	9800      	ldr	r0, [sp, #0]
 8006d60:	4b7b      	ldr	r3, [pc, #492]	@ (8006f50 <oslib_test_002_001_execute.lto_priv.0+0x4d0>)
 8006d62:	1ac1      	subs	r1, r0, r3
 8006d64:	4248      	negs	r0, r1
 8006d66:	4148      	adcs	r0, r1
 8006d68:	497a      	ldr	r1, [pc, #488]	@ (8006f54 <oslib_test_002_001_execute.lto_priv.0+0x4d4>)
 8006d6a:	f7ff f9a9 	bl	80060c0 <_test_assert>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f47f aee3 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
 8006d74:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(10);
 8006d76:	220a      	movs	r2, #10
 8006d78:	6032      	str	r2, [r6, #0]
 8006d7a:	b91b      	cbnz	r3, 8006d84 <oslib_test_002_001_execute.lto_priv.0+0x304>
 8006d7c:	210c      	movs	r1, #12
 8006d7e:	4668      	mov	r0, sp
 8006d80:	f003 fa7e 	bl	800a280 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8006d84:	f1a0 020c 	sub.w	r2, r0, #12
 8006d88:	4250      	negs	r0, r2
 8006d8a:	4150      	adcs	r0, r2
 8006d8c:	496f      	ldr	r1, [pc, #444]	@ (8006f4c <oslib_test_002_001_execute.lto_priv.0+0x4cc>)
 8006d8e:	f7ff f997 	bl	80060c0 <_test_assert>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f47f aed1 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006d98:	682a      	ldr	r2, [r5, #0]
 8006d9a:	68eb      	ldr	r3, [r5, #12]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	f000 80c6 	beq.w	8006f2e <oslib_test_002_001_execute.lto_priv.0+0x4ae>
 8006da2:	4969      	ldr	r1, [pc, #420]	@ (8006f48 <oslib_test_002_001_execute.lto_priv.0+0x4c8>)
 8006da4:	f7ff f98c 	bl	80060c0 <_test_assert>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	f47f aec6 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 8006dae:	4669      	mov	r1, sp
 8006db0:	4869      	ldr	r0, [pc, #420]	@ (8006f58 <oslib_test_002_001_execute.lto_priv.0+0x4d8>)
 8006db2:	220c      	movs	r2, #12
 8006db4:	f7f9 fcda 	bl	800076c <memcmp>
 8006db8:	fab0 f080 	clz	r0, r0
 8006dbc:	4965      	ldr	r1, [pc, #404]	@ (8006f54 <oslib_test_002_001_execute.lto_priv.0+0x4d4>)
 8006dbe:	0940      	lsrs	r0, r0, #5
 8006dc0:	f7ff f97e 	bl	80060c0 <_test_assert>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	f47f aeb8 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
  if (pp->reset) {
 8006dca:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(11);
 8006dcc:	220b      	movs	r2, #11
 8006dce:	6032      	str	r2, [r6, #0]
 8006dd0:	b913      	cbnz	r3, 8006dd8 <oslib_test_002_001_execute.lto_priv.0+0x358>
 8006dd2:	2005      	movs	r0, #5
 8006dd4:	f003 fac4 	bl	800a360 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == 5, "wrong size");
 8006dd8:	1f43      	subs	r3, r0, #5
 8006dda:	4258      	negs	r0, r3
 8006ddc:	4158      	adcs	r0, r3
 8006dde:	495b      	ldr	r1, [pc, #364]	@ (8006f4c <oslib_test_002_001_execute.lto_priv.0+0x4cc>)
 8006de0:	f7ff f96e 	bl	80060c0 <_test_assert>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f47f aea8 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8006dea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <oslib_test_002_001_execute.lto_priv.0+0x37a>
 8006df2:	682a      	ldr	r2, [r5, #0]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	f000 80b1 	beq.w	8006f5c <oslib_test_002_001_execute.lto_priv.0+0x4dc>
 8006dfa:	4953      	ldr	r1, [pc, #332]	@ (8006f48 <oslib_test_002_001_execute.lto_priv.0+0x4c8>)
 8006dfc:	f7ff f960 	bl	80060c0 <_test_assert>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	f47f ae9a 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
  if (pp->reset) {
 8006e06:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(12);
 8006e08:	220c      	movs	r2, #12
 8006e0a:	6032      	str	r2, [r6, #0]
 8006e0c:	b91b      	cbnz	r3, 8006e16 <oslib_test_002_001_execute.lto_priv.0+0x396>
 8006e0e:	2105      	movs	r1, #5
 8006e10:	4668      	mov	r0, sp
 8006e12:	f003 fa35 	bl	800a280 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 5, "wrong size");
 8006e16:	f1a0 0c05 	sub.w	ip, r0, #5
 8006e1a:	f1dc 0000 	rsbs	r0, ip, #0
 8006e1e:	eb40 000c 	adc.w	r0, r0, ip
 8006e22:	494a      	ldr	r1, [pc, #296]	@ (8006f4c <oslib_test_002_001_execute.lto_priv.0+0x4cc>)
 8006e24:	f7ff f94c 	bl	80060c0 <_test_assert>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	f47f ae86 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006e2e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f000 809a 	beq.w	8006f6c <oslib_test_002_001_execute.lto_priv.0+0x4ec>
 8006e38:	4943      	ldr	r1, [pc, #268]	@ (8006f48 <oslib_test_002_001_execute.lto_priv.0+0x4c8>)
 8006e3a:	f7ff f941 	bl	80060c0 <_test_assert>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f47f ae7b 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 8006e44:	4669      	mov	r1, sp
 8006e46:	4844      	ldr	r0, [pc, #272]	@ (8006f58 <oslib_test_002_001_execute.lto_priv.0+0x4d8>)
 8006e48:	2205      	movs	r2, #5
 8006e4a:	f7f9 fc8f 	bl	800076c <memcmp>
 8006e4e:	fab0 f080 	clz	r0, r0
 8006e52:	4940      	ldr	r1, [pc, #256]	@ (8006f54 <oslib_test_002_001_execute.lto_priv.0+0x4d4>)
 8006e54:	0940      	lsrs	r0, r0, #5
 8006e56:	f7ff f933 	bl	80060c0 <_test_assert>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f47f ae6d 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
  if (pp->reset) {
 8006e60:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(13);
 8006e62:	220d      	movs	r2, #13
 8006e64:	6032      	str	r2, [r6, #0]
 8006e66:	b913      	cbnz	r3, 8006e6e <oslib_test_002_001_execute.lto_priv.0+0x3ee>
 8006e68:	2010      	movs	r0, #16
 8006e6a:	f003 fa79 	bl	800a360 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 8006e6e:	f1a0 0110 	sub.w	r1, r0, #16
 8006e72:	4248      	negs	r0, r1
 8006e74:	4148      	adcs	r0, r1
 8006e76:	4935      	ldr	r1, [pc, #212]	@ (8006f4c <oslib_test_002_001_execute.lto_priv.0+0x4cc>)
 8006e78:	f7ff f922 	bl	80060c0 <_test_assert>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f47f ae5c 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006e82:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d031      	beq.n	8006eee <oslib_test_002_001_execute.lto_priv.0+0x46e>
 8006e8a:	492f      	ldr	r1, [pc, #188]	@ (8006f48 <oslib_test_002_001_execute.lto_priv.0+0x4c8>)
 8006e8c:	f7ff f918 	bl	80060c0 <_test_assert>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	f47f ae52 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
  if (pp->reset) {
 8006e96:	7d2b      	ldrb	r3, [r5, #20]
  test_set_step(14);
 8006e98:	220e      	movs	r2, #14
 8006e9a:	6032      	str	r2, [r6, #0]
 8006e9c:	b923      	cbnz	r3, 8006ea8 <oslib_test_002_001_execute.lto_priv.0+0x428>
 8006e9e:	2110      	movs	r1, #16
 8006ea0:	4668      	mov	r0, sp
 8006ea2:	f003 f9ed 	bl	800a280 <chPipeReadTimeout.part.0.constprop.0>
 8006ea6:	4607      	mov	r7, r0
    test_assert(n == PIPE_SIZE, "wrong size");
 8006ea8:	f1a7 0310 	sub.w	r3, r7, #16
 8006eac:	4258      	negs	r0, r3
 8006eae:	4158      	adcs	r0, r3
 8006eb0:	4926      	ldr	r1, [pc, #152]	@ (8006f4c <oslib_test_002_001_execute.lto_priv.0+0x4cc>)
 8006eb2:	f7ff f905 	bl	80060c0 <_test_assert>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f47f ae3f 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006ebc:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d05c      	beq.n	8006f7e <oslib_test_002_001_execute.lto_priv.0+0x4fe>
 8006ec4:	4920      	ldr	r1, [pc, #128]	@ (8006f48 <oslib_test_002_001_execute.lto_priv.0+0x4c8>)
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7ff f8fa 	bl	80060c0 <_test_assert>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f47f ae34 	bne.w	8006b3a <oslib_test_002_001_execute.lto_priv.0+0xba>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8006ed2:	4669      	mov	r1, sp
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	4820      	ldr	r0, [pc, #128]	@ (8006f58 <oslib_test_002_001_execute.lto_priv.0+0x4d8>)
 8006ed8:	f7f9 fc48 	bl	800076c <memcmp>
 8006edc:	491d      	ldr	r1, [pc, #116]	@ (8006f54 <oslib_test_002_001_execute.lto_priv.0+0x4d4>)
 8006ede:	fab0 f080 	clz	r0, r0
 8006ee2:	0940      	lsrs	r0, r0, #5
}
 8006ee4:	b005      	add	sp, #20
 8006ee6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8006eea:	f7ff b8e9 	b.w	80060c0 <_test_assert>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006eee:	682a      	ldr	r2, [r5, #0]
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d0ca      	beq.n	8006e8a <oslib_test_002_001_execute.lto_priv.0+0x40a>
 8006ef4:	6928      	ldr	r0, [r5, #16]
 8006ef6:	f1a0 0210 	sub.w	r2, r0, #16
 8006efa:	4250      	negs	r0, r2
 8006efc:	4150      	adcs	r0, r2
 8006efe:	e7c4      	b.n	8006e8a <oslib_test_002_001_execute.lto_priv.0+0x40a>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8006f00:	6928      	ldr	r0, [r5, #16]
 8006f02:	1f01      	subs	r1, r0, #4
 8006f04:	4248      	negs	r0, r1
 8006f06:	4148      	adcs	r0, r1
 8006f08:	e6e5      	b.n	8006cd6 <oslib_test_002_001_execute.lto_priv.0+0x256>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006f0a:	68aa      	ldr	r2, [r5, #8]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	f47f aefe 	bne.w	8006d0e <oslib_test_002_001_execute.lto_priv.0+0x28e>
 8006f12:	6928      	ldr	r0, [r5, #16]
 8006f14:	f1a0 0310 	sub.w	r3, r0, #16
 8006f18:	4258      	negs	r0, r3
 8006f1a:	4158      	adcs	r0, r3
 8006f1c:	e6f7      	b.n	8006d0e <oslib_test_002_001_execute.lto_priv.0+0x28e>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 8006f1e:	6928      	ldr	r0, [r5, #16]
 8006f20:	f1a0 0c0c 	sub.w	ip, r0, #12
 8006f24:	f1dc 0000 	rsbs	r0, ip, #0
 8006f28:	eb40 000c 	adc.w	r0, r0, ip
 8006f2c:	e711      	b.n	8006d52 <oslib_test_002_001_execute.lto_priv.0+0x2d2>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8006f2e:	68aa      	ldr	r2, [r5, #8]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	f47f af36 	bne.w	8006da2 <oslib_test_002_001_execute.lto_priv.0+0x322>
 8006f36:	6928      	ldr	r0, [r5, #16]
 8006f38:	fab0 f080 	clz	r0, r0
 8006f3c:	0940      	lsrs	r0, r0, #5
 8006f3e:	e730      	b.n	8006da2 <oslib_test_002_001_execute.lto_priv.0+0x322>
 8006f40:	37363534 	.word	0x37363534
 8006f44:	46454443 	.word	0x46454443
 8006f48:	0800b29c 	.word	0x0800b29c
 8006f4c:	0800b2b0 	.word	0x0800b2b0
 8006f50:	33323130 	.word	0x33323130
 8006f54:	0800b604 	.word	0x0800b604
 8006f58:	0800ccd8 	.word	0x0800ccd8
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8006f5c:	6928      	ldr	r0, [r5, #16]
 8006f5e:	f1a0 0e05 	sub.w	lr, r0, #5
 8006f62:	f1de 0000 	rsbs	r0, lr, #0
 8006f66:	eb40 000e 	adc.w	r0, r0, lr
 8006f6a:	e746      	b.n	8006dfa <oslib_test_002_001_execute.lto_priv.0+0x37a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006f6c:	682a      	ldr	r2, [r5, #0]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	f43f af62 	beq.w	8006e38 <oslib_test_002_001_execute.lto_priv.0+0x3b8>
 8006f74:	6928      	ldr	r0, [r5, #16]
 8006f76:	fab0 f080 	clz	r0, r0
 8006f7a:	0940      	lsrs	r0, r0, #5
 8006f7c:	e75c      	b.n	8006e38 <oslib_test_002_001_execute.lto_priv.0+0x3b8>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8006f7e:	682a      	ldr	r2, [r5, #0]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d09f      	beq.n	8006ec4 <oslib_test_002_001_execute.lto_priv.0+0x444>
 8006f84:	692c      	ldr	r4, [r5, #16]
 8006f86:	fab4 f484 	clz	r4, r4
 8006f8a:	0964      	lsrs	r4, r4, #5
 8006f8c:	e79a      	b.n	8006ec4 <oslib_test_002_001_execute.lto_priv.0+0x444>
 8006f8e:	bf00      	nop

08006f90 <oslib_test_004_001_execute.lto_priv.0>:
static void oslib_test_004_001_execute(void) {
 8006f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8006f94:	4fc3      	ldr	r7, [pc, #780]	@ (80072a4 <oslib_test_004_001_execute.lto_priv.0+0x314>)
 8006f96:	2301      	movs	r3, #1
 8006f98:	603b      	str	r3, [r7, #0]
static void oslib_test_004_001_execute(void) {
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	48c1      	ldr	r0, [pc, #772]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
 8006fa4:	f7fe f91c 	bl	80051e0 <chMtxLockS>
 8006fa8:	2500      	movs	r5, #0
 8006faa:	f385 8811 	msr	BASEPRI, r5
  while (H_NEXT(qp) != NULL) {
 8006fae:	f8df 82fc 	ldr.w	r8, [pc, #764]	@ 80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>
 8006fb2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006fb6:	2c00      	cmp	r4, #0
 8006fb8:	f000 819f 	beq.w	80072fa <oslib_test_004_001_execute.lto_priv.0+0x36a>
  n = 0U;
 8006fbc:	462e      	mov	r6, r5
  while (H_NEXT(qp) != NULL) {
 8006fbe:	e9d4 4300 	ldrd	r4, r3, [r4]
    n++;
 8006fc2:	3601      	adds	r6, #1
    tpages += pages;
 8006fc4:	441d      	add	r5, r3
  while (H_NEXT(qp) != NULL) {
 8006fc6:	2c00      	cmp	r4, #0
 8006fc8:	d1f9      	bne.n	8006fbe <oslib_test_004_001_execute.lto_priv.0+0x2e>
  H_UNLOCK(heapp);
 8006fca:	48b7      	ldr	r0, [pc, #732]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
 8006fcc:	f7fe f9a8 	bl	8005320 <chMtxUnlock>
 8006fd0:	2e01      	cmp	r6, #1
 8006fd2:	f040 8196 	bne.w	8007302 <oslib_test_004_001_execute.lto_priv.0+0x372>
  test_set_step(2);
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	48b4      	ldr	r0, [pc, #720]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006fe0:	f003 fcd6 	bl	800a990 <chHeapAllocAligned.constprop.0>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f040 8197 	bne.w	8007318 <oslib_test_004_001_execute.lto_priv.0+0x388>
  test_set_step(3);
 8006fea:	2303      	movs	r3, #3
 8006fec:	48af      	ldr	r0, [pc, #700]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	2110      	movs	r1, #16
 8006ff2:	f003 fccd 	bl	800a990 <chHeapAllocAligned.constprop.0>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f000 8198 	beq.w	800732c <oslib_test_004_001_execute.lto_priv.0+0x39c>
    chHeapFree(p1);
 8006ffc:	f7fe fde8 	bl	8005bd0 <chHeapFree>
  test_set_step(4);
 8007000:	2304      	movs	r3, #4
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	2320      	movs	r3, #32
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	48a7      	ldr	r0, [pc, #668]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
 800700c:	f7fe f8e8 	bl	80051e0 <chMtxLockS>
 8007010:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 8007014:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8007018:	2e00      	cmp	r6, #0
 800701a:	f000 818f 	beq.w	800733c <oslib_test_004_001_execute.lto_priv.0+0x3ac>
  tpages = 0U;
 800701e:	4622      	mov	r2, r4
  n = 0U;
 8007020:	46a2      	mov	sl, r4
  while (H_NEXT(qp) != NULL) {
 8007022:	e9d6 6300 	ldrd	r6, r3, [r6]
    if (pages > lpages) {
 8007026:	429c      	cmp	r4, r3
    n++;
 8007028:	f10a 0a01 	add.w	sl, sl, #1
    tpages += pages;
 800702c:	441a      	add	r2, r3
    if (pages > lpages) {
 800702e:	bf38      	it	cc
 8007030:	461c      	movcc	r4, r3
  while (H_NEXT(qp) != NULL) {
 8007032:	2e00      	cmp	r6, #0
 8007034:	d1f5      	bne.n	8007022 <oslib_test_004_001_execute.lto_priv.0+0x92>
  H_UNLOCK(heapp);
 8007036:	489c      	ldr	r0, [pc, #624]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8007038:	ea4f 09c2 	mov.w	r9, r2, lsl #3
  H_UNLOCK(heapp);
 800703c:	f7fe f970 	bl	8005320 <chMtxUnlock>
 8007040:	f1ba 0f01 	cmp.w	sl, #1
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8007044:	f8cd a004 	str.w	sl, [sp, #4]
 8007048:	f040 817b 	bne.w	8007342 <oslib_test_004_001_execute.lto_priv.0+0x3b2>
 800704c:	f1b9 0f0f 	cmp.w	r9, #15
 8007050:	f240 8180 	bls.w	8007354 <oslib_test_004_001_execute.lto_priv.0+0x3c4>
 8007054:	ebb9 0fc4 	cmp.w	r9, r4, lsl #3
 8007058:	f040 817c 	bne.w	8007354 <oslib_test_004_001_execute.lto_priv.0+0x3c4>
  test_set_step(5);
 800705c:	2305      	movs	r3, #5
 800705e:	2110      	movs	r1, #16
 8007060:	4892      	ldr	r0, [pc, #584]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	f003 fc94 	bl	800a990 <chHeapAllocAligned.constprop.0>
 8007068:	2110      	movs	r1, #16
 800706a:	4682      	mov	sl, r0
 800706c:	488f      	ldr	r0, [pc, #572]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 800706e:	f003 fc8f 	bl	800a990 <chHeapAllocAligned.constprop.0>
 8007072:	2110      	movs	r1, #16
 8007074:	4681      	mov	r9, r0
 8007076:	488d      	ldr	r0, [pc, #564]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 8007078:	f003 fc8a 	bl	800a990 <chHeapAllocAligned.constprop.0>
 800707c:	4604      	mov	r4, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 800707e:	4650      	mov	r0, sl
 8007080:	f7fe fda6 	bl	8005bd0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 8007084:	4648      	mov	r0, r9
 8007086:	f7fe fda3 	bl	8005bd0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 800708a:	4620      	mov	r0, r4
 800708c:	f7fe fda0 	bl	8005bd0 <chHeapFree>
 8007090:	2320      	movs	r3, #32
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	4884      	ldr	r0, [pc, #528]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
 8007098:	f7fe f8a2 	bl	80051e0 <chMtxLockS>
 800709c:	f386 8811 	msr	BASEPRI, r6
  while (H_NEXT(qp) != NULL) {
 80070a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80070a4:	2c00      	cmp	r4, #0
 80070a6:	f000 815e 	beq.w	8007366 <oslib_test_004_001_execute.lto_priv.0+0x3d6>
  n = 0U;
 80070aa:	46b1      	mov	r9, r6
    tpages += pages;
 80070ac:	6863      	ldr	r3, [r4, #4]
  while (H_NEXT(qp) != NULL) {
 80070ae:	6824      	ldr	r4, [r4, #0]
    n++;
 80070b0:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 80070b4:	441e      	add	r6, r3
  while (H_NEXT(qp) != NULL) {
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	d1f8      	bne.n	80070ac <oslib_test_004_001_execute.lto_priv.0+0x11c>
  H_UNLOCK(heapp);
 80070ba:	487b      	ldr	r0, [pc, #492]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80070bc:	00f6      	lsls	r6, r6, #3
 80070be:	9601      	str	r6, [sp, #4]
  H_UNLOCK(heapp);
 80070c0:	f7fe f92e 	bl	8005320 <chMtxUnlock>
 80070c4:	f1b9 0f01 	cmp.w	r9, #1
 80070c8:	f040 811b 	bne.w	8007302 <oslib_test_004_001_execute.lto_priv.0+0x372>
  test_set_step(6);
 80070cc:	2306      	movs	r3, #6
 80070ce:	2110      	movs	r1, #16
 80070d0:	4876      	ldr	r0, [pc, #472]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	f003 fc5c 	bl	800a990 <chHeapAllocAligned.constprop.0>
 80070d8:	2110      	movs	r1, #16
 80070da:	4606      	mov	r6, r0
 80070dc:	4873      	ldr	r0, [pc, #460]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 80070de:	f003 fc57 	bl	800a990 <chHeapAllocAligned.constprop.0>
 80070e2:	2110      	movs	r1, #16
 80070e4:	4681      	mov	r9, r0
 80070e6:	4871      	ldr	r0, [pc, #452]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 80070e8:	f003 fc52 	bl	800a990 <chHeapAllocAligned.constprop.0>
    chHeapFree(p3);                                 /* Merges forward.*/
 80070ec:	f7fe fd70 	bl	8005bd0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 80070f0:	4648      	mov	r0, r9
 80070f2:	f7fe fd6d 	bl	8005bd0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 80070f6:	4630      	mov	r0, r6
 80070f8:	f7fe fd6a 	bl	8005bd0 <chHeapFree>
 80070fc:	2320      	movs	r3, #32
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	4869      	ldr	r0, [pc, #420]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
 8007104:	f7fe f86c 	bl	80051e0 <chMtxLockS>
 8007108:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 800710c:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8007110:	2e00      	cmp	r6, #0
 8007112:	f000 8128 	beq.w	8007366 <oslib_test_004_001_execute.lto_priv.0+0x3d6>
  n = 0U;
 8007116:	46a1      	mov	r9, r4
    tpages += pages;
 8007118:	6873      	ldr	r3, [r6, #4]
  while (H_NEXT(qp) != NULL) {
 800711a:	6836      	ldr	r6, [r6, #0]
    n++;
 800711c:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 8007120:	441c      	add	r4, r3
  while (H_NEXT(qp) != NULL) {
 8007122:	2e00      	cmp	r6, #0
 8007124:	d1f8      	bne.n	8007118 <oslib_test_004_001_execute.lto_priv.0+0x188>
  H_UNLOCK(heapp);
 8007126:	4860      	ldr	r0, [pc, #384]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8007128:	00e4      	lsls	r4, r4, #3
 800712a:	9401      	str	r4, [sp, #4]
  H_UNLOCK(heapp);
 800712c:	f7fe f8f8 	bl	8005320 <chMtxUnlock>
 8007130:	f1b9 0f01 	cmp.w	r9, #1
 8007134:	f040 80e5 	bne.w	8007302 <oslib_test_004_001_execute.lto_priv.0+0x372>
  test_set_step(7);
 8007138:	2307      	movs	r3, #7
 800713a:	2111      	movs	r1, #17
 800713c:	485b      	ldr	r0, [pc, #364]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	f003 fc26 	bl	800a990 <chHeapAllocAligned.constprop.0>
 8007144:	2110      	movs	r1, #16
 8007146:	4604      	mov	r4, r0
 8007148:	4858      	ldr	r0, [pc, #352]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 800714a:	f003 fc21 	bl	800a990 <chHeapAllocAligned.constprop.0>
 800714e:	4681      	mov	r9, r0
    chHeapFree(p1);
 8007150:	4620      	mov	r0, r4
 8007152:	f7fe fd3d 	bl	8005bd0 <chHeapFree>
 8007156:	2320      	movs	r3, #32
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	4852      	ldr	r0, [pc, #328]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
 800715e:	f7fe f83f 	bl	80051e0 <chMtxLockS>
 8007162:	f386 8811 	msr	BASEPRI, r6
  while (H_NEXT(qp) != NULL) {
 8007166:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800716a:	2c00      	cmp	r4, #0
 800716c:	f000 80ff 	beq.w	800736e <oslib_test_004_001_execute.lto_priv.0+0x3de>
  n = 0U;
 8007170:	46b0      	mov	r8, r6
    tpages += pages;
 8007172:	6863      	ldr	r3, [r4, #4]
  while (H_NEXT(qp) != NULL) {
 8007174:	6824      	ldr	r4, [r4, #0]
    n++;
 8007176:	f108 0801 	add.w	r8, r8, #1
    tpages += pages;
 800717a:	441e      	add	r6, r3
  while (H_NEXT(qp) != NULL) {
 800717c:	2c00      	cmp	r4, #0
 800717e:	d1f8      	bne.n	8007172 <oslib_test_004_001_execute.lto_priv.0+0x1e2>
  H_UNLOCK(heapp);
 8007180:	4849      	ldr	r0, [pc, #292]	@ (80072a8 <oslib_test_004_001_execute.lto_priv.0+0x318>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8007182:	00f6      	lsls	r6, r6, #3
 8007184:	9601      	str	r6, [sp, #4]
  H_UNLOCK(heapp);
 8007186:	f7fe f8cb 	bl	8005320 <chMtxUnlock>
 800718a:	f1b8 0f02 	cmp.w	r8, #2
 800718e:	f040 80f1 	bne.w	8007374 <oslib_test_004_001_execute.lto_priv.0+0x3e4>
 8007192:	2110      	movs	r1, #16
 8007194:	4845      	ldr	r0, [pc, #276]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 8007196:	f003 fbfb 	bl	800a990 <chHeapAllocAligned.constprop.0>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800719a:	4622      	mov	r2, r4
 800719c:	4606      	mov	r6, r0
 800719e:	a901      	add	r1, sp, #4
 80071a0:	4842      	ldr	r0, [pc, #264]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 80071a2:	f7fe f905 	bl	80053b0 <chHeapStatus>
 80071a6:	2801      	cmp	r0, #1
 80071a8:	d00a      	beq.n	80071c0 <oslib_test_004_001_execute.lto_priv.0+0x230>
 80071aa:	4840      	ldr	r0, [pc, #256]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 80071ac:	4622      	mov	r2, r4
 80071ae:	a901      	add	r1, sp, #4
 80071b0:	f7fe f8fe 	bl	80053b0 <chHeapStatus>
 80071b4:	f1a0 0c02 	sub.w	ip, r0, #2
 80071b8:	f1dc 0000 	rsbs	r0, ip, #0
 80071bc:	eb40 000c 	adc.w	r0, r0, ip
 80071c0:	493b      	ldr	r1, [pc, #236]	@ (80072b0 <oslib_test_004_001_execute.lto_priv.0+0x320>)
 80071c2:	f7fe ff7d 	bl	80060c0 <_test_assert>
 80071c6:	4604      	mov	r4, r0
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f040 80a2 	bne.w	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
    chHeapFree(p2);
 80071ce:	4648      	mov	r0, r9
 80071d0:	f7fe fcfe 	bl	8005bd0 <chHeapFree>
    chHeapFree(p1);
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7fe fcfb 	bl	8005bd0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80071da:	4622      	mov	r2, r4
 80071dc:	a901      	add	r1, sp, #4
 80071de:	4833      	ldr	r0, [pc, #204]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 80071e0:	f7fe f8e6 	bl	80053b0 <chHeapStatus>
 80071e4:	1e44      	subs	r4, r0, #1
 80071e6:	4260      	negs	r0, r4
 80071e8:	4160      	adcs	r0, r4
 80071ea:	4931      	ldr	r1, [pc, #196]	@ (80072b0 <oslib_test_004_001_execute.lto_priv.0+0x320>)
 80071ec:	f7fe ff68 	bl	80060c0 <_test_assert>
 80071f0:	4604      	mov	r4, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f040 808d 	bne.w	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
  test_set_step(8);
 80071f8:	2308      	movs	r3, #8
 80071fa:	2110      	movs	r1, #16
 80071fc:	482b      	ldr	r0, [pc, #172]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	f003 fbc6 	bl	800a990 <chHeapAllocAligned.constprop.0>
 8007204:	2110      	movs	r1, #16
 8007206:	4680      	mov	r8, r0
 8007208:	4828      	ldr	r0, [pc, #160]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 800720a:	f003 fbc1 	bl	800a990 <chHeapAllocAligned.constprop.0>
 800720e:	4606      	mov	r6, r0
    chHeapFree(p1);
 8007210:	4640      	mov	r0, r8
 8007212:	f7fe fcdd 	bl	8005bd0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8007216:	4622      	mov	r2, r4
 8007218:	a901      	add	r1, sp, #4
 800721a:	4824      	ldr	r0, [pc, #144]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 800721c:	f7fe f8c8 	bl	80053b0 <chHeapStatus>
 8007220:	1e81      	subs	r1, r0, #2
 8007222:	4248      	negs	r0, r1
 8007224:	4148      	adcs	r0, r1
 8007226:	4923      	ldr	r1, [pc, #140]	@ (80072b4 <oslib_test_004_001_execute.lto_priv.0+0x324>)
 8007228:	f7fe ff4a 	bl	80060c0 <_test_assert>
 800722c:	4604      	mov	r4, r0
 800722e:	2800      	cmp	r0, #0
 8007230:	d16f      	bne.n	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
 8007232:	2120      	movs	r1, #32
 8007234:	481d      	ldr	r0, [pc, #116]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 8007236:	f003 fbab 	bl	800a990 <chHeapAllocAligned.constprop.0>
    chHeapFree(p1);
 800723a:	f7fe fcc9 	bl	8005bd0 <chHeapFree>
    chHeapFree(p2);
 800723e:	4630      	mov	r0, r6
 8007240:	f7fe fcc6 	bl	8005bd0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007244:	4622      	mov	r2, r4
 8007246:	a901      	add	r1, sp, #4
 8007248:	4818      	ldr	r0, [pc, #96]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 800724a:	f7fe f8b1 	bl	80053b0 <chHeapStatus>
 800724e:	1e42      	subs	r2, r0, #1
 8007250:	4250      	negs	r0, r2
 8007252:	4150      	adcs	r0, r2
 8007254:	4916      	ldr	r1, [pc, #88]	@ (80072b0 <oslib_test_004_001_execute.lto_priv.0+0x320>)
 8007256:	f7fe ff33 	bl	80060c0 <_test_assert>
 800725a:	4602      	mov	r2, r0
 800725c:	2800      	cmp	r0, #0
 800725e:	d158      	bne.n	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
  test_set_step(9);
 8007260:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8007262:	a901      	add	r1, sp, #4
 8007264:	4811      	ldr	r0, [pc, #68]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
  test_set_step(9);
 8007266:	603b      	str	r3, [r7, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8007268:	f7fe f8a2 	bl	80053b0 <chHeapStatus>
 800726c:	9901      	ldr	r1, [sp, #4]
 800726e:	480f      	ldr	r0, [pc, #60]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 8007270:	f003 fb8e 	bl	800a990 <chHeapAllocAligned.constprop.0>
    test_assert(p1 != NULL, "allocation failed");
 8007274:	4606      	mov	r6, r0
 8007276:	3800      	subs	r0, #0
 8007278:	490f      	ldr	r1, [pc, #60]	@ (80072b8 <oslib_test_004_001_execute.lto_priv.0+0x328>)
 800727a:	bf18      	it	ne
 800727c:	2001      	movne	r0, #1
 800727e:	f7fe ff1f 	bl	80060c0 <_test_assert>
 8007282:	4602      	mov	r2, r0
 8007284:	2800      	cmp	r0, #0
 8007286:	d144      	bne.n	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8007288:	4611      	mov	r1, r2
 800728a:	4808      	ldr	r0, [pc, #32]	@ (80072ac <oslib_test_004_001_execute.lto_priv.0+0x31c>)
 800728c:	f7fe f890 	bl	80053b0 <chHeapStatus>
 8007290:	fab0 f080 	clz	r0, r0
 8007294:	4909      	ldr	r1, [pc, #36]	@ (80072bc <oslib_test_004_001_execute.lto_priv.0+0x32c>)
 8007296:	0940      	lsrs	r0, r0, #5
 8007298:	f7fe ff12 	bl	80060c0 <_test_assert>
 800729c:	4604      	mov	r4, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	d137      	bne.n	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
 80072a2:	e00d      	b.n	80072c0 <oslib_test_004_001_execute.lto_priv.0+0x330>
 80072a4:	200010b4 	.word	0x200010b4
 80072a8:	2000096c 	.word	0x2000096c
 80072ac:	20000960 	.word	0x20000960
 80072b0:	0800b468 	.word	0x0800b468
 80072b4:	0800b644 	.word	0x0800b644
 80072b8:	0800b4d8 	.word	0x0800b4d8
 80072bc:	0800b540 	.word	0x0800b540
    chHeapFree(p1);
 80072c0:	4630      	mov	r0, r6
 80072c2:	f7fe fc85 	bl	8005bd0 <chHeapFree>
  test_set_step(10);
 80072c6:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80072c8:	a901      	add	r1, sp, #4
 80072ca:	482f      	ldr	r0, [pc, #188]	@ (8007388 <oslib_test_004_001_execute.lto_priv.0+0x3f8>)
  test_set_step(10);
 80072cc:	603b      	str	r3, [r7, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80072ce:	4622      	mov	r2, r4
 80072d0:	f7fe f86e 	bl	80053b0 <chHeapStatus>
 80072d4:	1e43      	subs	r3, r0, #1
 80072d6:	4258      	negs	r0, r3
 80072d8:	4158      	adcs	r0, r3
 80072da:	492c      	ldr	r1, [pc, #176]	@ (800738c <oslib_test_004_001_execute.lto_priv.0+0x3fc>)
 80072dc:	f7fe fef0 	bl	80060c0 <_test_assert>
 80072e0:	b9b8      	cbnz	r0, 8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
    test_assert(n == sz, "size changed");
 80072e2:	9b01      	ldr	r3, [sp, #4]
 80072e4:	492a      	ldr	r1, [pc, #168]	@ (8007390 <oslib_test_004_001_execute.lto_priv.0+0x400>)
 80072e6:	ebb3 0fc5 	cmp.w	r3, r5, lsl #3
 80072ea:	bf0c      	ite	eq
 80072ec:	2001      	moveq	r0, #1
 80072ee:	2000      	movne	r0, #0
}
 80072f0:	b002      	add	sp, #8
 80072f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(n == sz, "size changed");
 80072f6:	f7fe bee3 	b.w	80060c0 <_test_assert>
 80072fa:	f108 000c 	add.w	r0, r8, #12
 80072fe:	f7fe f80f 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 8007302:	4c24      	ldr	r4, [pc, #144]	@ (8007394 <oslib_test_004_001_execute.lto_priv.0+0x404>)
  test_global_fail     = true;
 8007304:	4824      	ldr	r0, [pc, #144]	@ (8007398 <oslib_test_004_001_execute.lto_priv.0+0x408>)
  test_failure_message = msg;
 8007306:	4a25      	ldr	r2, [pc, #148]	@ (800739c <oslib_test_004_001_execute.lto_priv.0+0x40c>)
 8007308:	4920      	ldr	r1, [pc, #128]	@ (800738c <oslib_test_004_001_execute.lto_priv.0+0x3fc>)
 800730a:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800730c:	2301      	movs	r3, #1
 800730e:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007310:	7003      	strb	r3, [r0, #0]
}
 8007312:	b002      	add	sp, #8
 8007314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  test_local_fail      = true;
 8007318:	481e      	ldr	r0, [pc, #120]	@ (8007394 <oslib_test_004_001_execute.lto_priv.0+0x404>)
  test_global_fail     = true;
 800731a:	491f      	ldr	r1, [pc, #124]	@ (8007398 <oslib_test_004_001_execute.lto_priv.0+0x408>)
  test_failure_message = msg;
 800731c:	4b1f      	ldr	r3, [pc, #124]	@ (800739c <oslib_test_004_001_execute.lto_priv.0+0x40c>)
 800731e:	4a20      	ldr	r2, [pc, #128]	@ (80073a0 <oslib_test_004_001_execute.lto_priv.0+0x410>)
  test_local_fail      = true;
 8007320:	7006      	strb	r6, [r0, #0]
  test_global_fail     = true;
 8007322:	700e      	strb	r6, [r1, #0]
  test_failure_message = msg;
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	b002      	add	sp, #8
 8007328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  test_local_fail      = true;
 800732c:	4819      	ldr	r0, [pc, #100]	@ (8007394 <oslib_test_004_001_execute.lto_priv.0+0x404>)
  test_global_fail     = true;
 800732e:	491a      	ldr	r1, [pc, #104]	@ (8007398 <oslib_test_004_001_execute.lto_priv.0+0x408>)
  test_failure_message = msg;
 8007330:	4b1a      	ldr	r3, [pc, #104]	@ (800739c <oslib_test_004_001_execute.lto_priv.0+0x40c>)
 8007332:	4a1c      	ldr	r2, [pc, #112]	@ (80073a4 <oslib_test_004_001_execute.lto_priv.0+0x414>)
  test_local_fail      = true;
 8007334:	7006      	strb	r6, [r0, #0]
  test_global_fail     = true;
 8007336:	700e      	strb	r6, [r1, #0]
  test_failure_message = msg;
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e7ea      	b.n	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
 800733c:	481a      	ldr	r0, [pc, #104]	@ (80073a8 <oslib_test_004_001_execute.lto_priv.0+0x418>)
 800733e:	f7fd ffef 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 8007342:	4c14      	ldr	r4, [pc, #80]	@ (8007394 <oslib_test_004_001_execute.lto_priv.0+0x404>)
  test_global_fail     = true;
 8007344:	4814      	ldr	r0, [pc, #80]	@ (8007398 <oslib_test_004_001_execute.lto_priv.0+0x408>)
  test_failure_message = msg;
 8007346:	4a15      	ldr	r2, [pc, #84]	@ (800739c <oslib_test_004_001_execute.lto_priv.0+0x40c>)
 8007348:	4918      	ldr	r1, [pc, #96]	@ (80073ac <oslib_test_004_001_execute.lto_priv.0+0x41c>)
 800734a:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800734c:	2301      	movs	r3, #1
 800734e:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007350:	7003      	strb	r3, [r0, #0]
 8007352:	e7de      	b.n	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
  test_local_fail      = true;
 8007354:	4c0f      	ldr	r4, [pc, #60]	@ (8007394 <oslib_test_004_001_execute.lto_priv.0+0x404>)
  test_global_fail     = true;
 8007356:	4810      	ldr	r0, [pc, #64]	@ (8007398 <oslib_test_004_001_execute.lto_priv.0+0x408>)
  test_failure_message = msg;
 8007358:	4a10      	ldr	r2, [pc, #64]	@ (800739c <oslib_test_004_001_execute.lto_priv.0+0x40c>)
 800735a:	4915      	ldr	r1, [pc, #84]	@ (80073b0 <oslib_test_004_001_execute.lto_priv.0+0x420>)
 800735c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800735e:	2301      	movs	r3, #1
 8007360:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007362:	7003      	strb	r3, [r0, #0]
 8007364:	e7d5      	b.n	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
 8007366:	4810      	ldr	r0, [pc, #64]	@ (80073a8 <oslib_test_004_001_execute.lto_priv.0+0x418>)
 8007368:	f7fd ffda 	bl	8005320 <chMtxUnlock>
bool _test_assert(bool condition, const char *msg) {
 800736c:	e7c9      	b.n	8007302 <oslib_test_004_001_execute.lto_priv.0+0x372>
 800736e:	480e      	ldr	r0, [pc, #56]	@ (80073a8 <oslib_test_004_001_execute.lto_priv.0+0x418>)
 8007370:	f7fd ffd6 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 8007374:	4c07      	ldr	r4, [pc, #28]	@ (8007394 <oslib_test_004_001_execute.lto_priv.0+0x404>)
  test_global_fail     = true;
 8007376:	4808      	ldr	r0, [pc, #32]	@ (8007398 <oslib_test_004_001_execute.lto_priv.0+0x408>)
  test_failure_message = msg;
 8007378:	4a08      	ldr	r2, [pc, #32]	@ (800739c <oslib_test_004_001_execute.lto_priv.0+0x40c>)
 800737a:	490e      	ldr	r1, [pc, #56]	@ (80073b4 <oslib_test_004_001_execute.lto_priv.0+0x424>)
 800737c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800737e:	2301      	movs	r3, #1
 8007380:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007382:	7003      	strb	r3, [r0, #0]
 8007384:	e7c5      	b.n	8007312 <oslib_test_004_001_execute.lto_priv.0+0x382>
 8007386:	bf00      	nop
 8007388:	20000960 	.word	0x20000960
 800738c:	0800b468 	.word	0x0800b468
 8007390:	0800b654 	.word	0x0800b654
 8007394:	200010d1 	.word	0x200010d1
 8007398:	200010d0 	.word	0x200010d0
 800739c:	200010cc 	.word	0x200010cc
 80073a0:	0800b4ec 	.word	0x0800b4ec
 80073a4:	0800b4d8 	.word	0x0800b4d8
 80073a8:	2000096c 	.word	0x2000096c
 80073ac:	0800b618 	.word	0x0800b618
 80073b0:	0800b62c 	.word	0x0800b62c
 80073b4:	0800b644 	.word	0x0800b644
	...

080073c0 <oslib_test_005_001_execute.lto_priv.0>:
static void oslib_test_005_001_execute(void) {
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80073c4:	4f6a      	ldr	r7, [pc, #424]	@ (8007570 <oslib_test_005_001_execute.lto_priv.0+0x1b0>)
 80073c6:	2301      	movs	r3, #1
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	2320      	movs	r3, #32
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	4d68      	ldr	r5, [pc, #416]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
 80073d2:	4628      	mov	r0, r5
 80073d4:	f7fd ff04 	bl	80051e0 <chMtxLockS>
 80073d8:	2300      	movs	r3, #0
 80073da:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80073de:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 80073e2:	42ac      	cmp	r4, r5
 80073e4:	d01c      	beq.n	8007420 <oslib_test_005_001_execute.lto_priv.0+0x60>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80073e6:	4e64      	ldr	r6, [pc, #400]	@ (8007578 <oslib_test_005_001_execute.lto_priv.0+0x1b8>)
 80073e8:	e002      	b.n	80073f0 <oslib_test_005_001_execute.lto_priv.0+0x30>
    p = p->next;
 80073ea:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80073ec:	42ac      	cmp	r4, r5
 80073ee:	d017      	beq.n	8007420 <oslib_test_005_001_execute.lto_priv.0+0x60>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80073f0:	4631      	mov	r1, r6
 80073f2:	f104 0008 	add.w	r0, r4, #8
 80073f6:	f7f9 f803 	bl	8000400 <strcmp>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d1f5      	bne.n	80073ea <oslib_test_005_001_execute.lto_priv.0+0x2a>
  if (dep != NULL) {
 80073fe:	b17c      	cbz	r4, 8007420 <oslib_test_005_001_execute.lto_priv.0+0x60>
    dep->refs++;
 8007400:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 8007402:	485c      	ldr	r0, [pc, #368]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
    dep->refs++;
 8007404:	3301      	adds	r3, #1
 8007406:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8007408:	f7fd ff8a 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 800740c:	4c5b      	ldr	r4, [pc, #364]	@ (800757c <oslib_test_005_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 800740e:	485c      	ldr	r0, [pc, #368]	@ (8007580 <oslib_test_005_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 8007410:	4a5c      	ldr	r2, [pc, #368]	@ (8007584 <oslib_test_005_001_execute.lto_priv.0+0x1c4>)
 8007412:	495d      	ldr	r1, [pc, #372]	@ (8007588 <oslib_test_005_001_execute.lto_priv.0+0x1c8>)
 8007414:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8007416:	2301      	movs	r3, #1
 8007418:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800741a:	7003      	strb	r3, [r0, #0]
}
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	4854      	ldr	r0, [pc, #336]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
 8007422:	f7fd ff7d 	bl	8005320 <chMtxUnlock>
  test_set_step(2);
 8007426:	2302      	movs	r3, #2
 8007428:	2620      	movs	r6, #32
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	f386 8811 	msr	BASEPRI, r6
 8007430:	4850      	ldr	r0, [pc, #320]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
 8007432:	f7fd fed5 	bl	80051e0 <chMtxLockS>
 8007436:	2500      	movs	r5, #0
 8007438:	f385 8811 	msr	BASEPRI, r5
  rop = (registered_object_t *)dyn_create_object_pool(name,
 800743c:	4a53      	ldr	r2, [pc, #332]	@ (800758c <oslib_test_005_001_execute.lto_priv.0+0x1cc>)
 800743e:	484e      	ldr	r0, [pc, #312]	@ (8007578 <oslib_test_005_001_execute.lto_priv.0+0x1b8>)
 8007440:	1f11      	subs	r1, r2, #4
 8007442:	f7fa faf5 	bl	8001a30 <dyn_create_object_pool.lto_priv.0>
  if (rop != NULL) {
 8007446:	4604      	mov	r4, r0
 8007448:	b328      	cbz	r0, 8007496 <oslib_test_005_001_execute.lto_priv.0+0xd6>
    rop->objp = objp;
 800744a:	4b51      	ldr	r3, [pc, #324]	@ (8007590 <oslib_test_005_001_execute.lto_priv.0+0x1d0>)
 800744c:	6103      	str	r3, [r0, #16]
  test_set_step(3);
 800744e:	f04f 0803 	mov.w	r8, #3
  F_UNLOCK();
 8007452:	4848      	ldr	r0, [pc, #288]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
 8007454:	f7fd ff64 	bl	8005320 <chMtxUnlock>
 8007458:	f8c7 8000 	str.w	r8, [r7]
 800745c:	f386 8811 	msr	BASEPRI, r6
 8007460:	4844      	ldr	r0, [pc, #272]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
 8007462:	f7fd febd 	bl	80051e0 <chMtxLockS>
 8007466:	f385 8811 	msr	BASEPRI, r5
  rop = (registered_object_t *)dyn_create_object_pool(name,
 800746a:	4a48      	ldr	r2, [pc, #288]	@ (800758c <oslib_test_005_001_execute.lto_priv.0+0x1cc>)
 800746c:	4842      	ldr	r0, [pc, #264]	@ (8007578 <oslib_test_005_001_execute.lto_priv.0+0x1b8>)
 800746e:	1f11      	subs	r1, r2, #4
 8007470:	f7fa fade 	bl	8001a30 <dyn_create_object_pool.lto_priv.0>
  if (rop != NULL) {
 8007474:	4603      	mov	r3, r0
 8007476:	b1d8      	cbz	r0, 80074b0 <oslib_test_005_001_execute.lto_priv.0+0xf0>
    rop->objp = objp;
 8007478:	4a46      	ldr	r2, [pc, #280]	@ (8007594 <oslib_test_005_001_execute.lto_priv.0+0x1d4>)
 800747a:	611a      	str	r2, [r3, #16]
  F_UNLOCK();
 800747c:	483d      	ldr	r0, [pc, #244]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
  test_local_fail      = true;
 800747e:	4c3f      	ldr	r4, [pc, #252]	@ (800757c <oslib_test_005_001_execute.lto_priv.0+0x1bc>)
 8007480:	f7fd ff4e 	bl	8005320 <chMtxUnlock>
  test_global_fail     = true;
 8007484:	483e      	ldr	r0, [pc, #248]	@ (8007580 <oslib_test_005_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 8007486:	4a3f      	ldr	r2, [pc, #252]	@ (8007584 <oslib_test_005_001_execute.lto_priv.0+0x1c4>)
 8007488:	4943      	ldr	r1, [pc, #268]	@ (8007598 <oslib_test_005_001_execute.lto_priv.0+0x1d8>)
 800748a:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800748c:	2301      	movs	r3, #1
 800748e:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007490:	7003      	strb	r3, [r0, #0]
}
 8007492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007496:	4837      	ldr	r0, [pc, #220]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
  test_local_fail      = true;
 8007498:	4c38      	ldr	r4, [pc, #224]	@ (800757c <oslib_test_005_001_execute.lto_priv.0+0x1bc>)
 800749a:	f7fd ff41 	bl	8005320 <chMtxUnlock>
  test_global_fail     = true;
 800749e:	4838      	ldr	r0, [pc, #224]	@ (8007580 <oslib_test_005_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 80074a0:	4a38      	ldr	r2, [pc, #224]	@ (8007584 <oslib_test_005_001_execute.lto_priv.0+0x1c4>)
 80074a2:	493e      	ldr	r1, [pc, #248]	@ (800759c <oslib_test_005_001_execute.lto_priv.0+0x1dc>)
 80074a4:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80074a6:	2301      	movs	r3, #1
 80074a8:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80074aa:	7003      	strb	r3, [r0, #0]
 80074ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b0:	4830      	ldr	r0, [pc, #192]	@ (8007574 <oslib_test_005_001_execute.lto_priv.0+0x1b4>)
 80074b2:	f7fd ff35 	bl	8005320 <chMtxUnlock>
  test_set_step(4);
 80074b6:	2304      	movs	r3, #4
 80074b8:	603b      	str	r3, [r7, #0]
    rop1 = chFactoryFindObject("myobj");
 80074ba:	f002 feb1 	bl	800a220 <chFactoryFindObject.constprop.0>
  if (!condition)
 80074be:	4605      	mov	r5, r0
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d03a      	beq.n	800753a <oslib_test_005_001_execute.lto_priv.0+0x17a>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 80074c4:	6902      	ldr	r2, [r0, #16]
 80074c6:	6813      	ldr	r3, [r2, #0]
 80074c8:	f245 51aa 	movw	r1, #21930	@ 0x55aa
 80074cc:	428b      	cmp	r3, r1
 80074ce:	d13d      	bne.n	800754c <oslib_test_005_001_execute.lto_priv.0+0x18c>
 80074d0:	42a0      	cmp	r0, r4
 80074d2:	d129      	bne.n	8007528 <oslib_test_005_001_execute.lto_priv.0+0x168>
 80074d4:	6841      	ldr	r1, [r0, #4]
 80074d6:	2902      	cmp	r1, #2
 80074d8:	d126      	bne.n	8007528 <oslib_test_005_001_execute.lto_priv.0+0x168>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 80074da:	f8c0 8004 	str.w	r8, [r0, #4]
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d133      	bne.n	800754c <oslib_test_005_001_execute.lto_priv.0+0x18c>
    chFactoryReleaseObject(rop2);
 80074e4:	f7fd ff9c 	bl	8005420 <chFactoryReleaseObject>
 80074e8:	686b      	ldr	r3, [r5, #4]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d137      	bne.n	800755e <oslib_test_005_001_execute.lto_priv.0+0x19e>
    chFactoryReleaseObject(rop1);
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7fd ff96 	bl	8005420 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 80074f4:	6868      	ldr	r0, [r5, #4]
 80074f6:	492a      	ldr	r1, [pc, #168]	@ (80075a0 <oslib_test_005_001_execute.lto_priv.0+0x1e0>)
 80074f8:	1e43      	subs	r3, r0, #1
 80074fa:	4258      	negs	r0, r3
 80074fc:	4158      	adcs	r0, r3
 80074fe:	f7fe fddf 	bl	80060c0 <_test_assert>
 8007502:	2800      	cmp	r0, #0
 8007504:	d18a      	bne.n	800741c <oslib_test_005_001_execute.lto_priv.0+0x5c>
  test_set_step(5);
 8007506:	2305      	movs	r3, #5
    chFactoryReleaseObject(rop);
 8007508:	4628      	mov	r0, r5
  test_set_step(5);
 800750a:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObject(rop);
 800750c:	f7fd ff88 	bl	8005420 <chFactoryReleaseObject>
  test_set_step(6);
 8007510:	2306      	movs	r3, #6
 8007512:	603b      	str	r3, [r7, #0]
    rop = chFactoryFindObject("myobj");
 8007514:	f002 fe84 	bl	800a220 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 8007518:	fab0 f080 	clz	r0, r0
}
 800751c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8007520:	4919      	ldr	r1, [pc, #100]	@ (8007588 <oslib_test_005_001_execute.lto_priv.0+0x1c8>)
 8007522:	0940      	lsrs	r0, r0, #5
 8007524:	f7fe bdcc 	b.w	80060c0 <_test_assert>
  test_local_fail      = true;
 8007528:	4c14      	ldr	r4, [pc, #80]	@ (800757c <oslib_test_005_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 800752a:	4815      	ldr	r0, [pc, #84]	@ (8007580 <oslib_test_005_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 800752c:	4a15      	ldr	r2, [pc, #84]	@ (8007584 <oslib_test_005_001_execute.lto_priv.0+0x1c4>)
 800752e:	491d      	ldr	r1, [pc, #116]	@ (80075a4 <oslib_test_005_001_execute.lto_priv.0+0x1e4>)
 8007530:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8007532:	2301      	movs	r3, #1
 8007534:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007536:	7003      	strb	r3, [r0, #0]
 8007538:	e770      	b.n	800741c <oslib_test_005_001_execute.lto_priv.0+0x5c>
  test_local_fail      = true;
 800753a:	4c10      	ldr	r4, [pc, #64]	@ (800757c <oslib_test_005_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 800753c:	4810      	ldr	r0, [pc, #64]	@ (8007580 <oslib_test_005_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 800753e:	4a11      	ldr	r2, [pc, #68]	@ (8007584 <oslib_test_005_001_execute.lto_priv.0+0x1c4>)
 8007540:	4919      	ldr	r1, [pc, #100]	@ (80075a8 <oslib_test_005_001_execute.lto_priv.0+0x1e8>)
 8007542:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8007544:	2301      	movs	r3, #1
 8007546:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007548:	7003      	strb	r3, [r0, #0]
 800754a:	e767      	b.n	800741c <oslib_test_005_001_execute.lto_priv.0+0x5c>
  test_local_fail      = true;
 800754c:	4c0b      	ldr	r4, [pc, #44]	@ (800757c <oslib_test_005_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 800754e:	480c      	ldr	r0, [pc, #48]	@ (8007580 <oslib_test_005_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 8007550:	4a0c      	ldr	r2, [pc, #48]	@ (8007584 <oslib_test_005_001_execute.lto_priv.0+0x1c4>)
 8007552:	4916      	ldr	r1, [pc, #88]	@ (80075ac <oslib_test_005_001_execute.lto_priv.0+0x1ec>)
 8007554:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8007556:	2301      	movs	r3, #1
 8007558:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800755a:	7003      	strb	r3, [r0, #0]
 800755c:	e75e      	b.n	800741c <oslib_test_005_001_execute.lto_priv.0+0x5c>
  test_local_fail      = true;
 800755e:	4c07      	ldr	r4, [pc, #28]	@ (800757c <oslib_test_005_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 8007560:	4807      	ldr	r0, [pc, #28]	@ (8007580 <oslib_test_005_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 8007562:	4a08      	ldr	r2, [pc, #32]	@ (8007584 <oslib_test_005_001_execute.lto_priv.0+0x1c4>)
 8007564:	490e      	ldr	r1, [pc, #56]	@ (80075a0 <oslib_test_005_001_execute.lto_priv.0+0x1e0>)
 8007566:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8007568:	2301      	movs	r3, #1
 800756a:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800756c:	7003      	strb	r3, [r0, #0]
 800756e:	e755      	b.n	800741c <oslib_test_005_001_execute.lto_priv.0+0x5c>
 8007570:	200010b4 	.word	0x200010b4
 8007574:	200010d8 	.word	0x200010d8
 8007578:	0800b4d0 	.word	0x0800b4d0
 800757c:	200010d1 	.word	0x200010d1
 8007580:	200010d0 	.word	0x200010d0
 8007584:	200010cc 	.word	0x200010cc
 8007588:	0800b688 	.word	0x0800b688
 800758c:	200010ec 	.word	0x200010ec
 8007590:	20000804 	.word	0x20000804
 8007594:	20000800 	.word	0x20000800
 8007598:	0800b674 	.word	0x0800b674
 800759c:	0800b664 	.word	0x0800b664
 80075a0:	0800b6bc 	.word	0x0800b6bc
 80075a4:	0800b6a0 	.word	0x0800b6a0
 80075a8:	0800b684 	.word	0x0800b684
 80075ac:	0800b690 	.word	0x0800b690

080075b0 <oslib_test_005_002_execute.lto_priv.0>:
static void oslib_test_005_002_execute(void) {
 80075b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80075b4:	4f60      	ldr	r7, [pc, #384]	@ (8007738 <oslib_test_005_002_execute.lto_priv.0+0x188>)
 80075b6:	2301      	movs	r3, #1
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	2320      	movs	r3, #32
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	4d5e      	ldr	r5, [pc, #376]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
 80075c2:	4628      	mov	r0, r5
 80075c4:	f7fd fe0c 	bl	80051e0 <chMtxLockS>
 80075c8:	2300      	movs	r3, #0
 80075ca:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80075ce:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 80075d2:	42ac      	cmp	r4, r5
 80075d4:	d01c      	beq.n	8007610 <oslib_test_005_002_execute.lto_priv.0+0x60>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80075d6:	4e5a      	ldr	r6, [pc, #360]	@ (8007740 <oslib_test_005_002_execute.lto_priv.0+0x190>)
 80075d8:	e002      	b.n	80075e0 <oslib_test_005_002_execute.lto_priv.0+0x30>
    p = p->next;
 80075da:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80075dc:	42ac      	cmp	r4, r5
 80075de:	d017      	beq.n	8007610 <oslib_test_005_002_execute.lto_priv.0+0x60>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80075e0:	4631      	mov	r1, r6
 80075e2:	f104 0008 	add.w	r0, r4, #8
 80075e6:	f7f8 ff0b 	bl	8000400 <strcmp>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d1f5      	bne.n	80075da <oslib_test_005_002_execute.lto_priv.0+0x2a>
  if (dep != NULL) {
 80075ee:	b17c      	cbz	r4, 8007610 <oslib_test_005_002_execute.lto_priv.0+0x60>
    dep->refs++;
 80075f0:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 80075f2:	4852      	ldr	r0, [pc, #328]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
    dep->refs++;
 80075f4:	3301      	adds	r3, #1
 80075f6:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 80075f8:	f7fd fe92 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 80075fc:	4c51      	ldr	r4, [pc, #324]	@ (8007744 <oslib_test_005_002_execute.lto_priv.0+0x194>)
  test_global_fail     = true;
 80075fe:	4852      	ldr	r0, [pc, #328]	@ (8007748 <oslib_test_005_002_execute.lto_priv.0+0x198>)
  test_failure_message = msg;
 8007600:	4a52      	ldr	r2, [pc, #328]	@ (800774c <oslib_test_005_002_execute.lto_priv.0+0x19c>)
 8007602:	4953      	ldr	r1, [pc, #332]	@ (8007750 <oslib_test_005_002_execute.lto_priv.0+0x1a0>)
 8007604:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8007606:	2301      	movs	r3, #1
 8007608:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800760a:	7003      	strb	r3, [r0, #0]
}
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	484a      	ldr	r0, [pc, #296]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
 8007612:	f7fd fe85 	bl	8005320 <chMtxUnlock>
  test_set_step(2);
 8007616:	2302      	movs	r3, #2
 8007618:	2620      	movs	r6, #32
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	f386 8811 	msr	BASEPRI, r6
 8007620:	4846      	ldr	r0, [pc, #280]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
 8007622:	f7fd fddd 	bl	80051e0 <chMtxLockS>
 8007626:	2500      	movs	r5, #0
 8007628:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800762c:	4949      	ldr	r1, [pc, #292]	@ (8007754 <oslib_test_005_002_execute.lto_priv.0+0x1a4>)
 800762e:	4844      	ldr	r0, [pc, #272]	@ (8007740 <oslib_test_005_002_execute.lto_priv.0+0x190>)
 8007630:	2280      	movs	r2, #128	@ 0x80
 8007632:	f7fe fc05 	bl	8005e40 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 8007636:	4604      	mov	r4, r0
 8007638:	b350      	cbz	r0, 8007690 <oslib_test_005_002_execute.lto_priv.0+0xe0>
    memset((void *)dbp->buffer, 0, size);
 800763a:	2280      	movs	r2, #128	@ 0x80
 800763c:	4629      	mov	r1, r5
 800763e:	3010      	adds	r0, #16
 8007640:	f7f8 fe86 	bl	8000350 <memset>
  test_set_step(3);
 8007644:	f04f 0803 	mov.w	r8, #3
  F_UNLOCK();
 8007648:	483c      	ldr	r0, [pc, #240]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
 800764a:	f7fd fe69 	bl	8005320 <chMtxUnlock>
 800764e:	f8c7 8000 	str.w	r8, [r7]
 8007652:	f386 8811 	msr	BASEPRI, r6
 8007656:	4839      	ldr	r0, [pc, #228]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
 8007658:	f7fd fdc2 	bl	80051e0 <chMtxLockS>
 800765c:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8007660:	493c      	ldr	r1, [pc, #240]	@ (8007754 <oslib_test_005_002_execute.lto_priv.0+0x1a4>)
 8007662:	4837      	ldr	r0, [pc, #220]	@ (8007740 <oslib_test_005_002_execute.lto_priv.0+0x190>)
 8007664:	2280      	movs	r2, #128	@ 0x80
 8007666:	f7fe fbeb 	bl	8005e40 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800766a:	b1f0      	cbz	r0, 80076aa <oslib_test_005_002_execute.lto_priv.0+0xfa>
    memset((void *)dbp->buffer, 0, size);
 800766c:	2280      	movs	r2, #128	@ 0x80
 800766e:	4629      	mov	r1, r5
 8007670:	3010      	adds	r0, #16
 8007672:	f7f8 fe6d 	bl	8000350 <memset>
  F_UNLOCK();
 8007676:	4831      	ldr	r0, [pc, #196]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
  test_local_fail      = true;
 8007678:	4c32      	ldr	r4, [pc, #200]	@ (8007744 <oslib_test_005_002_execute.lto_priv.0+0x194>)
 800767a:	f7fd fe51 	bl	8005320 <chMtxUnlock>
  test_global_fail     = true;
 800767e:	4832      	ldr	r0, [pc, #200]	@ (8007748 <oslib_test_005_002_execute.lto_priv.0+0x198>)
  test_failure_message = msg;
 8007680:	4a32      	ldr	r2, [pc, #200]	@ (800774c <oslib_test_005_002_execute.lto_priv.0+0x19c>)
 8007682:	4935      	ldr	r1, [pc, #212]	@ (8007758 <oslib_test_005_002_execute.lto_priv.0+0x1a8>)
 8007684:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8007686:	2301      	movs	r3, #1
 8007688:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800768a:	7003      	strb	r3, [r0, #0]
}
 800768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007690:	482a      	ldr	r0, [pc, #168]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
  test_local_fail      = true;
 8007692:	4c2c      	ldr	r4, [pc, #176]	@ (8007744 <oslib_test_005_002_execute.lto_priv.0+0x194>)
 8007694:	f7fd fe44 	bl	8005320 <chMtxUnlock>
  test_global_fail     = true;
 8007698:	482b      	ldr	r0, [pc, #172]	@ (8007748 <oslib_test_005_002_execute.lto_priv.0+0x198>)
  test_failure_message = msg;
 800769a:	4a2c      	ldr	r2, [pc, #176]	@ (800774c <oslib_test_005_002_execute.lto_priv.0+0x19c>)
 800769c:	492f      	ldr	r1, [pc, #188]	@ (800775c <oslib_test_005_002_execute.lto_priv.0+0x1ac>)
 800769e:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80076a0:	2301      	movs	r3, #1
 80076a2:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80076a4:	7003      	strb	r3, [r0, #0]
 80076a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076aa:	4824      	ldr	r0, [pc, #144]	@ (800773c <oslib_test_005_002_execute.lto_priv.0+0x18c>)
 80076ac:	f7fd fe38 	bl	8005320 <chMtxUnlock>
  test_set_step(4);
 80076b0:	2304      	movs	r3, #4
 80076b2:	603b      	str	r3, [r7, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 80076b4:	f002 fd84 	bl	800a1c0 <chFactoryFindBuffer.constprop.0>
  if (!condition)
 80076b8:	4605      	mov	r5, r0
 80076ba:	b358      	cbz	r0, 8007714 <oslib_test_005_002_execute.lto_priv.0+0x164>
 80076bc:	42a0      	cmp	r0, r4
 80076be:	d120      	bne.n	8007702 <oslib_test_005_002_execute.lto_priv.0+0x152>
 80076c0:	6843      	ldr	r3, [r0, #4]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d11d      	bne.n	8007702 <oslib_test_005_002_execute.lto_priv.0+0x152>
 80076c6:	f8c0 8004 	str.w	r8, [r0, #4]
    chFactoryReleaseBuffer(dbp2);
 80076ca:	f7fe faf1 	bl	8005cb0 <chFactoryReleaseBuffer>
 80076ce:	686b      	ldr	r3, [r5, #4]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d128      	bne.n	8007726 <oslib_test_005_002_execute.lto_priv.0+0x176>
    chFactoryReleaseBuffer(dbp1);
 80076d4:	4628      	mov	r0, r5
 80076d6:	f7fe faeb 	bl	8005cb0 <chFactoryReleaseBuffer>
 80076da:	686b      	ldr	r3, [r5, #4]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d122      	bne.n	8007726 <oslib_test_005_002_execute.lto_priv.0+0x176>
  test_set_step(5);
 80076e0:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 80076e2:	4628      	mov	r0, r5
  test_set_step(5);
 80076e4:	603b      	str	r3, [r7, #0]
    chFactoryReleaseBuffer(dbp);
 80076e6:	f7fe fae3 	bl	8005cb0 <chFactoryReleaseBuffer>
  test_set_step(6);
 80076ea:	2306      	movs	r3, #6
 80076ec:	603b      	str	r3, [r7, #0]
    dbp = chFactoryFindBuffer("mybuf");
 80076ee:	f002 fd67 	bl	800a1c0 <chFactoryFindBuffer.constprop.0>
    test_assert(dbp == NULL, "found");
 80076f2:	fab0 f080 	clz	r0, r0
}
 80076f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(dbp == NULL, "found");
 80076fa:	4915      	ldr	r1, [pc, #84]	@ (8007750 <oslib_test_005_002_execute.lto_priv.0+0x1a0>)
 80076fc:	0940      	lsrs	r0, r0, #5
 80076fe:	f7fe bcdf 	b.w	80060c0 <_test_assert>
  test_local_fail      = true;
 8007702:	4c10      	ldr	r4, [pc, #64]	@ (8007744 <oslib_test_005_002_execute.lto_priv.0+0x194>)
  test_global_fail     = true;
 8007704:	4810      	ldr	r0, [pc, #64]	@ (8007748 <oslib_test_005_002_execute.lto_priv.0+0x198>)
  test_failure_message = msg;
 8007706:	4a11      	ldr	r2, [pc, #68]	@ (800774c <oslib_test_005_002_execute.lto_priv.0+0x19c>)
 8007708:	4915      	ldr	r1, [pc, #84]	@ (8007760 <oslib_test_005_002_execute.lto_priv.0+0x1b0>)
 800770a:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800770c:	2301      	movs	r3, #1
 800770e:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007710:	7003      	strb	r3, [r0, #0]
 8007712:	e77b      	b.n	800760c <oslib_test_005_002_execute.lto_priv.0+0x5c>
  test_local_fail      = true;
 8007714:	4c0b      	ldr	r4, [pc, #44]	@ (8007744 <oslib_test_005_002_execute.lto_priv.0+0x194>)
  test_global_fail     = true;
 8007716:	480c      	ldr	r0, [pc, #48]	@ (8007748 <oslib_test_005_002_execute.lto_priv.0+0x198>)
  test_failure_message = msg;
 8007718:	4a0c      	ldr	r2, [pc, #48]	@ (800774c <oslib_test_005_002_execute.lto_priv.0+0x19c>)
 800771a:	4912      	ldr	r1, [pc, #72]	@ (8007764 <oslib_test_005_002_execute.lto_priv.0+0x1b4>)
 800771c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800771e:	2301      	movs	r3, #1
 8007720:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007722:	7003      	strb	r3, [r0, #0]
 8007724:	e772      	b.n	800760c <oslib_test_005_002_execute.lto_priv.0+0x5c>
  test_local_fail      = true;
 8007726:	4c07      	ldr	r4, [pc, #28]	@ (8007744 <oslib_test_005_002_execute.lto_priv.0+0x194>)
  test_global_fail     = true;
 8007728:	4807      	ldr	r0, [pc, #28]	@ (8007748 <oslib_test_005_002_execute.lto_priv.0+0x198>)
  test_failure_message = msg;
 800772a:	4a08      	ldr	r2, [pc, #32]	@ (800774c <oslib_test_005_002_execute.lto_priv.0+0x19c>)
 800772c:	490e      	ldr	r1, [pc, #56]	@ (8007768 <oslib_test_005_002_execute.lto_priv.0+0x1b8>)
 800772e:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8007730:	2301      	movs	r3, #1
 8007732:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8007734:	7003      	strb	r3, [r0, #0]
 8007736:	e769      	b.n	800760c <oslib_test_005_002_execute.lto_priv.0+0x5c>
 8007738:	200010b4 	.word	0x200010b4
 800773c:	200010d8 	.word	0x200010d8
 8007740:	0800b504 	.word	0x0800b504
 8007744:	200010d1 	.word	0x200010d1
 8007748:	200010d0 	.word	0x200010d0
 800774c:	200010cc 	.word	0x200010cc
 8007750:	0800b688 	.word	0x0800b688
 8007754:	200010fc 	.word	0x200010fc
 8007758:	0800b6e0 	.word	0x0800b6e0
 800775c:	0800b6d0 	.word	0x0800b6d0
 8007760:	0800b6a0 	.word	0x0800b6a0
 8007764:	0800b684 	.word	0x0800b684
 8007768:	0800b6bc 	.word	0x0800b6bc
 800776c:	00000000 	.word	0x00000000

08007770 <test_println>:
void test_println(const char *msgp) {
 8007770:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8007772:	7801      	ldrb	r1, [r0, #0]
 8007774:	b189      	cbz	r1, 800779a <test_println+0x2a>
 8007776:	4d0a      	ldr	r5, [pc, #40]	@ (80077a0 <test_println+0x30>)
 8007778:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 800777a:	6828      	ldr	r0, [r5, #0]
 800777c:	6803      	ldr	r3, [r0, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4798      	blx	r3
  while (*msgp)
 8007782:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007786:	2900      	cmp	r1, #0
 8007788:	d1f7      	bne.n	800777a <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800778a:	6828      	ldr	r0, [r5, #0]
 800778c:	4905      	ldr	r1, [pc, #20]	@ (80077a4 <test_println+0x34>)
 800778e:	6803      	ldr	r3, [r0, #0]
}
 8007790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	4718      	bx	r3
 800779a:	4d01      	ldr	r5, [pc, #4]	@ (80077a0 <test_println+0x30>)
 800779c:	e7f5      	b.n	800778a <test_println+0x1a>
 800779e:	bf00      	nop
 80077a0:	200010d4 	.word	0x200010d4
 80077a4:	0800b514 	.word	0x0800b514
	...

080077b0 <test_printn.part.0>:
    while (n)
 80077b0:	b1f8      	cbz	r0, 80077f2 <test_printn.part.0+0x42>
void test_printn(uint32_t n) {
 80077b2:	b570      	push	{r4, r5, r6, lr}
 80077b4:	b084      	sub	sp, #16
    p = buf;
 80077b6:	466d      	mov	r5, sp
      *p++ = (n % 10) + '0', n /= 10;
 80077b8:	4e0e      	ldr	r6, [pc, #56]	@ (80077f4 <test_printn.part.0+0x44>)
    p = buf;
 80077ba:	462c      	mov	r4, r5
      *p++ = (n % 10) + '0', n /= 10;
 80077bc:	fba6 2300 	umull	r2, r3, r6, r0
 80077c0:	08db      	lsrs	r3, r3, #3
 80077c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80077c6:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 80077ca:	4601      	mov	r1, r0
 80077cc:	3230      	adds	r2, #48	@ 0x30
    while (n)
 80077ce:	2909      	cmp	r1, #9
      *p++ = (n % 10) + '0', n /= 10;
 80077d0:	f804 2b01 	strb.w	r2, [r4], #1
 80077d4:	4618      	mov	r0, r3
    while (n)
 80077d6:	d8f1      	bhi.n	80077bc <test_printn.part.0+0xc>
    while (p > buf)
 80077d8:	42ac      	cmp	r4, r5
 80077da:	d908      	bls.n	80077ee <test_printn.part.0+0x3e>
 80077dc:	4e06      	ldr	r6, [pc, #24]	@ (80077f8 <test_printn.part.0+0x48>)
      streamPut(test_chp, *--p);
 80077de:	6830      	ldr	r0, [r6, #0]
 80077e0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 80077e4:	6803      	ldr	r3, [r0, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	4798      	blx	r3
    while (p > buf)
 80077ea:	42ac      	cmp	r4, r5
 80077ec:	d1f7      	bne.n	80077de <test_printn.part.0+0x2e>
}
 80077ee:	b004      	add	sp, #16
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
 80077f2:	4770      	bx	lr
 80077f4:	cccccccd 	.word	0xcccccccd
 80077f8:	200010d4 	.word	0x200010d4
 80077fc:	00000000 	.word	0x00000000

08007800 <rt_test_001_001_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.1.1] Prints the version string.
 * .
 */

static void rt_test_001_001_execute(void) {
 8007800:	b538      	push	{r3, r4, r5, lr}

  /* [1.1.1] Prints the version string.*/
  test_set_step(1);
 8007802:	4b35      	ldr	r3, [pc, #212]	@ (80078d8 <rt_test_001_001_execute.lto_priv.0+0xd8>)
 8007804:	4d35      	ldr	r5, [pc, #212]	@ (80078dc <rt_test_001_001_execute.lto_priv.0+0xdc>)
 8007806:	4c36      	ldr	r4, [pc, #216]	@ (80078e0 <rt_test_001_001_execute.lto_priv.0+0xe0>)
 8007808:	2201      	movs	r2, #1
 800780a:	601a      	str	r2, [r3, #0]
  while (*msgp)
 800780c:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	6803      	ldr	r3, [r0, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4798      	blx	r3
  while (*msgp)
 8007816:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800781a:	2900      	cmp	r1, #0
 800781c:	d1f7      	bne.n	800780e <rt_test_001_001_execute.lto_priv.0+0xe>
  {
#if defined(PORT_ARCHITECTURE_NAME)
    test_print("--- Architecture:                       ");
    test_println(PORT_ARCHITECTURE_NAME);
 800781e:	4831      	ldr	r0, [pc, #196]	@ (80078e4 <rt_test_001_001_execute.lto_priv.0+0xe4>)
 8007820:	4d31      	ldr	r5, [pc, #196]	@ (80078e8 <rt_test_001_001_execute.lto_priv.0+0xe8>)
 8007822:	f7ff ffa5 	bl	8007770 <test_println>
 8007826:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	6803      	ldr	r3, [r0, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	4798      	blx	r3
  while (*msgp)
 8007830:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007834:	2900      	cmp	r1, #0
 8007836:	d1f7      	bne.n	8007828 <rt_test_001_001_execute.lto_priv.0+0x28>
#endif
#if defined(PORT_CORE_VARIANT_NAME)
    test_print("--- Core Variant:                       ");
    test_println(PORT_CORE_VARIANT_NAME);
 8007838:	482c      	ldr	r0, [pc, #176]	@ (80078ec <rt_test_001_001_execute.lto_priv.0+0xec>)
 800783a:	4d2d      	ldr	r5, [pc, #180]	@ (80078f0 <rt_test_001_001_execute.lto_priv.0+0xf0>)
 800783c:	f7ff ff98 	bl	8007770 <test_println>
 8007840:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007842:	6820      	ldr	r0, [r4, #0]
 8007844:	6803      	ldr	r3, [r0, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	4798      	blx	r3
  while (*msgp)
 800784a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800784e:	2900      	cmp	r1, #0
 8007850:	d1f7      	bne.n	8007842 <rt_test_001_001_execute.lto_priv.0+0x42>
#endif
#if defined(PORT_COMPILER_NAME)
    test_print("--- Compiler:                           ");
    test_println(PORT_COMPILER_NAME);
 8007852:	4828      	ldr	r0, [pc, #160]	@ (80078f4 <rt_test_001_001_execute.lto_priv.0+0xf4>)
 8007854:	4d28      	ldr	r5, [pc, #160]	@ (80078f8 <rt_test_001_001_execute.lto_priv.0+0xf8>)
 8007856:	f7ff ff8b 	bl	8007770 <test_println>
 800785a:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	6803      	ldr	r3, [r0, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	4798      	blx	r3
  while (*msgp)
 8007864:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007868:	2900      	cmp	r1, #0
 800786a:	d1f7      	bne.n	800785c <rt_test_001_001_execute.lto_priv.0+0x5c>
#endif
#if defined(PORT_INFO)
    test_print("--- Port Info:                          ");
    test_println(PORT_INFO);
 800786c:	4823      	ldr	r0, [pc, #140]	@ (80078fc <rt_test_001_001_execute.lto_priv.0+0xfc>)
 800786e:	4d24      	ldr	r5, [pc, #144]	@ (8007900 <rt_test_001_001_execute.lto_priv.0+0x100>)
 8007870:	f7ff ff7e 	bl	8007770 <test_println>
 8007874:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007876:	6820      	ldr	r0, [r4, #0]
 8007878:	6803      	ldr	r3, [r0, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	4798      	blx	r3
  while (*msgp)
 800787e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007882:	2900      	cmp	r1, #0
 8007884:	d1f7      	bne.n	8007876 <rt_test_001_001_execute.lto_priv.0+0x76>
  if (!n)
 8007886:	2004      	movs	r0, #4
 8007888:	f7ff ff92 	bl	80077b0 <test_printn.part.0>
#endif
#if defined(PORT_NATURAL_ALIGN)
    test_print("--- Natural alignment:                  ");
    test_printn(PORT_NATURAL_ALIGN);
    test_println("");
 800788c:	4d1d      	ldr	r5, [pc, #116]	@ (8007904 <rt_test_001_001_execute.lto_priv.0+0x104>)
 800788e:	481e      	ldr	r0, [pc, #120]	@ (8007908 <rt_test_001_001_execute.lto_priv.0+0x108>)
 8007890:	f7ff ff6e 	bl	8007770 <test_println>
  while (*msgp)
 8007894:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007896:	6820      	ldr	r0, [r4, #0]
 8007898:	6803      	ldr	r3, [r0, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	4798      	blx	r3
  while (*msgp)
 800789e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80078a2:	2900      	cmp	r1, #0
 80078a4:	d1f7      	bne.n	8007896 <rt_test_001_001_execute.lto_priv.0+0x96>
  if (!n)
 80078a6:	2008      	movs	r0, #8
 80078a8:	f7ff ff82 	bl	80077b0 <test_printn.part.0>
#endif
#if defined(PORT_STACK_ALIGN)
    test_print("--- Stack alignment:                    ");
    test_printn(PORT_STACK_ALIGN);
    test_println("");
 80078ac:	4d17      	ldr	r5, [pc, #92]	@ (800790c <rt_test_001_001_execute.lto_priv.0+0x10c>)
 80078ae:	4816      	ldr	r0, [pc, #88]	@ (8007908 <rt_test_001_001_execute.lto_priv.0+0x108>)
 80078b0:	f7ff ff5e 	bl	8007770 <test_println>
  while (*msgp)
 80078b4:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 80078b6:	6820      	ldr	r0, [r4, #0]
 80078b8:	6803      	ldr	r3, [r0, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	4798      	blx	r3
  while (*msgp)
 80078be:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80078c2:	2900      	cmp	r1, #0
 80078c4:	d1f7      	bne.n	80078b6 <rt_test_001_001_execute.lto_priv.0+0xb6>
  if (!n)
 80078c6:	2008      	movs	r0, #8
 80078c8:	f7ff ff72 	bl	80077b0 <test_printn.part.0>
    test_print("--- Working area alignment:             ");
    test_printn(PORT_WORKING_AREA_ALIGN);
    test_println("");
#endif
  }
}
 80078cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 80078d0:	480d      	ldr	r0, [pc, #52]	@ (8007908 <rt_test_001_001_execute.lto_priv.0+0x108>)
 80078d2:	f7ff bf4d 	b.w	8007770 <test_println>
 80078d6:	bf00      	nop
 80078d8:	200010b4 	.word	0x200010b4
 80078dc:	0800b6ec 	.word	0x0800b6ec
 80078e0:	200010d4 	.word	0x200010d4
 80078e4:	0800b820 	.word	0x0800b820
 80078e8:	0800b718 	.word	0x0800b718
 80078ec:	0800b82c 	.word	0x0800b82c
 80078f0:	0800b744 	.word	0x0800b744
 80078f4:	0800b838 	.word	0x0800b838
 80078f8:	0800b770 	.word	0x0800b770
 80078fc:	0800b84c 	.word	0x0800b84c
 8007900:	0800b79c 	.word	0x0800b79c
 8007904:	0800b7c8 	.word	0x0800b7c8
 8007908:	0800b76c 	.word	0x0800b76c
 800790c:	0800b7f4 	.word	0x0800b7f4

08007910 <rt_test_001_002_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void rt_test_001_002_execute(void) {
 8007910:	b538      	push	{r3, r4, r5, lr}

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8007912:	4b2c      	ldr	r3, [pc, #176]	@ (80079c4 <rt_test_001_002_execute.lto_priv.0+0xb4>)
  {
    test_println("--- Product:                            ChibiOS/RT");
 8007914:	482c      	ldr	r0, [pc, #176]	@ (80079c8 <rt_test_001_002_execute.lto_priv.0+0xb8>)
 8007916:	4d2d      	ldr	r5, [pc, #180]	@ (80079cc <rt_test_001_002_execute.lto_priv.0+0xbc>)
 8007918:	4c2d      	ldr	r4, [pc, #180]	@ (80079d0 <rt_test_001_002_execute.lto_priv.0+0xc0>)
  test_set_step(1);
 800791a:	2201      	movs	r2, #1
 800791c:	601a      	str	r2, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 800791e:	f7ff ff27 	bl	8007770 <test_println>
  while (*msgp)
 8007922:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	6803      	ldr	r3, [r0, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	4798      	blx	r3
  while (*msgp)
 800792c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007930:	2900      	cmp	r1, #0
 8007932:	d1f7      	bne.n	8007924 <rt_test_001_002_execute.lto_priv.0+0x14>
  if (!n)
 8007934:	2001      	movs	r0, #1
 8007936:	f7ff ff3b 	bl	80077b0 <test_printn.part.0>
    test_print("--- Stable Flag:                        ");
    test_printn(CH_KERNEL_STABLE);
    test_println("");
 800793a:	4d26      	ldr	r5, [pc, #152]	@ (80079d4 <rt_test_001_002_execute.lto_priv.0+0xc4>)
 800793c:	4826      	ldr	r0, [pc, #152]	@ (80079d8 <rt_test_001_002_execute.lto_priv.0+0xc8>)
 800793e:	f7ff ff17 	bl	8007770 <test_println>
  while (*msgp)
 8007942:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	6803      	ldr	r3, [r0, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	4798      	blx	r3
  while (*msgp)
 800794c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007950:	2900      	cmp	r1, #0
 8007952:	d1f7      	bne.n	8007944 <rt_test_001_002_execute.lto_priv.0+0x34>
    test_print("--- Version String:                     ");
    test_println(CH_KERNEL_VERSION);
 8007954:	4821      	ldr	r0, [pc, #132]	@ (80079dc <rt_test_001_002_execute.lto_priv.0+0xcc>)
 8007956:	4d22      	ldr	r5, [pc, #136]	@ (80079e0 <rt_test_001_002_execute.lto_priv.0+0xd0>)
 8007958:	f7ff ff0a 	bl	8007770 <test_println>
 800795c:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800795e:	6820      	ldr	r0, [r4, #0]
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	4798      	blx	r3
  while (*msgp)
 8007966:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800796a:	2900      	cmp	r1, #0
 800796c:	d1f7      	bne.n	800795e <rt_test_001_002_execute.lto_priv.0+0x4e>
  if (!n)
 800796e:	2006      	movs	r0, #6
 8007970:	f7ff ff1e 	bl	80077b0 <test_printn.part.0>
    test_print("--- Major Number:                       ");
    test_printn(CH_KERNEL_MAJOR);
    test_println("");
 8007974:	4d1b      	ldr	r5, [pc, #108]	@ (80079e4 <rt_test_001_002_execute.lto_priv.0+0xd4>)
 8007976:	4818      	ldr	r0, [pc, #96]	@ (80079d8 <rt_test_001_002_execute.lto_priv.0+0xc8>)
 8007978:	f7ff fefa 	bl	8007770 <test_println>
  while (*msgp)
 800797c:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800797e:	6820      	ldr	r0, [r4, #0]
 8007980:	6803      	ldr	r3, [r0, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	4798      	blx	r3
  while (*msgp)
 8007986:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800798a:	2900      	cmp	r1, #0
 800798c:	d1f7      	bne.n	800797e <rt_test_001_002_execute.lto_priv.0+0x6e>
    streamPut(test_chp, '0');
 800798e:	6820      	ldr	r0, [r4, #0]
    test_print("--- Minor Number:                       ");
    test_printn(CH_KERNEL_MINOR);
    test_println("");
 8007990:	4d15      	ldr	r5, [pc, #84]	@ (80079e8 <rt_test_001_002_execute.lto_priv.0+0xd8>)
 8007992:	6803      	ldr	r3, [r0, #0]
 8007994:	2130      	movs	r1, #48	@ 0x30
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	4798      	blx	r3
 800799a:	480f      	ldr	r0, [pc, #60]	@ (80079d8 <rt_test_001_002_execute.lto_priv.0+0xc8>)
 800799c:	f7ff fee8 	bl	8007770 <test_println>
  while (*msgp)
 80079a0:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 80079a2:	6820      	ldr	r0, [r4, #0]
 80079a4:	6803      	ldr	r3, [r0, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4798      	blx	r3
  while (*msgp)
 80079aa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80079ae:	2900      	cmp	r1, #0
 80079b0:	d1f7      	bne.n	80079a2 <rt_test_001_002_execute.lto_priv.0+0x92>
  if (!n)
 80079b2:	2004      	movs	r0, #4
 80079b4:	f7ff fefc 	bl	80077b0 <test_printn.part.0>
    test_print("--- Patch Number:                       ");
    test_printn(CH_KERNEL_PATCH);
    test_println("");
  }
}
 80079b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 80079bc:	4806      	ldr	r0, [pc, #24]	@ (80079d8 <rt_test_001_002_execute.lto_priv.0+0xc8>)
 80079be:	f7ff bed7 	b.w	8007770 <test_println>
 80079c2:	bf00      	nop
 80079c4:	200010b4 	.word	0x200010b4
 80079c8:	0800b940 	.word	0x0800b940
 80079cc:	0800b864 	.word	0x0800b864
 80079d0:	200010d4 	.word	0x200010d4
 80079d4:	0800b890 	.word	0x0800b890
 80079d8:	0800b76c 	.word	0x0800b76c
 80079dc:	0800b974 	.word	0x0800b974
 80079e0:	0800b8bc 	.word	0x0800b8bc
 80079e4:	0800b8e8 	.word	0x0800b8e8
 80079e8:	0800b914 	.word	0x0800b914
 80079ec:	00000000 	.word	0x00000000

080079f0 <rt_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 80079f0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80079f2:	4ba1      	ldr	r3, [pc, #644]	@ (8007c78 <rt_test_001_003_execute.lto_priv.0+0x288>)
 80079f4:	4da1      	ldr	r5, [pc, #644]	@ (8007c7c <rt_test_001_003_execute.lto_priv.0+0x28c>)
 80079f6:	4ca2      	ldr	r4, [pc, #648]	@ (8007c80 <rt_test_001_003_execute.lto_priv.0+0x290>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	601a      	str	r2, [r3, #0]
  while (*msgp)
 80079fc:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 80079fe:	6820      	ldr	r0, [r4, #0]
 8007a00:	6803      	ldr	r3, [r0, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	4798      	blx	r3
  while (*msgp)
 8007a06:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d1f7      	bne.n	80079fe <rt_test_001_003_execute.lto_priv.0+0xe>
  if (!n)
 8007a0e:	2020      	movs	r0, #32
 8007a10:	f7ff fece 	bl	80077b0 <test_printn.part.0>
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8007a14:	4d9b      	ldr	r5, [pc, #620]	@ (8007c84 <rt_test_001_003_execute.lto_priv.0+0x294>)
 8007a16:	489c      	ldr	r0, [pc, #624]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007a18:	f7ff feaa 	bl	8007770 <test_println>
  while (*msgp)
 8007a1c:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	6803      	ldr	r3, [r0, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	4798      	blx	r3
  while (*msgp)
 8007a26:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007a2a:	2900      	cmp	r1, #0
 8007a2c:	d1f7      	bne.n	8007a1e <rt_test_001_003_execute.lto_priv.0+0x2e>
  if (!n)
 8007a2e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8007a32:	f7ff febd 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 8007a36:	4d95      	ldr	r5, [pc, #596]	@ (8007c8c <rt_test_001_003_execute.lto_priv.0+0x29c>)
 8007a38:	4893      	ldr	r0, [pc, #588]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007a3a:	f7ff fe99 	bl	8007770 <test_println>
  while (*msgp)
 8007a3e:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	6803      	ldr	r3, [r0, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	4798      	blx	r3
  while (*msgp)
 8007a48:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	d1f7      	bne.n	8007a40 <rt_test_001_003_execute.lto_priv.0+0x50>
  if (!n)
 8007a50:	2020      	movs	r0, #32
 8007a52:	f7ff fead 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 8007a56:	4d8e      	ldr	r5, [pc, #568]	@ (8007c90 <rt_test_001_003_execute.lto_priv.0+0x2a0>)
 8007a58:	488b      	ldr	r0, [pc, #556]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007a5a:	f7ff fe89 	bl	8007770 <test_println>
  while (*msgp)
 8007a5e:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007a60:	6820      	ldr	r0, [r4, #0]
 8007a62:	6803      	ldr	r3, [r0, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	4798      	blx	r3
  while (*msgp)
 8007a68:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	d1f7      	bne.n	8007a60 <rt_test_001_003_execute.lto_priv.0+0x70>
  if (!n)
 8007a70:	2020      	movs	r0, #32
 8007a72:	f7ff fe9d 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 8007a76:	4d87      	ldr	r5, [pc, #540]	@ (8007c94 <rt_test_001_003_execute.lto_priv.0+0x2a4>)
 8007a78:	4883      	ldr	r0, [pc, #524]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007a7a:	f7ff fe79 	bl	8007770 <test_println>
  while (*msgp)
 8007a7e:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007a80:	6820      	ldr	r0, [r4, #0]
 8007a82:	6803      	ldr	r3, [r0, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	4798      	blx	r3
  while (*msgp)
 8007a88:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	d1f7      	bne.n	8007a80 <rt_test_001_003_execute.lto_priv.0+0x90>
  if (!n)
 8007a90:	2002      	movs	r0, #2
 8007a92:	f7ff fe8d 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8007a96:	4d80      	ldr	r5, [pc, #512]	@ (8007c98 <rt_test_001_003_execute.lto_priv.0+0x2a8>)
 8007a98:	487b      	ldr	r0, [pc, #492]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007a9a:	f7ff fe69 	bl	8007770 <test_println>
  while (*msgp)
 8007a9e:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007aa0:	6820      	ldr	r0, [r4, #0]
 8007aa2:	6803      	ldr	r3, [r0, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	4798      	blx	r3
  while (*msgp)
 8007aa8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007aac:	2900      	cmp	r1, #0
 8007aae:	d1f7      	bne.n	8007aa0 <rt_test_001_003_execute.lto_priv.0+0xb0>
    streamPut(test_chp, '0');
 8007ab0:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
    test_printn(CH_CFG_TIME_QUANTUM);
    test_println("");
 8007ab2:	4d7a      	ldr	r5, [pc, #488]	@ (8007c9c <rt_test_001_003_execute.lto_priv.0+0x2ac>)
 8007ab4:	6803      	ldr	r3, [r0, #0]
 8007ab6:	2130      	movs	r1, #48	@ 0x30
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	4798      	blx	r3
 8007abc:	4872      	ldr	r0, [pc, #456]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007abe:	f7ff fe57 	bl	8007770 <test_println>
  while (*msgp)
 8007ac2:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007ac4:	6820      	ldr	r0, [r4, #0]
 8007ac6:	6803      	ldr	r3, [r0, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	4798      	blx	r3
  while (*msgp)
 8007acc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	d1f7      	bne.n	8007ac4 <rt_test_001_003_execute.lto_priv.0+0xd4>
    streamPut(test_chp, '0');
 8007ad4:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
    test_printn(CH_CFG_MEMCORE_SIZE);
    test_println("");
 8007ad6:	4d72      	ldr	r5, [pc, #456]	@ (8007ca0 <rt_test_001_003_execute.lto_priv.0+0x2b0>)
 8007ad8:	6803      	ldr	r3, [r0, #0]
 8007ada:	2130      	movs	r1, #48	@ 0x30
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	4798      	blx	r3
 8007ae0:	4869      	ldr	r0, [pc, #420]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007ae2:	f7ff fe45 	bl	8007770 <test_println>
  while (*msgp)
 8007ae6:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	6803      	ldr	r3, [r0, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	4798      	blx	r3
  while (*msgp)
 8007af0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007af4:	2900      	cmp	r1, #0
 8007af6:	d1f7      	bne.n	8007ae8 <rt_test_001_003_execute.lto_priv.0+0xf8>
    streamPut(test_chp, '0');
 8007af8:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
    test_printn(CH_CFG_NO_IDLE_THREAD);
    test_println("");
 8007afa:	4d6a      	ldr	r5, [pc, #424]	@ (8007ca4 <rt_test_001_003_execute.lto_priv.0+0x2b4>)
 8007afc:	6803      	ldr	r3, [r0, #0]
 8007afe:	2130      	movs	r1, #48	@ 0x30
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	4798      	blx	r3
 8007b04:	4860      	ldr	r0, [pc, #384]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007b06:	f7ff fe33 	bl	8007770 <test_println>
  while (*msgp)
 8007b0a:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	6803      	ldr	r3, [r0, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	4798      	blx	r3
  while (*msgp)
 8007b14:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b18:	2900      	cmp	r1, #0
 8007b1a:	d1f7      	bne.n	8007b0c <rt_test_001_003_execute.lto_priv.0+0x11c>
  if (!n)
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	f7ff fe47 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8007b22:	4d61      	ldr	r5, [pc, #388]	@ (8007ca8 <rt_test_001_003_execute.lto_priv.0+0x2b8>)
 8007b24:	4858      	ldr	r0, [pc, #352]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007b26:	f7ff fe23 	bl	8007770 <test_println>
  while (*msgp)
 8007b2a:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	6803      	ldr	r3, [r0, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	4798      	blx	r3
  while (*msgp)
 8007b34:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b38:	2900      	cmp	r1, #0
 8007b3a:	d1f7      	bne.n	8007b2c <rt_test_001_003_execute.lto_priv.0+0x13c>
  if (!n)
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	f7ff fe37 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_TM:                      ");
    test_printn(CH_CFG_USE_TM);
    test_println("");
 8007b42:	4d5a      	ldr	r5, [pc, #360]	@ (8007cac <rt_test_001_003_execute.lto_priv.0+0x2bc>)
 8007b44:	4850      	ldr	r0, [pc, #320]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007b46:	f7ff fe13 	bl	8007770 <test_println>
  while (*msgp)
 8007b4a:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	6803      	ldr	r3, [r0, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	4798      	blx	r3
  while (*msgp)
 8007b54:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	d1f7      	bne.n	8007b4c <rt_test_001_003_execute.lto_priv.0+0x15c>
  if (!n)
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	f7ff fe27 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 8007b62:	4d53      	ldr	r5, [pc, #332]	@ (8007cb0 <rt_test_001_003_execute.lto_priv.0+0x2c0>)
 8007b64:	4848      	ldr	r0, [pc, #288]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007b66:	f7ff fe03 	bl	8007770 <test_println>
  while (*msgp)
 8007b6a:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	6803      	ldr	r3, [r0, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	4798      	blx	r3
  while (*msgp)
 8007b74:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b78:	2900      	cmp	r1, #0
 8007b7a:	d1f7      	bne.n	8007b6c <rt_test_001_003_execute.lto_priv.0+0x17c>
  if (!n)
 8007b7c:	2001      	movs	r0, #1
 8007b7e:	f7ff fe17 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 8007b82:	4d4c      	ldr	r5, [pc, #304]	@ (8007cb4 <rt_test_001_003_execute.lto_priv.0+0x2c4>)
 8007b84:	4840      	ldr	r0, [pc, #256]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007b86:	f7ff fdf3 	bl	8007770 <test_println>
  while (*msgp)
 8007b8a:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	6803      	ldr	r3, [r0, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	4798      	blx	r3
  while (*msgp)
 8007b94:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	d1f7      	bne.n	8007b8c <rt_test_001_003_execute.lto_priv.0+0x19c>
  if (!n)
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	f7ff fe07 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8007ba2:	4d45      	ldr	r5, [pc, #276]	@ (8007cb8 <rt_test_001_003_execute.lto_priv.0+0x2c8>)
 8007ba4:	4838      	ldr	r0, [pc, #224]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007ba6:	f7ff fde3 	bl	8007770 <test_println>
  while (*msgp)
 8007baa:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	6803      	ldr	r3, [r0, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	4798      	blx	r3
  while (*msgp)
 8007bb4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007bb8:	2900      	cmp	r1, #0
 8007bba:	d1f7      	bne.n	8007bac <rt_test_001_003_execute.lto_priv.0+0x1bc>
    streamPut(test_chp, '0');
 8007bbc:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
    test_println("");
 8007bbe:	4d3f      	ldr	r5, [pc, #252]	@ (8007cbc <rt_test_001_003_execute.lto_priv.0+0x2cc>)
 8007bc0:	6803      	ldr	r3, [r0, #0]
 8007bc2:	2130      	movs	r1, #48	@ 0x30
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	4798      	blx	r3
 8007bc8:	482f      	ldr	r0, [pc, #188]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007bca:	f7ff fdd1 	bl	8007770 <test_println>
  while (*msgp)
 8007bce:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	6803      	ldr	r3, [r0, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	4798      	blx	r3
  while (*msgp)
 8007bd8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	d1f7      	bne.n	8007bd0 <rt_test_001_003_execute.lto_priv.0+0x1e0>
  if (!n)
 8007be0:	2001      	movs	r0, #1
 8007be2:	f7ff fde5 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8007be6:	4d36      	ldr	r5, [pc, #216]	@ (8007cc0 <rt_test_001_003_execute.lto_priv.0+0x2d0>)
 8007be8:	4827      	ldr	r0, [pc, #156]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007bea:	f7ff fdc1 	bl	8007770 <test_println>
  while (*msgp)
 8007bee:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007bf0:	6820      	ldr	r0, [r4, #0]
 8007bf2:	6803      	ldr	r3, [r0, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	4798      	blx	r3
  while (*msgp)
 8007bf8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007bfc:	2900      	cmp	r1, #0
 8007bfe:	d1f7      	bne.n	8007bf0 <rt_test_001_003_execute.lto_priv.0+0x200>
    streamPut(test_chp, '0');
 8007c00:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
    test_println("");   
 8007c02:	4d30      	ldr	r5, [pc, #192]	@ (8007cc4 <rt_test_001_003_execute.lto_priv.0+0x2d4>)
 8007c04:	6803      	ldr	r3, [r0, #0]
 8007c06:	2130      	movs	r1, #48	@ 0x30
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4798      	blx	r3
 8007c0c:	481e      	ldr	r0, [pc, #120]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007c0e:	f7ff fdaf 	bl	8007770 <test_println>
  while (*msgp)
 8007c12:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	6803      	ldr	r3, [r0, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	4798      	blx	r3
  while (*msgp)
 8007c1c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d1f7      	bne.n	8007c14 <rt_test_001_003_execute.lto_priv.0+0x224>
  if (!n)
 8007c24:	2001      	movs	r0, #1
 8007c26:	f7ff fdc3 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8007c2a:	4d27      	ldr	r5, [pc, #156]	@ (8007cc8 <rt_test_001_003_execute.lto_priv.0+0x2d8>)
 8007c2c:	4816      	ldr	r0, [pc, #88]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007c2e:	f7ff fd9f 	bl	8007770 <test_println>
  while (*msgp)
 8007c32:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	6803      	ldr	r3, [r0, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	4798      	blx	r3
  while (*msgp)
 8007c3c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007c40:	2900      	cmp	r1, #0
 8007c42:	d1f7      	bne.n	8007c34 <rt_test_001_003_execute.lto_priv.0+0x244>
  if (!n)
 8007c44:	2001      	movs	r0, #1
 8007c46:	f7ff fdb3 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8007c4a:	4d20      	ldr	r5, [pc, #128]	@ (8007ccc <rt_test_001_003_execute.lto_priv.0+0x2dc>)
 8007c4c:	480e      	ldr	r0, [pc, #56]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007c4e:	f7ff fd8f 	bl	8007770 <test_println>
  while (*msgp)
 8007c52:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	6803      	ldr	r3, [r0, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	4798      	blx	r3
  while (*msgp)
 8007c5c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007c60:	2900      	cmp	r1, #0
 8007c62:	d1f7      	bne.n	8007c54 <rt_test_001_003_execute.lto_priv.0+0x264>
  if (!n)
 8007c64:	2001      	movs	r0, #1
 8007c66:	f7ff fda3 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8007c6a:	4d19      	ldr	r5, [pc, #100]	@ (8007cd0 <rt_test_001_003_execute.lto_priv.0+0x2e0>)
 8007c6c:	4806      	ldr	r0, [pc, #24]	@ (8007c88 <rt_test_001_003_execute.lto_priv.0+0x298>)
 8007c6e:	f7ff fd7f 	bl	8007770 <test_println>
  while (*msgp)
 8007c72:	212d      	movs	r1, #45	@ 0x2d
 8007c74:	e02e      	b.n	8007cd4 <rt_test_001_003_execute.lto_priv.0+0x2e4>
 8007c76:	bf00      	nop
 8007c78:	200010b4 	.word	0x200010b4
 8007c7c:	0800b97c 	.word	0x0800b97c
 8007c80:	200010d4 	.word	0x200010d4
 8007c84:	0800b9a8 	.word	0x0800b9a8
 8007c88:	0800b76c 	.word	0x0800b76c
 8007c8c:	0800b9d4 	.word	0x0800b9d4
 8007c90:	0800ba00 	.word	0x0800ba00
 8007c94:	0800ba2c 	.word	0x0800ba2c
 8007c98:	0800ba58 	.word	0x0800ba58
 8007c9c:	0800ba84 	.word	0x0800ba84
 8007ca0:	0800bab0 	.word	0x0800bab0
 8007ca4:	0800badc 	.word	0x0800badc
 8007ca8:	0800bb08 	.word	0x0800bb08
 8007cac:	0800bb34 	.word	0x0800bb34
 8007cb0:	0800bb60 	.word	0x0800bb60
 8007cb4:	0800bb8c 	.word	0x0800bb8c
 8007cb8:	0800bbb8 	.word	0x0800bbb8
 8007cbc:	0800bbe4 	.word	0x0800bbe4
 8007cc0:	0800bc10 	.word	0x0800bc10
 8007cc4:	0800bc3c 	.word	0x0800bc3c
 8007cc8:	0800bc68 	.word	0x0800bc68
 8007ccc:	0800bc94 	.word	0x0800bc94
 8007cd0:	0800bcc0 	.word	0x0800bcc0
    streamPut(test_chp, *msgp++);
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	6803      	ldr	r3, [r0, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	4798      	blx	r3
  while (*msgp)
 8007cdc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007ce0:	2900      	cmp	r1, #0
 8007ce2:	d1f7      	bne.n	8007cd4 <rt_test_001_003_execute.lto_priv.0+0x2e4>
  if (!n)
 8007ce4:	2001      	movs	r0, #1
 8007ce6:	f7ff fd63 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8007cea:	4da0      	ldr	r5, [pc, #640]	@ (8007f6c <rt_test_001_003_execute.lto_priv.0+0x57c>)
 8007cec:	48a0      	ldr	r0, [pc, #640]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007cee:	f7ff fd3f 	bl	8007770 <test_println>
  while (*msgp)
 8007cf2:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007cf4:	6820      	ldr	r0, [r4, #0]
 8007cf6:	6803      	ldr	r3, [r0, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	4798      	blx	r3
  while (*msgp)
 8007cfc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007d00:	2900      	cmp	r1, #0
 8007d02:	d1f7      	bne.n	8007cf4 <rt_test_001_003_execute.lto_priv.0+0x304>
  if (!n)
 8007d04:	2001      	movs	r0, #1
 8007d06:	f7ff fd53 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8007d0a:	4d9a      	ldr	r5, [pc, #616]	@ (8007f74 <rt_test_001_003_execute.lto_priv.0+0x584>)
 8007d0c:	4898      	ldr	r0, [pc, #608]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007d0e:	f7ff fd2f 	bl	8007770 <test_println>
  while (*msgp)
 8007d12:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	6803      	ldr	r3, [r0, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	4798      	blx	r3
  while (*msgp)
 8007d1c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007d20:	2900      	cmp	r1, #0
 8007d22:	d1f7      	bne.n	8007d14 <rt_test_001_003_execute.lto_priv.0+0x324>
    streamPut(test_chp, '0');
 8007d24:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
    test_println("");
 8007d26:	4d94      	ldr	r5, [pc, #592]	@ (8007f78 <rt_test_001_003_execute.lto_priv.0+0x588>)
 8007d28:	6803      	ldr	r3, [r0, #0]
 8007d2a:	2130      	movs	r1, #48	@ 0x30
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	4798      	blx	r3
 8007d30:	488f      	ldr	r0, [pc, #572]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007d32:	f7ff fd1d 	bl	8007770 <test_println>
  while (*msgp)
 8007d36:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007d38:	6820      	ldr	r0, [r4, #0]
 8007d3a:	6803      	ldr	r3, [r0, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	4798      	blx	r3
  while (*msgp)
 8007d40:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d1f7      	bne.n	8007d38 <rt_test_001_003_execute.lto_priv.0+0x348>
  if (!n)
 8007d48:	2001      	movs	r0, #1
 8007d4a:	f7ff fd31 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 8007d4e:	4d8b      	ldr	r5, [pc, #556]	@ (8007f7c <rt_test_001_003_execute.lto_priv.0+0x58c>)
 8007d50:	4887      	ldr	r0, [pc, #540]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007d52:	f7ff fd0d 	bl	8007770 <test_println>
  while (*msgp)
 8007d56:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	6803      	ldr	r3, [r0, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	4798      	blx	r3
  while (*msgp)
 8007d60:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007d64:	2900      	cmp	r1, #0
 8007d66:	d1f7      	bne.n	8007d58 <rt_test_001_003_execute.lto_priv.0+0x368>
  if (!n)
 8007d68:	2001      	movs	r0, #1
 8007d6a:	f7ff fd21 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 8007d6e:	4d84      	ldr	r5, [pc, #528]	@ (8007f80 <rt_test_001_003_execute.lto_priv.0+0x590>)
 8007d70:	487f      	ldr	r0, [pc, #508]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007d72:	f7ff fcfd 	bl	8007770 <test_println>
  while (*msgp)
 8007d76:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007d78:	6820      	ldr	r0, [r4, #0]
 8007d7a:	6803      	ldr	r3, [r0, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	4798      	blx	r3
  while (*msgp)
 8007d80:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d1f7      	bne.n	8007d78 <rt_test_001_003_execute.lto_priv.0+0x388>
  if (!n)
 8007d88:	2001      	movs	r0, #1
 8007d8a:	f7ff fd11 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_HEAP:                    ");
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 8007d8e:	4d7d      	ldr	r5, [pc, #500]	@ (8007f84 <rt_test_001_003_execute.lto_priv.0+0x594>)
 8007d90:	4877      	ldr	r0, [pc, #476]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007d92:	f7ff fced 	bl	8007770 <test_println>
  while (*msgp)
 8007d96:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	6803      	ldr	r3, [r0, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	4798      	blx	r3
  while (*msgp)
 8007da0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d1f7      	bne.n	8007d98 <rt_test_001_003_execute.lto_priv.0+0x3a8>
  if (!n)
 8007da8:	2001      	movs	r0, #1
 8007daa:	f7ff fd01 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 8007dae:	4d76      	ldr	r5, [pc, #472]	@ (8007f88 <rt_test_001_003_execute.lto_priv.0+0x598>)
 8007db0:	486f      	ldr	r0, [pc, #444]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007db2:	f7ff fcdd 	bl	8007770 <test_println>
  while (*msgp)
 8007db6:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007db8:	6820      	ldr	r0, [r4, #0]
 8007dba:	6803      	ldr	r3, [r0, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	4798      	blx	r3
  while (*msgp)
 8007dc0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	d1f7      	bne.n	8007db8 <rt_test_001_003_execute.lto_priv.0+0x3c8>
  if (!n)
 8007dc8:	2001      	movs	r0, #1
 8007dca:	f7ff fcf1 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 8007dce:	4d6f      	ldr	r5, [pc, #444]	@ (8007f8c <rt_test_001_003_execute.lto_priv.0+0x59c>)
 8007dd0:	4867      	ldr	r0, [pc, #412]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007dd2:	f7ff fccd 	bl	8007770 <test_println>
  while (*msgp)
 8007dd6:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	6803      	ldr	r3, [r0, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	4798      	blx	r3
  while (*msgp)
 8007de0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d1f7      	bne.n	8007dd8 <rt_test_001_003_execute.lto_priv.0+0x3e8>
  if (!n)
 8007de8:	2001      	movs	r0, #1
 8007dea:	f7ff fce1 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8007dee:	4d68      	ldr	r5, [pc, #416]	@ (8007f90 <rt_test_001_003_execute.lto_priv.0+0x5a0>)
 8007df0:	485f      	ldr	r0, [pc, #380]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007df2:	f7ff fcbd 	bl	8007770 <test_println>
  while (*msgp)
 8007df6:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	6803      	ldr	r3, [r0, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	4798      	blx	r3
  while (*msgp)
 8007e00:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007e04:	2900      	cmp	r1, #0
 8007e06:	d1f7      	bne.n	8007df8 <rt_test_001_003_execute.lto_priv.0+0x408>
  if (!n)
 8007e08:	2001      	movs	r0, #1
 8007e0a:	f7ff fcd1 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8007e0e:	4d61      	ldr	r5, [pc, #388]	@ (8007f94 <rt_test_001_003_execute.lto_priv.0+0x5a4>)
 8007e10:	4857      	ldr	r0, [pc, #348]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007e12:	f7ff fcad 	bl	8007770 <test_println>
  while (*msgp)
 8007e16:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007e18:	6820      	ldr	r0, [r4, #0]
 8007e1a:	6803      	ldr	r3, [r0, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	4798      	blx	r3
  while (*msgp)
 8007e20:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007e24:	2900      	cmp	r1, #0
 8007e26:	d1f7      	bne.n	8007e18 <rt_test_001_003_execute.lto_priv.0+0x428>
  if (!n)
 8007e28:	2008      	movs	r0, #8
 8007e2a:	f7ff fcc1 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8007e2e:	4d5a      	ldr	r5, [pc, #360]	@ (8007f98 <rt_test_001_003_execute.lto_priv.0+0x5a8>)
 8007e30:	484f      	ldr	r0, [pc, #316]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007e32:	f7ff fc9d 	bl	8007770 <test_println>
  while (*msgp)
 8007e36:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007e38:	6820      	ldr	r0, [r4, #0]
 8007e3a:	6803      	ldr	r3, [r0, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4798      	blx	r3
  while (*msgp)
 8007e40:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007e44:	2900      	cmp	r1, #0
 8007e46:	d1f7      	bne.n	8007e38 <rt_test_001_003_execute.lto_priv.0+0x448>
  if (!n)
 8007e48:	2001      	movs	r0, #1
 8007e4a:	f7ff fcb1 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 8007e4e:	4d53      	ldr	r5, [pc, #332]	@ (8007f9c <rt_test_001_003_execute.lto_priv.0+0x5ac>)
 8007e50:	4847      	ldr	r0, [pc, #284]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007e52:	f7ff fc8d 	bl	8007770 <test_println>
  while (*msgp)
 8007e56:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	6803      	ldr	r3, [r0, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	4798      	blx	r3
  while (*msgp)
 8007e60:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d1f7      	bne.n	8007e58 <rt_test_001_003_execute.lto_priv.0+0x468>
  if (!n)
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7ff fca1 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8007e6e:	4d4c      	ldr	r5, [pc, #304]	@ (8007fa0 <rt_test_001_003_execute.lto_priv.0+0x5b0>)
 8007e70:	483f      	ldr	r0, [pc, #252]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007e72:	f7ff fc7d 	bl	8007770 <test_println>
  while (*msgp)
 8007e76:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	6803      	ldr	r3, [r0, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	4798      	blx	r3
  while (*msgp)
 8007e80:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007e84:	2900      	cmp	r1, #0
 8007e86:	d1f7      	bne.n	8007e78 <rt_test_001_003_execute.lto_priv.0+0x488>
  if (!n)
 8007e88:	2001      	movs	r0, #1
 8007e8a:	f7ff fc91 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8007e8e:	4d45      	ldr	r5, [pc, #276]	@ (8007fa4 <rt_test_001_003_execute.lto_priv.0+0x5b4>)
 8007e90:	4837      	ldr	r0, [pc, #220]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007e92:	f7ff fc6d 	bl	8007770 <test_println>
  while (*msgp)
 8007e96:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	6803      	ldr	r3, [r0, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	4798      	blx	r3
  while (*msgp)
 8007ea0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d1f7      	bne.n	8007e98 <rt_test_001_003_execute.lto_priv.0+0x4a8>
  if (!n)
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	f7ff fc81 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 8007eae:	4d3e      	ldr	r5, [pc, #248]	@ (8007fa8 <rt_test_001_003_execute.lto_priv.0+0x5b8>)
 8007eb0:	482f      	ldr	r0, [pc, #188]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007eb2:	f7ff fc5d 	bl	8007770 <test_println>
  while (*msgp)
 8007eb6:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007eb8:	6820      	ldr	r0, [r4, #0]
 8007eba:	6803      	ldr	r3, [r0, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	4798      	blx	r3
  while (*msgp)
 8007ec0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	d1f7      	bne.n	8007eb8 <rt_test_001_003_execute.lto_priv.0+0x4c8>
  if (!n)
 8007ec8:	2001      	movs	r0, #1
 8007eca:	f7ff fc71 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 8007ece:	4d37      	ldr	r5, [pc, #220]	@ (8007fac <rt_test_001_003_execute.lto_priv.0+0x5bc>)
 8007ed0:	4827      	ldr	r0, [pc, #156]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007ed2:	f7ff fc4d 	bl	8007770 <test_println>
  while (*msgp)
 8007ed6:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007ed8:	6820      	ldr	r0, [r4, #0]
 8007eda:	6803      	ldr	r3, [r0, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	4798      	blx	r3
  while (*msgp)
 8007ee0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	d1f7      	bne.n	8007ed8 <rt_test_001_003_execute.lto_priv.0+0x4e8>
    streamPut(test_chp, '0');
 8007ee8:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_DBG_STATISTICS:                  ");
    test_printn(CH_DBG_STATISTICS);
    test_println("");
 8007eea:	4d31      	ldr	r5, [pc, #196]	@ (8007fb0 <rt_test_001_003_execute.lto_priv.0+0x5c0>)
 8007eec:	6803      	ldr	r3, [r0, #0]
 8007eee:	2130      	movs	r1, #48	@ 0x30
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	4798      	blx	r3
 8007ef4:	481e      	ldr	r0, [pc, #120]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007ef6:	f7ff fc3b 	bl	8007770 <test_println>
  while (*msgp)
 8007efa:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007efc:	6820      	ldr	r0, [r4, #0]
 8007efe:	6803      	ldr	r3, [r0, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	4798      	blx	r3
  while (*msgp)
 8007f04:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	d1f7      	bne.n	8007efc <rt_test_001_003_execute.lto_priv.0+0x50c>
    streamPut(test_chp, '0');
 8007f0c:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
    test_println("");
 8007f0e:	4d29      	ldr	r5, [pc, #164]	@ (8007fb4 <rt_test_001_003_execute.lto_priv.0+0x5c4>)
 8007f10:	6803      	ldr	r3, [r0, #0]
 8007f12:	2130      	movs	r1, #48	@ 0x30
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	4798      	blx	r3
 8007f18:	4815      	ldr	r0, [pc, #84]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007f1a:	f7ff fc29 	bl	8007770 <test_println>
  while (*msgp)
 8007f1e:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	6803      	ldr	r3, [r0, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	4798      	blx	r3
  while (*msgp)
 8007f28:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	d1f7      	bne.n	8007f20 <rt_test_001_003_execute.lto_priv.0+0x530>
    streamPut(test_chp, '0');
 8007f30:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
    test_printn(CH_DBG_ENABLE_CHECKS);
    test_println("");
 8007f32:	4d21      	ldr	r5, [pc, #132]	@ (8007fb8 <rt_test_001_003_execute.lto_priv.0+0x5c8>)
 8007f34:	6803      	ldr	r3, [r0, #0]
 8007f36:	2130      	movs	r1, #48	@ 0x30
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	4798      	blx	r3
 8007f3c:	480c      	ldr	r0, [pc, #48]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007f3e:	f7ff fc17 	bl	8007770 <test_println>
  while (*msgp)
 8007f42:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007f44:	6820      	ldr	r0, [r4, #0]
 8007f46:	6803      	ldr	r3, [r0, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	4798      	blx	r3
  while (*msgp)
 8007f4c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007f50:	2900      	cmp	r1, #0
 8007f52:	d1f7      	bne.n	8007f44 <rt_test_001_003_execute.lto_priv.0+0x554>
    streamPut(test_chp, '0');
 8007f54:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
    test_printn(CH_DBG_ENABLE_ASSERTS);
    test_println("");
 8007f56:	4d19      	ldr	r5, [pc, #100]	@ (8007fbc <rt_test_001_003_execute.lto_priv.0+0x5cc>)
 8007f58:	6803      	ldr	r3, [r0, #0]
 8007f5a:	2130      	movs	r1, #48	@ 0x30
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	4798      	blx	r3
 8007f60:	4803      	ldr	r0, [pc, #12]	@ (8007f70 <rt_test_001_003_execute.lto_priv.0+0x580>)
 8007f62:	f7ff fc05 	bl	8007770 <test_println>
  while (*msgp)
 8007f66:	212d      	movs	r1, #45	@ 0x2d
 8007f68:	e02a      	b.n	8007fc0 <rt_test_001_003_execute.lto_priv.0+0x5d0>
 8007f6a:	bf00      	nop
 8007f6c:	0800bcec 	.word	0x0800bcec
 8007f70:	0800b76c 	.word	0x0800b76c
 8007f74:	0800bd18 	.word	0x0800bd18
 8007f78:	0800bd44 	.word	0x0800bd44
 8007f7c:	0800bd70 	.word	0x0800bd70
 8007f80:	0800bd9c 	.word	0x0800bd9c
 8007f84:	0800bdc8 	.word	0x0800bdc8
 8007f88:	0800bdf4 	.word	0x0800bdf4
 8007f8c:	0800be20 	.word	0x0800be20
 8007f90:	0800be4c 	.word	0x0800be4c
 8007f94:	0800be78 	.word	0x0800be78
 8007f98:	0800bea4 	.word	0x0800bea4
 8007f9c:	0800bed0 	.word	0x0800bed0
 8007fa0:	0800befc 	.word	0x0800befc
 8007fa4:	0800bf28 	.word	0x0800bf28
 8007fa8:	0800bf54 	.word	0x0800bf54
 8007fac:	0800bf80 	.word	0x0800bf80
 8007fb0:	0800bfac 	.word	0x0800bfac
 8007fb4:	0800bfd8 	.word	0x0800bfd8
 8007fb8:	0800c004 	.word	0x0800c004
 8007fbc:	0800c030 	.word	0x0800c030
    streamPut(test_chp, *msgp++);
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	6803      	ldr	r3, [r0, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	4798      	blx	r3
  while (*msgp)
 8007fc8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	d1f7      	bne.n	8007fc0 <rt_test_001_003_execute.lto_priv.0+0x5d0>
  if (!n)
 8007fd0:	20ff      	movs	r0, #255	@ 0xff
 8007fd2:	f7ff fbed 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8007fd6:	4d25      	ldr	r5, [pc, #148]	@ (800806c <rt_test_001_003_execute.lto_priv.0+0x67c>)
 8007fd8:	4825      	ldr	r0, [pc, #148]	@ (8008070 <rt_test_001_003_execute.lto_priv.0+0x680>)
 8007fda:	f7ff fbc9 	bl	8007770 <test_println>
  while (*msgp)
 8007fde:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	6803      	ldr	r3, [r0, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	4798      	blx	r3
  while (*msgp)
 8007fe8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007fec:	2900      	cmp	r1, #0
 8007fee:	d1f7      	bne.n	8007fe0 <rt_test_001_003_execute.lto_priv.0+0x5f0>
  if (!n)
 8007ff0:	2080      	movs	r0, #128	@ 0x80
 8007ff2:	f7ff fbdd 	bl	80077b0 <test_printn.part.0>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8007ff6:	4d1f      	ldr	r5, [pc, #124]	@ (8008074 <rt_test_001_003_execute.lto_priv.0+0x684>)
 8007ff8:	481d      	ldr	r0, [pc, #116]	@ (8008070 <rt_test_001_003_execute.lto_priv.0+0x680>)
 8007ffa:	f7ff fbb9 	bl	8007770 <test_println>
  while (*msgp)
 8007ffe:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008000:	6820      	ldr	r0, [r4, #0]
 8008002:	6803      	ldr	r3, [r0, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4798      	blx	r3
  while (*msgp)
 8008008:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800800c:	2900      	cmp	r1, #0
 800800e:	d1f7      	bne.n	8008000 <rt_test_001_003_execute.lto_priv.0+0x610>
    streamPut(test_chp, '0');
 8008010:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
    test_println("");
 8008012:	4d19      	ldr	r5, [pc, #100]	@ (8008078 <rt_test_001_003_execute.lto_priv.0+0x688>)
 8008014:	6803      	ldr	r3, [r0, #0]
 8008016:	2130      	movs	r1, #48	@ 0x30
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	4798      	blx	r3
 800801c:	4814      	ldr	r0, [pc, #80]	@ (8008070 <rt_test_001_003_execute.lto_priv.0+0x680>)
 800801e:	f7ff fba7 	bl	8007770 <test_println>
  while (*msgp)
 8008022:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008024:	6820      	ldr	r0, [r4, #0]
 8008026:	6803      	ldr	r3, [r0, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	4798      	blx	r3
  while (*msgp)
 800802c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008030:	2900      	cmp	r1, #0
 8008032:	d1f7      	bne.n	8008024 <rt_test_001_003_execute.lto_priv.0+0x634>
    streamPut(test_chp, '0');
 8008034:	6820      	ldr	r0, [r4, #0]
    test_print("--- CH_DBG_FILL_THREADS:                ");
    test_printn(CH_DBG_FILL_THREADS);
    test_println("");
 8008036:	4d11      	ldr	r5, [pc, #68]	@ (800807c <rt_test_001_003_execute.lto_priv.0+0x68c>)
 8008038:	6803      	ldr	r3, [r0, #0]
 800803a:	2130      	movs	r1, #48	@ 0x30
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	4798      	blx	r3
 8008040:	480b      	ldr	r0, [pc, #44]	@ (8008070 <rt_test_001_003_execute.lto_priv.0+0x680>)
 8008042:	f7ff fb95 	bl	8007770 <test_println>
  while (*msgp)
 8008046:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	6803      	ldr	r3, [r0, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	4798      	blx	r3
  while (*msgp)
 8008050:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008054:	2900      	cmp	r1, #0
 8008056:	d1f7      	bne.n	8008048 <rt_test_001_003_execute.lto_priv.0+0x658>
    streamPut(test_chp, '0');
 8008058:	6820      	ldr	r0, [r4, #0]
 800805a:	6803      	ldr	r3, [r0, #0]
 800805c:	2130      	movs	r1, #48	@ 0x30
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	4798      	blx	r3
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
    test_printn(CH_DBG_THREADS_PROFILING);
    test_println("");
  }
}
 8008062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8008066:	4802      	ldr	r0, [pc, #8]	@ (8008070 <rt_test_001_003_execute.lto_priv.0+0x680>)
 8008068:	f7ff bb82 	b.w	8007770 <test_println>
 800806c:	0800c05c 	.word	0x0800c05c
 8008070:	0800b76c 	.word	0x0800b76c
 8008074:	0800c088 	.word	0x0800c088
 8008078:	0800c0b4 	.word	0x0800c0b4
 800807c:	0800c0e0 	.word	0x0800c0e0

08008080 <rt_test_010_001_execute.lto_priv.0>:
  return ch.rlist.current;
 8008080:	4b2a      	ldr	r3, [pc, #168]	@ (800812c <rt_test_010_001_execute.lto_priv.0+0xac>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008082:	4a2b      	ldr	r2, [pc, #172]	@ (8008130 <rt_test_010_001_execute.lto_priv.0+0xb0>)
  return chThdGetSelfX()->prio;
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	482b      	ldr	r0, [pc, #172]	@ (8008134 <rt_test_010_001_execute.lto_priv.0+0xb4>)
 8008088:	6899      	ldr	r1, [r3, #8]
static void rt_test_010_001_execute(void) {
 800808a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800808e:	4f2a      	ldr	r7, [pc, #168]	@ (8008138 <rt_test_010_001_execute.lto_priv.0+0xb8>)
 8008090:	2401      	movs	r4, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008092:	2300      	movs	r3, #0
 8008094:	3901      	subs	r1, #1
  test_set_step(1);
 8008096:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008098:	f002 fd52 	bl	800ab40 <chThdCreateStatic.constprop.0>
 800809c:	4c27      	ldr	r4, [pc, #156]	@ (800813c <rt_test_010_001_execute.lto_priv.0+0xbc>)
  test_set_step(2);
 800809e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80080a0:	6020      	str	r0, [r4, #0]
  test_set_step(2);
 80080a2:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 80080a4:	f7fb fc6c 	bl	8003980 <msg_loop_test>
 80080a8:	f104 0614 	add.w	r6, r4, #20
 80080ac:	4605      	mov	r5, r0
      threads[i] = NULL;
 80080ae:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 80080b2:	f854 0b04 	ldr.w	r0, [r4], #4
 80080b6:	b118      	cbz	r0, 80080c0 <rt_test_010_001_execute.lto_priv.0+0x40>
      chThdWait(threads[i]);
 80080b8:	f002 ffea 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 80080bc:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80080c0:	42a6      	cmp	r6, r4
 80080c2:	d1f6      	bne.n	80080b2 <rt_test_010_001_execute.lto_priv.0+0x32>
  test_set_step(3);
 80080c4:	2303      	movs	r3, #3
 80080c6:	4e1e      	ldr	r6, [pc, #120]	@ (8008140 <rt_test_010_001_execute.lto_priv.0+0xc0>)
 80080c8:	4c1e      	ldr	r4, [pc, #120]	@ (8008144 <rt_test_010_001_execute.lto_priv.0+0xc4>)
 80080ca:	603b      	str	r3, [r7, #0]
  while (*msgp)
 80080cc:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 80080ce:	6820      	ldr	r0, [r4, #0]
 80080d0:	6803      	ldr	r3, [r0, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	4798      	blx	r3
  while (*msgp)
 80080d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080da:	2900      	cmp	r1, #0
 80080dc:	d1f7      	bne.n	80080ce <rt_test_010_001_execute.lto_priv.0+0x4e>
  if (!n)
 80080de:	b9d5      	cbnz	r5, 8008116 <rt_test_010_001_execute.lto_priv.0+0x96>
    streamPut(test_chp, '0');
 80080e0:	6820      	ldr	r0, [r4, #0]
 80080e2:	6803      	ldr	r3, [r0, #0]
 80080e4:	2130      	movs	r1, #48	@ 0x30
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	4798      	blx	r3
  while (*msgp)
 80080ea:	4e17      	ldr	r6, [pc, #92]	@ (8008148 <rt_test_010_001_execute.lto_priv.0+0xc8>)
 80080ec:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 80080ee:	6820      	ldr	r0, [r4, #0]
 80080f0:	6803      	ldr	r3, [r0, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	4798      	blx	r3
  while (*msgp)
 80080f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080fa:	2900      	cmp	r1, #0
 80080fc:	d1f7      	bne.n	80080ee <rt_test_010_001_execute.lto_priv.0+0x6e>
  if (!n)
 80080fe:	0068      	lsls	r0, r5, #1
 8008100:	d10d      	bne.n	800811e <rt_test_010_001_execute.lto_priv.0+0x9e>
    streamPut(test_chp, '0');
 8008102:	6820      	ldr	r0, [r4, #0]
 8008104:	6803      	ldr	r3, [r0, #0]
 8008106:	2130      	movs	r1, #48	@ 0x30
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	4798      	blx	r3
}
 800810c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8008110:	480e      	ldr	r0, [pc, #56]	@ (800814c <rt_test_010_001_execute.lto_priv.0+0xcc>)
 8008112:	f7ff bb2d 	b.w	8007770 <test_println>
 8008116:	4628      	mov	r0, r5
 8008118:	f7ff fb4a 	bl	80077b0 <test_printn.part.0>
 800811c:	e7e5      	b.n	80080ea <rt_test_010_001_execute.lto_priv.0+0x6a>
 800811e:	f7ff fb47 	bl	80077b0 <test_printn.part.0>
}
 8008122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8008126:	4809      	ldr	r0, [pc, #36]	@ (800814c <rt_test_010_001_execute.lto_priv.0+0xcc>)
 8008128:	f7ff bb22 	b.w	8007770 <test_println>
 800812c:	200011c0 	.word	0x200011c0
 8008130:	08003ee1 	.word	0x08003ee1
 8008134:	20000a08 	.word	0x20000a08
 8008138:	200010b4 	.word	0x200010b4
 800813c:	200010a0 	.word	0x200010a0
 8008140:	0800c10c 	.word	0x0800c10c
 8008144:	200010d4 	.word	0x200010d4
 8008148:	0800c11c 	.word	0x0800c11c
 800814c:	0800c128 	.word	0x0800c128

08008150 <rt_test_010_002_execute.lto_priv.0>:
  return ch.rlist.current;
 8008150:	4b2a      	ldr	r3, [pc, #168]	@ (80081fc <rt_test_010_002_execute.lto_priv.0+0xac>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008152:	4a2b      	ldr	r2, [pc, #172]	@ (8008200 <rt_test_010_002_execute.lto_priv.0+0xb0>)
  return chThdGetSelfX()->prio;
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	482b      	ldr	r0, [pc, #172]	@ (8008204 <rt_test_010_002_execute.lto_priv.0+0xb4>)
 8008158:	6899      	ldr	r1, [r3, #8]
static void rt_test_010_002_execute(void) {
 800815a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800815e:	2401      	movs	r4, #1
 8008160:	4f29      	ldr	r7, [pc, #164]	@ (8008208 <rt_test_010_002_execute.lto_priv.0+0xb8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008162:	4421      	add	r1, r4
 8008164:	2300      	movs	r3, #0
  test_set_step(1);
 8008166:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008168:	f002 fcea 	bl	800ab40 <chThdCreateStatic.constprop.0>
 800816c:	4c27      	ldr	r4, [pc, #156]	@ (800820c <rt_test_010_002_execute.lto_priv.0+0xbc>)
  test_set_step(2);
 800816e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008170:	6020      	str	r0, [r4, #0]
  test_set_step(2);
 8008172:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 8008174:	f7fb fc04 	bl	8003980 <msg_loop_test>
 8008178:	f104 0614 	add.w	r6, r4, #20
 800817c:	4605      	mov	r5, r0
      threads[i] = NULL;
 800817e:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 8008182:	f854 0b04 	ldr.w	r0, [r4], #4
 8008186:	b118      	cbz	r0, 8008190 <rt_test_010_002_execute.lto_priv.0+0x40>
      chThdWait(threads[i]);
 8008188:	f002 ff82 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 800818c:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008190:	42a6      	cmp	r6, r4
 8008192:	d1f6      	bne.n	8008182 <rt_test_010_002_execute.lto_priv.0+0x32>
  test_set_step(3);
 8008194:	2303      	movs	r3, #3
 8008196:	4e1e      	ldr	r6, [pc, #120]	@ (8008210 <rt_test_010_002_execute.lto_priv.0+0xc0>)
 8008198:	4c1e      	ldr	r4, [pc, #120]	@ (8008214 <rt_test_010_002_execute.lto_priv.0+0xc4>)
 800819a:	603b      	str	r3, [r7, #0]
  while (*msgp)
 800819c:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800819e:	6820      	ldr	r0, [r4, #0]
 80081a0:	6803      	ldr	r3, [r0, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	4798      	blx	r3
  while (*msgp)
 80081a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081aa:	2900      	cmp	r1, #0
 80081ac:	d1f7      	bne.n	800819e <rt_test_010_002_execute.lto_priv.0+0x4e>
  if (!n)
 80081ae:	b9d5      	cbnz	r5, 80081e6 <rt_test_010_002_execute.lto_priv.0+0x96>
    streamPut(test_chp, '0');
 80081b0:	6820      	ldr	r0, [r4, #0]
 80081b2:	6803      	ldr	r3, [r0, #0]
 80081b4:	2130      	movs	r1, #48	@ 0x30
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	4798      	blx	r3
  while (*msgp)
 80081ba:	4e17      	ldr	r6, [pc, #92]	@ (8008218 <rt_test_010_002_execute.lto_priv.0+0xc8>)
 80081bc:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 80081be:	6820      	ldr	r0, [r4, #0]
 80081c0:	6803      	ldr	r3, [r0, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4798      	blx	r3
  while (*msgp)
 80081c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081ca:	2900      	cmp	r1, #0
 80081cc:	d1f7      	bne.n	80081be <rt_test_010_002_execute.lto_priv.0+0x6e>
  if (!n)
 80081ce:	0068      	lsls	r0, r5, #1
 80081d0:	d10d      	bne.n	80081ee <rt_test_010_002_execute.lto_priv.0+0x9e>
    streamPut(test_chp, '0');
 80081d2:	6820      	ldr	r0, [r4, #0]
 80081d4:	6803      	ldr	r3, [r0, #0]
 80081d6:	2130      	movs	r1, #48	@ 0x30
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	4798      	blx	r3
}
 80081dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 80081e0:	480e      	ldr	r0, [pc, #56]	@ (800821c <rt_test_010_002_execute.lto_priv.0+0xcc>)
 80081e2:	f7ff bac5 	b.w	8007770 <test_println>
 80081e6:	4628      	mov	r0, r5
 80081e8:	f7ff fae2 	bl	80077b0 <test_printn.part.0>
 80081ec:	e7e5      	b.n	80081ba <rt_test_010_002_execute.lto_priv.0+0x6a>
 80081ee:	f7ff fadf 	bl	80077b0 <test_printn.part.0>
}
 80081f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 80081f6:	4809      	ldr	r0, [pc, #36]	@ (800821c <rt_test_010_002_execute.lto_priv.0+0xcc>)
 80081f8:	f7ff baba 	b.w	8007770 <test_println>
 80081fc:	200011c0 	.word	0x200011c0
 8008200:	08003ee1 	.word	0x08003ee1
 8008204:	20000a08 	.word	0x20000a08
 8008208:	200010b4 	.word	0x200010b4
 800820c:	200010a0 	.word	0x200010a0
 8008210:	0800c10c 	.word	0x0800c10c
 8008214:	200010d4 	.word	0x200010d4
 8008218:	0800c11c 	.word	0x0800c11c
 800821c:	0800c128 	.word	0x0800c128

08008220 <rt_test_010_003_execute.lto_priv.0>:
static void rt_test_010_003_execute(void) {
 8008220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008224:	4d3d      	ldr	r5, [pc, #244]	@ (800831c <rt_test_010_003_execute.lto_priv.0+0xfc>)
  test_set_step(1);
 8008226:	4f3e      	ldr	r7, [pc, #248]	@ (8008320 <rt_test_010_003_execute.lto_priv.0+0x100>)
  return chThdGetSelfX()->prio;
 8008228:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800822a:	4a3e      	ldr	r2, [pc, #248]	@ (8008324 <rt_test_010_003_execute.lto_priv.0+0x104>)
 800822c:	6899      	ldr	r1, [r3, #8]
 800822e:	4c3e      	ldr	r4, [pc, #248]	@ (8008328 <rt_test_010_003_execute.lto_priv.0+0x108>)
  test_set_step(1);
 8008230:	2001      	movs	r0, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008232:	4401      	add	r1, r0
 8008234:	2300      	movs	r3, #0
  test_set_step(1);
 8008236:	6038      	str	r0, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008238:	483c      	ldr	r0, [pc, #240]	@ (800832c <rt_test_010_003_execute.lto_priv.0+0x10c>)
 800823a:	f002 fc81 	bl	800ab40 <chThdCreateStatic.constprop.0>
 800823e:	69ab      	ldr	r3, [r5, #24]
 8008240:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008242:	6899      	ldr	r1, [r3, #8]
 8008244:	483a      	ldr	r0, [pc, #232]	@ (8008330 <rt_test_010_003_execute.lto_priv.0+0x110>)
  test_set_step(2);
 8008246:	2202      	movs	r2, #2
 8008248:	603a      	str	r2, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800824a:	3902      	subs	r1, #2
 800824c:	4a39      	ldr	r2, [pc, #228]	@ (8008334 <rt_test_010_003_execute.lto_priv.0+0x114>)
 800824e:	2300      	movs	r3, #0
 8008250:	f002 fc76 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8008254:	69aa      	ldr	r2, [r5, #24]
 8008256:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8008258:	6891      	ldr	r1, [r2, #8]
 800825a:	4837      	ldr	r0, [pc, #220]	@ (8008338 <rt_test_010_003_execute.lto_priv.0+0x118>)
 800825c:	4a35      	ldr	r2, [pc, #212]	@ (8008334 <rt_test_010_003_execute.lto_priv.0+0x114>)
 800825e:	2300      	movs	r3, #0
 8008260:	3903      	subs	r1, #3
 8008262:	f002 fc6d 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8008266:	69aa      	ldr	r2, [r5, #24]
 8008268:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800826a:	6891      	ldr	r1, [r2, #8]
 800826c:	4833      	ldr	r0, [pc, #204]	@ (800833c <rt_test_010_003_execute.lto_priv.0+0x11c>)
 800826e:	4a31      	ldr	r2, [pc, #196]	@ (8008334 <rt_test_010_003_execute.lto_priv.0+0x114>)
 8008270:	2300      	movs	r3, #0
 8008272:	3904      	subs	r1, #4
 8008274:	f002 fc64 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8008278:	69a9      	ldr	r1, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800827a:	4a2e      	ldr	r2, [pc, #184]	@ (8008334 <rt_test_010_003_execute.lto_priv.0+0x114>)
 800827c:	6889      	ldr	r1, [r1, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800827e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8008280:	2300      	movs	r3, #0
 8008282:	3905      	subs	r1, #5
 8008284:	482e      	ldr	r0, [pc, #184]	@ (8008340 <rt_test_010_003_execute.lto_priv.0+0x120>)
 8008286:	f002 fc5b 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 800828a:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800828c:	4602      	mov	r2, r0
    n = msg_loop_test(threads[0]);
 800828e:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8008290:	6122      	str	r2, [r4, #16]
  test_set_step(3);
 8008292:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 8008294:	f7fb fb74 	bl	8003980 <msg_loop_test>
 8008298:	f104 0614 	add.w	r6, r4, #20
 800829c:	4605      	mov	r5, r0
      threads[i] = NULL;
 800829e:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 80082a2:	f854 0b04 	ldr.w	r0, [r4], #4
 80082a6:	b118      	cbz	r0, 80082b0 <rt_test_010_003_execute.lto_priv.0+0x90>
      chThdWait(threads[i]);
 80082a8:	f002 fef2 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 80082ac:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80082b0:	42a6      	cmp	r6, r4
 80082b2:	d1f6      	bne.n	80082a2 <rt_test_010_003_execute.lto_priv.0+0x82>
  test_set_step(4);
 80082b4:	2304      	movs	r3, #4
 80082b6:	4e23      	ldr	r6, [pc, #140]	@ (8008344 <rt_test_010_003_execute.lto_priv.0+0x124>)
 80082b8:	4c23      	ldr	r4, [pc, #140]	@ (8008348 <rt_test_010_003_execute.lto_priv.0+0x128>)
 80082ba:	603b      	str	r3, [r7, #0]
  while (*msgp)
 80082bc:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 80082be:	6820      	ldr	r0, [r4, #0]
 80082c0:	6803      	ldr	r3, [r0, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	4798      	blx	r3
  while (*msgp)
 80082c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082ca:	2900      	cmp	r1, #0
 80082cc:	d1f7      	bne.n	80082be <rt_test_010_003_execute.lto_priv.0+0x9e>
  if (!n)
 80082ce:	b9d5      	cbnz	r5, 8008306 <rt_test_010_003_execute.lto_priv.0+0xe6>
    streamPut(test_chp, '0');
 80082d0:	6820      	ldr	r0, [r4, #0]
 80082d2:	6803      	ldr	r3, [r0, #0]
 80082d4:	2130      	movs	r1, #48	@ 0x30
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	4798      	blx	r3
  while (*msgp)
 80082da:	4e1c      	ldr	r6, [pc, #112]	@ (800834c <rt_test_010_003_execute.lto_priv.0+0x12c>)
 80082dc:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 80082de:	6820      	ldr	r0, [r4, #0]
 80082e0:	6803      	ldr	r3, [r0, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	4798      	blx	r3
  while (*msgp)
 80082e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082ea:	2900      	cmp	r1, #0
 80082ec:	d1f7      	bne.n	80082de <rt_test_010_003_execute.lto_priv.0+0xbe>
  if (!n)
 80082ee:	0068      	lsls	r0, r5, #1
 80082f0:	d10d      	bne.n	800830e <rt_test_010_003_execute.lto_priv.0+0xee>
    streamPut(test_chp, '0');
 80082f2:	6820      	ldr	r0, [r4, #0]
 80082f4:	6803      	ldr	r3, [r0, #0]
 80082f6:	2130      	movs	r1, #48	@ 0x30
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	4798      	blx	r3
}
 80082fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8008300:	4813      	ldr	r0, [pc, #76]	@ (8008350 <rt_test_010_003_execute.lto_priv.0+0x130>)
 8008302:	f7ff ba35 	b.w	8007770 <test_println>
 8008306:	4628      	mov	r0, r5
 8008308:	f7ff fa52 	bl	80077b0 <test_printn.part.0>
 800830c:	e7e5      	b.n	80082da <rt_test_010_003_execute.lto_priv.0+0xba>
 800830e:	f7ff fa4f 	bl	80077b0 <test_printn.part.0>
}
 8008312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8008316:	480e      	ldr	r0, [pc, #56]	@ (8008350 <rt_test_010_003_execute.lto_priv.0+0x130>)
 8008318:	f7ff ba2a 	b.w	8007770 <test_println>
 800831c:	200011c0 	.word	0x200011c0
 8008320:	200010b4 	.word	0x200010b4
 8008324:	08003ee1 	.word	0x08003ee1
 8008328:	200010a0 	.word	0x200010a0
 800832c:	20000a08 	.word	0x20000a08
 8008330:	20000b50 	.word	0x20000b50
 8008334:	08001761 	.word	0x08001761
 8008338:	20000c98 	.word	0x20000c98
 800833c:	20000de0 	.word	0x20000de0
 8008340:	20000f28 	.word	0x20000f28
 8008344:	0800c10c 	.word	0x0800c10c
 8008348:	200010d4 	.word	0x200010d4
 800834c:	0800c11c 	.word	0x0800c11c
 8008350:	0800c128 	.word	0x0800c128
	...

08008360 <rt_test_010_004_execute.lto_priv.0>:
  return ch.rlist.current;
 8008360:	4b40      	ldr	r3, [pc, #256]	@ (8008464 <rt_test_010_004_execute.lto_priv.0+0x104>)
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008362:	4a41      	ldr	r2, [pc, #260]	@ (8008468 <rt_test_010_004_execute.lto_priv.0+0x108>)
  return chThdGetSelfX()->prio;
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	4841      	ldr	r0, [pc, #260]	@ (800846c <rt_test_010_004_execute.lto_priv.0+0x10c>)
 8008368:	6899      	ldr	r1, [r3, #8]
static void rt_test_010_004_execute(void) {
 800836a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800836e:	f8df a100 	ldr.w	sl, [pc, #256]	@ 8008470 <rt_test_010_004_execute.lto_priv.0+0x110>
 8008372:	2501      	movs	r5, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008374:	2300      	movs	r3, #0
 8008376:	4429      	add	r1, r5
  test_set_step(1);
 8008378:	f8ca 5000 	str.w	r5, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800837c:	f002 fbe0 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8008380:	4a3c      	ldr	r2, [pc, #240]	@ (8008474 <rt_test_010_004_execute.lto_priv.0+0x114>)
  test_set_step(2);
 8008382:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008384:	4604      	mov	r4, r0
 8008386:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8008388:	f8ca 3000 	str.w	r3, [sl]
 800838c:	2620      	movs	r6, #32
 800838e:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008392:	2008      	movs	r0, #8
 8008394:	4629      	mov	r1, r5
 8008396:	f7fa fd6b 	bl	8002e70 <chSchGoSleepTimeoutS>
 800839a:	2500      	movs	r5, #0
 800839c:	f385 8811 	msr	BASEPRI, r5
 80083a0:	f386 8811 	msr	BASEPRI, r6
 80083a4:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 80083a8:	f8d8 9024 	ldr.w	r9, [r8, #36]	@ 0x24
 80083ac:	f385 8811 	msr	BASEPRI, r5
      chSchWakeupS(tp, MSG_OK);
 80083b0:	462f      	mov	r7, r5
 80083b2:	f386 8811 	msr	BASEPRI, r6
 80083b6:	2100      	movs	r1, #0
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7fb fb69 	bl	8003a90 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80083be:	4620      	mov	r0, r4
 80083c0:	2100      	movs	r1, #0
 80083c2:	f7fb fb65 	bl	8003a90 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80083c6:	4620      	mov	r0, r4
 80083c8:	2100      	movs	r1, #0
 80083ca:	f7fb fb61 	bl	8003a90 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80083ce:	2100      	movs	r1, #0
 80083d0:	4620      	mov	r0, r4
 80083d2:	f7fb fb5d 	bl	8003a90 <chSchWakeupS>
 80083d6:	f387 8811 	msr	BASEPRI, r7
 80083da:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 80083de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80083e2:	eba3 0309 	sub.w	r3, r3, r9
 80083e6:	4293      	cmp	r3, r2
      n += 4;
 80083e8:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 80083ec:	d9e1      	bls.n	80083b2 <rt_test_010_004_execute.lto_priv.0+0x52>
  test_set_step(3);
 80083ee:	2303      	movs	r3, #3
 80083f0:	f8ca 3000 	str.w	r3, [sl]
 80083f4:	f386 8811 	msr	BASEPRI, r6
    chSchWakeupS(tp, MSG_TIMEOUT);
 80083f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7fb fb47 	bl	8003a90 <chSchWakeupS>
 8008402:	f387 8811 	msr	BASEPRI, r7
 8008406:	4c1b      	ldr	r4, [pc, #108]	@ (8008474 <rt_test_010_004_execute.lto_priv.0+0x114>)
      threads[i] = NULL;
 8008408:	2700      	movs	r7, #0
 800840a:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 800840e:	f854 0b04 	ldr.w	r0, [r4], #4
 8008412:	b118      	cbz	r0, 800841c <rt_test_010_004_execute.lto_priv.0+0xbc>
      chThdWait(threads[i]);
 8008414:	f002 fe3c 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8008418:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800841c:	42b4      	cmp	r4, r6
 800841e:	d1f6      	bne.n	800840e <rt_test_010_004_execute.lto_priv.0+0xae>
  test_set_step(4);
 8008420:	2304      	movs	r3, #4
 8008422:	4c15      	ldr	r4, [pc, #84]	@ (8008478 <rt_test_010_004_execute.lto_priv.0+0x118>)
 8008424:	4e15      	ldr	r6, [pc, #84]	@ (800847c <rt_test_010_004_execute.lto_priv.0+0x11c>)
 8008426:	f8ca 3000 	str.w	r3, [sl]
  while (*msgp)
 800842a:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800842c:	6830      	ldr	r0, [r6, #0]
 800842e:	6803      	ldr	r3, [r0, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	4798      	blx	r3
  while (*msgp)
 8008434:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8008438:	2900      	cmp	r1, #0
 800843a:	d1f7      	bne.n	800842c <rt_test_010_004_execute.lto_priv.0+0xcc>
  if (!n)
 800843c:	0068      	lsls	r0, r5, #1
 800843e:	d109      	bne.n	8008454 <rt_test_010_004_execute.lto_priv.0+0xf4>
    streamPut(test_chp, '0');
 8008440:	6830      	ldr	r0, [r6, #0]
 8008442:	6803      	ldr	r3, [r0, #0]
 8008444:	2130      	movs	r1, #48	@ 0x30
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	4798      	blx	r3
}
 800844a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 800844e:	480c      	ldr	r0, [pc, #48]	@ (8008480 <rt_test_010_004_execute.lto_priv.0+0x120>)
 8008450:	f7ff b98e 	b.w	8007770 <test_println>
 8008454:	f7ff f9ac 	bl	80077b0 <test_printn.part.0>
}
 8008458:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 800845c:	4808      	ldr	r0, [pc, #32]	@ (8008480 <rt_test_010_004_execute.lto_priv.0+0x120>)
 800845e:	f7ff b987 	b.w	8007770 <test_println>
 8008462:	bf00      	nop
 8008464:	200011c0 	.word	0x200011c0
 8008468:	08001981 	.word	0x08001981
 800846c:	20000a08 	.word	0x20000a08
 8008470:	200010b4 	.word	0x200010b4
 8008474:	200010a0 	.word	0x200010a0
 8008478:	0800c10c 	.word	0x0800c10c
 800847c:	200010d4 	.word	0x200010d4
 8008480:	0800c128 	.word	0x0800c128
	...

08008490 <rt_test_010_005_execute.lto_priv.0>:
static void rt_test_010_005_execute(void) {
 8008490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8008494:	4b27      	ldr	r3, [pc, #156]	@ (8008534 <rt_test_010_005_execute.lto_priv.0+0xa4>)
  test_set_step(1);
 8008496:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8008538 <rt_test_010_005_execute.lto_priv.0+0xa8>
  return chThdGetSelfX()->prio;
 800849a:	699b      	ldr	r3, [r3, #24]
  tprio_t prio = chThdGetPriorityX() - 1;
 800849c:	689d      	ldr	r5, [r3, #8]
  test_set_step(1);
 800849e:	2101      	movs	r1, #1
 80084a0:	f8c9 1000 	str.w	r1, [r9]
  tprio_t prio = chThdGetPriorityX() - 1;
 80084a4:	3d01      	subs	r5, #1
 80084a6:	2620      	movs	r6, #32
 80084a8:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80084ac:	2008      	movs	r0, #8
 80084ae:	f7fa fcdf 	bl	8002e70 <chSchGoSleepTimeoutS>
 80084b2:	2400      	movs	r4, #0
 80084b4:	f384 8811 	msr	BASEPRI, r4
 80084b8:	f386 8811 	msr	BASEPRI, r6
 80084bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084c0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80084c4:	f384 8811 	msr	BASEPRI, r4
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80084c8:	4f1c      	ldr	r7, [pc, #112]	@ (800853c <rt_test_010_005_execute.lto_priv.0+0xac>)
 80084ca:	4e1d      	ldr	r6, [pc, #116]	@ (8008540 <rt_test_010_005_execute.lto_priv.0+0xb0>)
 80084cc:	2300      	movs	r3, #0
 80084ce:	463a      	mov	r2, r7
 80084d0:	4629      	mov	r1, r5
 80084d2:	4630      	mov	r0, r6
 80084d4:	f002 fb34 	bl	800ab40 <chThdCreateStatic.constprop.0>
 80084d8:	f002 fdda 	bl	800b090 <chThdWait.isra.0>
 80084dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80084e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80084e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e6:	eba3 0308 	sub.w	r3, r3, r8
 80084ea:	4293      	cmp	r3, r2
      n++;
 80084ec:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80084f0:	d9ec      	bls.n	80084cc <rt_test_010_005_execute.lto_priv.0+0x3c>
  test_set_step(2);
 80084f2:	2302      	movs	r3, #2
 80084f4:	4d13      	ldr	r5, [pc, #76]	@ (8008544 <rt_test_010_005_execute.lto_priv.0+0xb4>)
 80084f6:	4e14      	ldr	r6, [pc, #80]	@ (8008548 <rt_test_010_005_execute.lto_priv.0+0xb8>)
 80084f8:	f8c9 3000 	str.w	r3, [r9]
  while (*msgp)
 80084fc:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 80084fe:	6830      	ldr	r0, [r6, #0]
 8008500:	6803      	ldr	r3, [r0, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4798      	blx	r3
  while (*msgp)
 8008506:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800850a:	2900      	cmp	r1, #0
 800850c:	d1f7      	bne.n	80084fe <rt_test_010_005_execute.lto_priv.0+0x6e>
  if (!n)
 800850e:	b94c      	cbnz	r4, 8008524 <rt_test_010_005_execute.lto_priv.0+0x94>
    streamPut(test_chp, '0');
 8008510:	6830      	ldr	r0, [r6, #0]
 8008512:	6803      	ldr	r3, [r0, #0]
 8008514:	2130      	movs	r1, #48	@ 0x30
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	4798      	blx	r3
}
 800851a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 800851e:	480b      	ldr	r0, [pc, #44]	@ (800854c <rt_test_010_005_execute.lto_priv.0+0xbc>)
 8008520:	f7ff b926 	b.w	8007770 <test_println>
 8008524:	4620      	mov	r0, r4
 8008526:	f7ff f943 	bl	80077b0 <test_printn.part.0>
}
 800852a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 800852e:	4807      	ldr	r0, [pc, #28]	@ (800854c <rt_test_010_005_execute.lto_priv.0+0xbc>)
 8008530:	f7ff b91e 	b.w	8007770 <test_println>
 8008534:	200011c0 	.word	0x200011c0
 8008538:	200010b4 	.word	0x200010b4
 800853c:	08001761 	.word	0x08001761
 8008540:	20000a08 	.word	0x20000a08
 8008544:	0800c10c 	.word	0x0800c10c
 8008548:	200010d4 	.word	0x200010d4
 800854c:	0800c134 	.word	0x0800c134

08008550 <rt_test_010_006_execute.lto_priv.0>:
  return ch.rlist.current;
 8008550:	4b31      	ldr	r3, [pc, #196]	@ (8008618 <rt_test_010_006_execute.lto_priv.0+0xc8>)
  return chThdGetSelfX()->prio;
 8008552:	699b      	ldr	r3, [r3, #24]
static void rt_test_010_006_execute(void) {
 8008554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8008558:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800861c <rt_test_010_006_execute.lto_priv.0+0xcc>
  tprio_t prio = chThdGetPriorityX() + 1;
 800855c:	689d      	ldr	r5, [r3, #8]
  test_set_step(1);
 800855e:	2101      	movs	r1, #1
 8008560:	f8ca 1000 	str.w	r1, [sl]
  tprio_t prio = chThdGetPriorityX() + 1;
 8008564:	440d      	add	r5, r1
 8008566:	2620      	movs	r6, #32
 8008568:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800856c:	2008      	movs	r0, #8
 800856e:	f7fa fc7f 	bl	8002e70 <chSchGoSleepTimeoutS>
 8008572:	2400      	movs	r4, #0
 8008574:	f384 8811 	msr	BASEPRI, r4
 8008578:	f386 8811 	msr	BASEPRI, r6
 800857c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008580:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8008584:	f384 8811 	msr	BASEPRI, r4
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8008588:	4f25      	ldr	r7, [pc, #148]	@ (8008620 <rt_test_010_006_execute.lto_priv.0+0xd0>)
 800858a:	4e26      	ldr	r6, [pc, #152]	@ (8008624 <rt_test_010_006_execute.lto_priv.0+0xd4>)
 800858c:	46a1      	mov	r9, r4
 800858e:	e00c      	b.n	80085aa <rt_test_010_006_execute.lto_priv.0+0x5a>
 8008590:	f389 8811 	msr	BASEPRI, r9
 8008594:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008598:	f242 720f 	movw	r2, #9999	@ 0x270f
 800859c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859e:	eba3 0308 	sub.w	r3, r3, r8
 80085a2:	4293      	cmp	r3, r2
      n++;
 80085a4:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80085a8:	d815      	bhi.n	80085d6 <rt_test_010_006_execute.lto_priv.0+0x86>
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80085aa:	463a      	mov	r2, r7
 80085ac:	2300      	movs	r3, #0
 80085ae:	4629      	mov	r1, r5
 80085b0:	4630      	mov	r0, r6
 80085b2:	f002 fac5 	bl	800ab40 <chThdCreateStatic.constprop.0>
 80085b6:	2220      	movs	r2, #32
 80085b8:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 80085bc:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 80085c0:	3a01      	subs	r2, #1
 80085c2:	f880 2022 	strb.w	r2, [r0, #34]	@ 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80085c6:	6a03      	ldr	r3, [r0, #32]
 80085c8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80085cc:	2b0f      	cmp	r3, #15
 80085ce:	d1df      	bne.n	8008590 <rt_test_010_006_execute.lto_priv.0+0x40>
 80085d0:	f7fd fb4e 	bl	8005c70 <chThdRelease.part.0>
 80085d4:	e7de      	b.n	8008594 <rt_test_010_006_execute.lto_priv.0+0x44>
  test_set_step(2);
 80085d6:	2302      	movs	r3, #2
 80085d8:	4d13      	ldr	r5, [pc, #76]	@ (8008628 <rt_test_010_006_execute.lto_priv.0+0xd8>)
 80085da:	4e14      	ldr	r6, [pc, #80]	@ (800862c <rt_test_010_006_execute.lto_priv.0+0xdc>)
 80085dc:	f8ca 3000 	str.w	r3, [sl]
  while (*msgp)
 80085e0:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 80085e2:	6830      	ldr	r0, [r6, #0]
 80085e4:	6803      	ldr	r3, [r0, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	4798      	blx	r3
  while (*msgp)
 80085ea:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d1f7      	bne.n	80085e2 <rt_test_010_006_execute.lto_priv.0+0x92>
  if (!n)
 80085f2:	b94c      	cbnz	r4, 8008608 <rt_test_010_006_execute.lto_priv.0+0xb8>
    streamPut(test_chp, '0');
 80085f4:	6830      	ldr	r0, [r6, #0]
 80085f6:	6803      	ldr	r3, [r0, #0]
 80085f8:	2130      	movs	r1, #48	@ 0x30
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	4798      	blx	r3
}
 80085fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 8008602:	480b      	ldr	r0, [pc, #44]	@ (8008630 <rt_test_010_006_execute.lto_priv.0+0xe0>)
 8008604:	f7ff b8b4 	b.w	8007770 <test_println>
 8008608:	4620      	mov	r0, r4
 800860a:	f7ff f8d1 	bl	80077b0 <test_printn.part.0>
}
 800860e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" threads/S");
 8008612:	4807      	ldr	r0, [pc, #28]	@ (8008630 <rt_test_010_006_execute.lto_priv.0+0xe0>)
 8008614:	f7ff b8ac 	b.w	8007770 <test_println>
 8008618:	200011c0 	.word	0x200011c0
 800861c:	200010b4 	.word	0x200010b4
 8008620:	08001761 	.word	0x08001761
 8008624:	20000a08 	.word	0x20000a08
 8008628:	0800c10c 	.word	0x0800c10c
 800862c:	200010d4 	.word	0x200010d4
 8008630:	0800c134 	.word	0x0800c134
	...

08008640 <rt_test_010_007_execute.lto_priv.0>:
static void rt_test_010_007_execute(void) {
 8008640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return ch.rlist.current;
 8008644:	f8df 8260 	ldr.w	r8, [pc, #608]	@ 80088a8 <rt_test_010_007_execute.lto_priv.0+0x268>
  test_set_step(1);
 8008648:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 80088ac <rt_test_010_007_execute.lto_priv.0+0x26c>
  return chThdGetSelfX()->prio;
 800864c:	f8d8 3018 	ldr.w	r3, [r8, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008650:	4a97      	ldr	r2, [pc, #604]	@ (80088b0 <rt_test_010_007_execute.lto_priv.0+0x270>)
 8008652:	6899      	ldr	r1, [r3, #8]
 8008654:	4897      	ldr	r0, [pc, #604]	@ (80088b4 <rt_test_010_007_execute.lto_priv.0+0x274>)
 8008656:	4c98      	ldr	r4, [pc, #608]	@ (80088b8 <rt_test_010_007_execute.lto_priv.0+0x278>)
  test_set_step(1);
 8008658:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800865a:	2300      	movs	r3, #0
 800865c:	3105      	adds	r1, #5
  test_set_step(1);
 800865e:	f8c9 5000 	str.w	r5, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008662:	f002 fa6d 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8008666:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800866a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800866c:	6899      	ldr	r1, [r3, #8]
 800866e:	4a90      	ldr	r2, [pc, #576]	@ (80088b0 <rt_test_010_007_execute.lto_priv.0+0x270>)
 8008670:	4892      	ldr	r0, [pc, #584]	@ (80088bc <rt_test_010_007_execute.lto_priv.0+0x27c>)
 8008672:	3104      	adds	r1, #4
 8008674:	2300      	movs	r3, #0
 8008676:	f002 fa63 	bl	800ab40 <chThdCreateStatic.constprop.0>
 800867a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800867e:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8008680:	6899      	ldr	r1, [r3, #8]
 8008682:	4a8b      	ldr	r2, [pc, #556]	@ (80088b0 <rt_test_010_007_execute.lto_priv.0+0x270>)
 8008684:	488e      	ldr	r0, [pc, #568]	@ (80088c0 <rt_test_010_007_execute.lto_priv.0+0x280>)
 8008686:	3103      	adds	r1, #3
 8008688:	2300      	movs	r3, #0
 800868a:	f002 fa59 	bl	800ab40 <chThdCreateStatic.constprop.0>
 800868e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008692:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8008694:	6899      	ldr	r1, [r3, #8]
 8008696:	4a86      	ldr	r2, [pc, #536]	@ (80088b0 <rt_test_010_007_execute.lto_priv.0+0x270>)
 8008698:	488a      	ldr	r0, [pc, #552]	@ (80088c4 <rt_test_010_007_execute.lto_priv.0+0x284>)
 800869a:	3102      	adds	r1, #2
 800869c:	2300      	movs	r3, #0
 800869e:	f002 fa4f 	bl	800ab40 <chThdCreateStatic.constprop.0>
 80086a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80086a6:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80086a8:	6899      	ldr	r1, [r3, #8]
 80086aa:	4a81      	ldr	r2, [pc, #516]	@ (80088b0 <rt_test_010_007_execute.lto_priv.0+0x270>)
 80086ac:	4886      	ldr	r0, [pc, #536]	@ (80088c8 <rt_test_010_007_execute.lto_priv.0+0x288>)
 80086ae:	4429      	add	r1, r5
 80086b0:	2300      	movs	r3, #0
 80086b2:	f002 fa45 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 80086b6:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80086b8:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 80086ba:	f8c9 3000 	str.w	r3, [r9]
 80086be:	f04f 0a20 	mov.w	sl, #32
 80086c2:	f38a 8811 	msr	BASEPRI, sl
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80086c6:	2008      	movs	r0, #8
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7fa fbd1 	bl	8002e70 <chSchGoSleepTimeoutS>
 80086ce:	2700      	movs	r7, #0
 80086d0:	f387 8811 	msr	BASEPRI, r7
 80086d4:	f38a 8811 	msr	BASEPRI, sl
 80086d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80086dc:	f8d3 b024 	ldr.w	fp, [r3, #36]	@ 0x24
 80086e0:	f387 8811 	msr	BASEPRI, r7
    end = chTimeAddX(start, TIME_MS2I(1000));
 80086e4:	4c79      	ldr	r4, [pc, #484]	@ (80088cc <rt_test_010_007_execute.lto_priv.0+0x28c>)
  sp->cnt = n;
 80086e6:	463d      	mov	r5, r7
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80086e8:	f06f 0601 	mvn.w	r6, #1
 80086ec:	f38a 8811 	msr	BASEPRI, sl
  cnt = sp->cnt;
 80086f0:	68a3      	ldr	r3, [r4, #8]
  sp->cnt = n;
 80086f2:	60a5      	str	r5, [r4, #8]
  while (++cnt <= (cnt_t)0) {
 80086f4:	f103 0e01 	add.w	lr, r3, #1
 80086f8:	f1be 0f00 	cmp.w	lr, #0
 80086fc:	dc24      	bgt.n	8008748 <rt_test_010_007_execute.lto_priv.0+0x108>
 80086fe:	f8d4 c004 	ldr.w	ip, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
 8008702:	4b69      	ldr	r3, [pc, #420]	@ (80088a8 <rt_test_010_007_execute.lto_priv.0+0x268>)
 8008704:	4660      	mov	r0, ip
  tqp->prev             = tp->queue.prev;
 8008706:	f8dc c004 	ldr.w	ip, [ip, #4]
  } while (cp->prio >= tp->prio);
 800870a:	6881      	ldr	r1, [r0, #8]
  tqp->prev->queue.next = (thread_t *)tqp;
 800870c:	f8cc 4000 	str.w	r4, [ip]
  tp->state = CH_STATE_READY;
 8008710:	f880 5020 	strb.w	r5, [r0, #32]
    cp = cp->queue.next;
 8008714:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	428a      	cmp	r2, r1
 800871a:	d2fb      	bcs.n	8008714 <rt_test_010_007_execute.lto_priv.0+0xd4>
  tp->queue.prev             = cp->queue.prev;
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	f10e 0e01 	add.w	lr, lr, #1
 8008722:	f1be 0f01 	cmp.w	lr, #1
 8008726:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800872a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800872c:	6058      	str	r0, [r3, #4]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 800872e:	6246      	str	r6, [r0, #36]	@ 0x24
  while (++cnt <= (cnt_t)0) {
 8008730:	d1e7      	bne.n	8008702 <rt_test_010_007_execute.lto_priv.0+0xc2>
 8008732:	f8c4 c004 	str.w	ip, [r4, #4]
 8008736:	f8cc 4000 	str.w	r4, [ip]
 800873a:	e9c0 3200 	strd	r3, r2, [r0]
 800873e:	f880 5020 	strb.w	r5, [r0, #32]
 8008742:	6010      	str	r0, [r2, #0]
 8008744:	6058      	str	r0, [r3, #4]
 8008746:	6246      	str	r6, [r0, #36]	@ 0x24
  return firstprio(&ch.rlist.queue) > currp->prio;
 8008748:	f8d8 2000 	ldr.w	r2, [r8]
 800874c:	f8d8 3018 	ldr.w	r3, [r8, #24]
  if (chSchIsRescRequiredI()) {
 8008750:	6892      	ldr	r2, [r2, #8]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	429a      	cmp	r2, r3
 8008756:	f200 8096 	bhi.w	8008886 <rt_test_010_007_execute.lto_priv.0+0x246>
 800875a:	f385 8811 	msr	BASEPRI, r5
 800875e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008762:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008768:	eba3 030b 	sub.w	r3, r3, fp
 800876c:	4293      	cmp	r3, r2
      n++;
 800876e:	f107 0701 	add.w	r7, r7, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008772:	d9bb      	bls.n	80086ec <rt_test_010_007_execute.lto_priv.0+0xac>
  test_set_step(3);
 8008774:	4e50      	ldr	r6, [pc, #320]	@ (80088b8 <rt_test_010_007_execute.lto_priv.0+0x278>)
 8008776:	2303      	movs	r3, #3
 8008778:	f8c9 3000 	str.w	r3, [r9]
 800877c:	2520      	movs	r5, #32
 800877e:	f106 0a14 	add.w	sl, r6, #20
 8008782:	4633      	mov	r3, r6
 8008784:	2000      	movs	r0, #0
    if (threads[i])
 8008786:	f853 2b04 	ldr.w	r2, [r3], #4
 800878a:	b14a      	cbz	r2, 80087a0 <rt_test_010_007_execute.lto_priv.0+0x160>
 800878c:	f385 8811 	msr	BASEPRI, r5
  tp->flags |= CH_FLAG_TERMINATE;
 8008790:	f892 1021 	ldrb.w	r1, [r2, #33]	@ 0x21
 8008794:	f041 0104 	orr.w	r1, r1, #4
 8008798:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 800879c:	f380 8811 	msr	BASEPRI, r0
  for (i = 0; i < MAX_THREADS; i++)
 80087a0:	459a      	cmp	sl, r3
 80087a2:	d1f0      	bne.n	8008786 <rt_test_010_007_execute.lto_priv.0+0x146>
 80087a4:	2320      	movs	r3, #32
 80087a6:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 80087aa:	68a3      	ldr	r3, [r4, #8]
  sp->cnt = n;
 80087ac:	f04f 0b00 	mov.w	fp, #0
  while (++cnt <= (cnt_t)0) {
 80087b0:	f103 0c01 	add.w	ip, r3, #1
 80087b4:	45dc      	cmp	ip, fp
  sp->cnt = n;
 80087b6:	f8c4 b008 	str.w	fp, [r4, #8]
  while (++cnt <= (cnt_t)0) {
 80087ba:	dc24      	bgt.n	8008806 <rt_test_010_007_execute.lto_priv.0+0x1c6>
 80087bc:	6865      	ldr	r5, [r4, #4]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80087be:	f06f 0e01 	mvn.w	lr, #1
  tqp->prev             = tp->queue.prev;
 80087c2:	4628      	mov	r0, r5
 80087c4:	686d      	ldr	r5, [r5, #4]
  cp = (thread_t *)&ch.rlist.queue;
 80087c6:	4b38      	ldr	r3, [pc, #224]	@ (80088a8 <rt_test_010_007_execute.lto_priv.0+0x268>)
  } while (cp->prio >= tp->prio);
 80087c8:	6881      	ldr	r1, [r0, #8]
  tqp->prev->queue.next = (thread_t *)tqp;
 80087ca:	602c      	str	r4, [r5, #0]
  tp->state = CH_STATE_READY;
 80087cc:	f880 b020 	strb.w	fp, [r0, #32]
    cp = cp->queue.next;
 80087d0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	428a      	cmp	r2, r1
 80087d6:	d2fb      	bcs.n	80087d0 <rt_test_010_007_execute.lto_priv.0+0x190>
  tp->queue.prev             = cp->queue.prev;
 80087d8:	685a      	ldr	r2, [r3, #4]
  while (++cnt <= (cnt_t)0) {
 80087da:	f10c 0c01 	add.w	ip, ip, #1
 80087de:	f1bc 0f01 	cmp.w	ip, #1
 80087e2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80087e6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80087e8:	6058      	str	r0, [r3, #4]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 80087ea:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
  while (++cnt <= (cnt_t)0) {
 80087ee:	d1e8      	bne.n	80087c2 <rt_test_010_007_execute.lto_priv.0+0x182>
 80087f0:	2100      	movs	r1, #0
 80087f2:	6065      	str	r5, [r4, #4]
 80087f4:	602c      	str	r4, [r5, #0]
 80087f6:	e9c0 3200 	strd	r3, r2, [r0]
 80087fa:	f880 1020 	strb.w	r1, [r0, #32]
 80087fe:	6010      	str	r0, [r2, #0]
 8008800:	6058      	str	r0, [r3, #4]
 8008802:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
  return firstprio(&ch.rlist.queue) > currp->prio;
 8008806:	f8d8 2000 	ldr.w	r2, [r8]
 800880a:	f8d8 3018 	ldr.w	r3, [r8, #24]
  if (chSchIsRescRequiredI()) {
 800880e:	6892      	ldr	r2, [r2, #8]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	429a      	cmp	r2, r3
 8008814:	d845      	bhi.n	80088a2 <rt_test_010_007_execute.lto_priv.0+0x262>
 8008816:	2400      	movs	r4, #0
 8008818:	f384 8811 	msr	BASEPRI, r4
    if (threads[i] != NULL) {
 800881c:	f856 0b04 	ldr.w	r0, [r6], #4
 8008820:	b118      	cbz	r0, 800882a <rt_test_010_007_execute.lto_priv.0+0x1ea>
      chThdWait(threads[i]);
 8008822:	f002 fc35 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 8008826:	f846 4c04 	str.w	r4, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800882a:	45b2      	cmp	sl, r6
 800882c:	d1f6      	bne.n	800881c <rt_test_010_007_execute.lto_priv.0+0x1dc>
  test_set_step(4);
 800882e:	2304      	movs	r3, #4
 8008830:	4d27      	ldr	r5, [pc, #156]	@ (80088d0 <rt_test_010_007_execute.lto_priv.0+0x290>)
 8008832:	4c28      	ldr	r4, [pc, #160]	@ (80088d4 <rt_test_010_007_execute.lto_priv.0+0x294>)
 8008834:	f8c9 3000 	str.w	r3, [r9]
  while (*msgp)
 8008838:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800883a:	6820      	ldr	r0, [r4, #0]
 800883c:	6803      	ldr	r3, [r0, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	4798      	blx	r3
  while (*msgp)
 8008842:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008846:	2900      	cmp	r1, #0
 8008848:	d1f7      	bne.n	800883a <rt_test_010_007_execute.lto_priv.0+0x1fa>
  if (!n)
 800884a:	b9ff      	cbnz	r7, 800888c <rt_test_010_007_execute.lto_priv.0+0x24c>
    streamPut(test_chp, '0');
 800884c:	6820      	ldr	r0, [r4, #0]
 800884e:	6803      	ldr	r3, [r0, #0]
 8008850:	2130      	movs	r1, #48	@ 0x30
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	4798      	blx	r3
  while (*msgp)
 8008856:	4d20      	ldr	r5, [pc, #128]	@ (80088d8 <rt_test_010_007_execute.lto_priv.0+0x298>)
 8008858:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800885a:	6820      	ldr	r0, [r4, #0]
 800885c:	6803      	ldr	r3, [r0, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	4798      	blx	r3
  while (*msgp)
 8008862:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008866:	2900      	cmp	r1, #0
 8008868:	d1f7      	bne.n	800885a <rt_test_010_007_execute.lto_priv.0+0x21a>
    test_printn(n * 6);
 800886a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  if (!n)
 800886e:	0078      	lsls	r0, r7, #1
 8008870:	d110      	bne.n	8008894 <rt_test_010_007_execute.lto_priv.0+0x254>
    streamPut(test_chp, '0');
 8008872:	6820      	ldr	r0, [r4, #0]
 8008874:	6803      	ldr	r3, [r0, #0]
 8008876:	2130      	movs	r1, #48	@ 0x30
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	4798      	blx	r3
}
 800887c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" ctxswc/S");
 8008880:	4816      	ldr	r0, [pc, #88]	@ (80088dc <rt_test_010_007_execute.lto_priv.0+0x29c>)
 8008882:	f7fe bf75 	b.w	8007770 <test_println>
    chSchDoRescheduleAhead();
 8008886:	f7fb fb63 	bl	8003f50 <chSchDoReschedule>
 800888a:	e766      	b.n	800875a <rt_test_010_007_execute.lto_priv.0+0x11a>
 800888c:	4638      	mov	r0, r7
 800888e:	f7fe ff8f 	bl	80077b0 <test_printn.part.0>
 8008892:	e7e0      	b.n	8008856 <rt_test_010_007_execute.lto_priv.0+0x216>
 8008894:	f7fe ff8c 	bl	80077b0 <test_printn.part.0>
}
 8008898:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" ctxswc/S");
 800889c:	480f      	ldr	r0, [pc, #60]	@ (80088dc <rt_test_010_007_execute.lto_priv.0+0x29c>)
 800889e:	f7fe bf67 	b.w	8007770 <test_println>
 80088a2:	f7fb fb55 	bl	8003f50 <chSchDoReschedule>
 80088a6:	e7b6      	b.n	8008816 <rt_test_010_007_execute.lto_priv.0+0x1d6>
 80088a8:	200011c0 	.word	0x200011c0
 80088ac:	200010b4 	.word	0x200010b4
 80088b0:	080019c1 	.word	0x080019c1
 80088b4:	20000a08 	.word	0x20000a08
 80088b8:	200010a0 	.word	0x200010a0
 80088bc:	20000b50 	.word	0x20000b50
 80088c0:	20000c98 	.word	0x20000c98
 80088c4:	20000de0 	.word	0x20000de0
 80088c8:	20000f28 	.word	0x20000f28
 80088cc:	200009e8 	.word	0x200009e8
 80088d0:	0800c10c 	.word	0x0800c10c
 80088d4:	200010d4 	.word	0x200010d4
 80088d8:	0800c140 	.word	0x0800c140
 80088dc:	0800c128 	.word	0x0800c128

080088e0 <rt_test_010_008_execute.lto_priv.0>:
static void rt_test_010_008_execute(void) {
 80088e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80088e4:	4e46      	ldr	r6, [pc, #280]	@ (8008a00 <rt_test_010_008_execute.lto_priv.0+0x120>)
static void rt_test_010_008_execute(void) {
 80088e6:	b082      	sub	sp, #8
  test_set_step(1);
 80088e8:	2101      	movs	r1, #1
    n = 0;
 80088ea:	2700      	movs	r7, #0
  test_set_step(1);
 80088ec:	6031      	str	r1, [r6, #0]
    n = 0;
 80088ee:	9701      	str	r7, [sp, #4]
 80088f0:	f04f 0820 	mov.w	r8, #32
 80088f4:	f388 8811 	msr	BASEPRI, r8
 80088f8:	2008      	movs	r0, #8
 80088fa:	f7fa fab9 	bl	8002e70 <chSchGoSleepTimeoutS>
 80088fe:	f387 8811 	msr	BASEPRI, r7
 8008902:	f388 8811 	msr	BASEPRI, r8
 8008906:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800890a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890c:	f387 8811 	msr	BASEPRI, r7
  return ch.rlist.current;
 8008910:	4d3c      	ldr	r5, [pc, #240]	@ (8008a04 <rt_test_010_008_execute.lto_priv.0+0x124>)
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008912:	4a3d      	ldr	r2, [pc, #244]	@ (8008a08 <rt_test_010_008_execute.lto_priv.0+0x128>)
  return chThdGetSelfX()->prio;
 8008914:	69ab      	ldr	r3, [r5, #24]
 8008916:	483d      	ldr	r0, [pc, #244]	@ (8008a0c <rt_test_010_008_execute.lto_priv.0+0x12c>)
 8008918:	6899      	ldr	r1, [r3, #8]
 800891a:	4c3d      	ldr	r4, [pc, #244]	@ (8008a10 <rt_test_010_008_execute.lto_priv.0+0x130>)
 800891c:	ab01      	add	r3, sp, #4
 800891e:	3901      	subs	r1, #1
 8008920:	f002 f90e 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8008924:	69ab      	ldr	r3, [r5, #24]
 8008926:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008928:	6899      	ldr	r1, [r3, #8]
 800892a:	4a37      	ldr	r2, [pc, #220]	@ (8008a08 <rt_test_010_008_execute.lto_priv.0+0x128>)
 800892c:	4839      	ldr	r0, [pc, #228]	@ (8008a14 <rt_test_010_008_execute.lto_priv.0+0x134>)
 800892e:	ab01      	add	r3, sp, #4
 8008930:	3901      	subs	r1, #1
 8008932:	f002 f905 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8008936:	69ab      	ldr	r3, [r5, #24]
 8008938:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800893a:	6899      	ldr	r1, [r3, #8]
 800893c:	4a32      	ldr	r2, [pc, #200]	@ (8008a08 <rt_test_010_008_execute.lto_priv.0+0x128>)
 800893e:	4836      	ldr	r0, [pc, #216]	@ (8008a18 <rt_test_010_008_execute.lto_priv.0+0x138>)
 8008940:	ab01      	add	r3, sp, #4
 8008942:	3901      	subs	r1, #1
 8008944:	f002 f8fc 	bl	800ab40 <chThdCreateStatic.constprop.0>
 8008948:	69ab      	ldr	r3, [r5, #24]
 800894a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800894c:	6899      	ldr	r1, [r3, #8]
 800894e:	4a2e      	ldr	r2, [pc, #184]	@ (8008a08 <rt_test_010_008_execute.lto_priv.0+0x128>)
 8008950:	4832      	ldr	r0, [pc, #200]	@ (8008a1c <rt_test_010_008_execute.lto_priv.0+0x13c>)
 8008952:	ab01      	add	r3, sp, #4
 8008954:	3901      	subs	r1, #1
 8008956:	f002 f8f3 	bl	800ab40 <chThdCreateStatic.constprop.0>
 800895a:	69aa      	ldr	r2, [r5, #24]
 800895c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800895e:	6891      	ldr	r1, [r2, #8]
 8008960:	482f      	ldr	r0, [pc, #188]	@ (8008a20 <rt_test_010_008_execute.lto_priv.0+0x140>)
 8008962:	4a29      	ldr	r2, [pc, #164]	@ (8008a08 <rt_test_010_008_execute.lto_priv.0+0x128>)
 8008964:	ab01      	add	r3, sp, #4
 8008966:	3901      	subs	r1, #1
 8008968:	f002 f8ea 	bl	800ab40 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800896c:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800896e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8008970:	6033      	str	r3, [r6, #0]
 8008972:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008976:	f242 7110 	movw	r1, #10000	@ 0x2710
 800897a:	2008      	movs	r0, #8
 800897c:	f7fa fa78 	bl	8002e70 <chSchGoSleepTimeoutS>
 8008980:	f387 8811 	msr	BASEPRI, r7
  for (i = 0; i < MAX_THREADS; i++)
 8008984:	f104 0514 	add.w	r5, r4, #20
 8008988:	4623      	mov	r3, r4
    if (threads[i])
 800898a:	f853 2b04 	ldr.w	r2, [r3], #4
 800898e:	b14a      	cbz	r2, 80089a4 <rt_test_010_008_execute.lto_priv.0+0xc4>
 8008990:	f388 8811 	msr	BASEPRI, r8
 8008994:	f892 1021 	ldrb.w	r1, [r2, #33]	@ 0x21
 8008998:	f041 0104 	orr.w	r1, r1, #4
 800899c:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 80089a0:	f387 8811 	msr	BASEPRI, r7
  for (i = 0; i < MAX_THREADS; i++)
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	d1f0      	bne.n	800898a <rt_test_010_008_execute.lto_priv.0+0xaa>
      threads[i] = NULL;
 80089a8:	2700      	movs	r7, #0
    if (threads[i] != NULL) {
 80089aa:	f854 0b04 	ldr.w	r0, [r4], #4
 80089ae:	b118      	cbz	r0, 80089b8 <rt_test_010_008_execute.lto_priv.0+0xd8>
      chThdWait(threads[i]);
 80089b0:	f002 fb6e 	bl	800b090 <chThdWait.isra.0>
      threads[i] = NULL;
 80089b4:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80089b8:	42ac      	cmp	r4, r5
 80089ba:	d1f6      	bne.n	80089aa <rt_test_010_008_execute.lto_priv.0+0xca>
  test_set_step(3);
 80089bc:	2303      	movs	r3, #3
 80089be:	4c19      	ldr	r4, [pc, #100]	@ (8008a24 <rt_test_010_008_execute.lto_priv.0+0x144>)
 80089c0:	4d19      	ldr	r5, [pc, #100]	@ (8008a28 <rt_test_010_008_execute.lto_priv.0+0x148>)
 80089c2:	6033      	str	r3, [r6, #0]
  while (*msgp)
 80089c4:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 80089c6:	6828      	ldr	r0, [r5, #0]
 80089c8:	6803      	ldr	r3, [r0, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	4798      	blx	r3
  while (*msgp)
 80089ce:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80089d2:	2900      	cmp	r1, #0
 80089d4:	d1f7      	bne.n	80089c6 <rt_test_010_008_execute.lto_priv.0+0xe6>
    test_printn(n);
 80089d6:	9801      	ldr	r0, [sp, #4]
  if (!n)
 80089d8:	b950      	cbnz	r0, 80089f0 <rt_test_010_008_execute.lto_priv.0+0x110>
    streamPut(test_chp, '0');
 80089da:	6828      	ldr	r0, [r5, #0]
 80089dc:	6803      	ldr	r3, [r0, #0]
 80089de:	2130      	movs	r1, #48	@ 0x30
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	4798      	blx	r3
    test_println(" ctxswc/S");
 80089e4:	4811      	ldr	r0, [pc, #68]	@ (8008a2c <rt_test_010_008_execute.lto_priv.0+0x14c>)
 80089e6:	f7fe fec3 	bl	8007770 <test_println>
}
 80089ea:	b002      	add	sp, #8
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	f7fe fede 	bl	80077b0 <test_printn.part.0>
    test_println(" ctxswc/S");
 80089f4:	480d      	ldr	r0, [pc, #52]	@ (8008a2c <rt_test_010_008_execute.lto_priv.0+0x14c>)
 80089f6:	f7fe febb 	bl	8007770 <test_println>
}
 80089fa:	b002      	add	sp, #8
 80089fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a00:	200010b4 	.word	0x200010b4
 8008a04:	200011c0 	.word	0x200011c0
 8008a08:	08001651 	.word	0x08001651
 8008a0c:	20000a08 	.word	0x20000a08
 8008a10:	200010a0 	.word	0x200010a0
 8008a14:	20000b50 	.word	0x20000b50
 8008a18:	20000c98 	.word	0x20000c98
 8008a1c:	20000de0 	.word	0x20000de0
 8008a20:	20000f28 	.word	0x20000f28
 8008a24:	0800c10c 	.word	0x0800c10c
 8008a28:	200010d4 	.word	0x200010d4
 8008a2c:	0800c128 	.word	0x0800c128

08008a30 <rt_test_010_009_execute.lto_priv.0>:
static void rt_test_010_009_execute(void) {
 8008a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8008a34:	f8df b0b8 	ldr.w	fp, [pc, #184]	@ 8008af0 <rt_test_010_009_execute.lto_priv.0+0xc0>
 8008a38:	2101      	movs	r1, #1
 8008a3a:	f8cb 1000 	str.w	r1, [fp]
 8008a3e:	f04f 0820 	mov.w	r8, #32
 8008a42:	f388 8811 	msr	BASEPRI, r8
 8008a46:	2008      	movs	r0, #8
 8008a48:	f7fa fa12 	bl	8002e70 <chSchGoSleepTimeoutS>
 8008a4c:	2400      	movs	r4, #0
 8008a4e:	f384 8811 	msr	BASEPRI, r4
 8008a52:	f388 8811 	msr	BASEPRI, r8
 8008a56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a5a:	f8d3 a024 	ldr.w	sl, [r3, #36]	@ 0x24
 8008a5e:	f384 8811 	msr	BASEPRI, r4
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8008a62:	4f24      	ldr	r7, [pc, #144]	@ (8008af4 <rt_test_010_009_execute.lto_priv.0+0xc4>)
 8008a64:	4e24      	ldr	r6, [pc, #144]	@ (8008af8 <rt_test_010_009_execute.lto_priv.0+0xc8>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008a66:	4d25      	ldr	r5, [pc, #148]	@ (8008afc <rt_test_010_009_execute.lto_priv.0+0xcc>)
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8008a68:	46a1      	mov	r9, r4
 8008a6a:	f388 8811 	msr	BASEPRI, r8
 8008a6e:	2300      	movs	r3, #0
 8008a70:	463a      	mov	r2, r7
 8008a72:	4630      	mov	r0, r6
 8008a74:	2101      	movs	r1, #1
 8008a76:	f7f9 ff1b 	bl	80028b0 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8008a80:	463a      	mov	r2, r7
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7f9 ff14 	bl	80028b0 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7f9 ff59 	bl	8002940 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f7f9 ff56 	bl	8002940 <chVTDoResetI>
 8008a94:	f389 8811 	msr	BASEPRI, r9
 8008a98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008a9c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa2:	eba3 030a 	sub.w	r3, r3, sl
 8008aa6:	4293      	cmp	r3, r2
      n++;
 8008aa8:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008aac:	d9dd      	bls.n	8008a6a <rt_test_010_009_execute.lto_priv.0+0x3a>
  test_set_step(2);
 8008aae:	2302      	movs	r3, #2
 8008ab0:	4d13      	ldr	r5, [pc, #76]	@ (8008b00 <rt_test_010_009_execute.lto_priv.0+0xd0>)
 8008ab2:	4e14      	ldr	r6, [pc, #80]	@ (8008b04 <rt_test_010_009_execute.lto_priv.0+0xd4>)
 8008ab4:	f8cb 3000 	str.w	r3, [fp]
  while (*msgp)
 8008ab8:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008aba:	6830      	ldr	r0, [r6, #0]
 8008abc:	6803      	ldr	r3, [r0, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	4798      	blx	r3
  while (*msgp)
 8008ac2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	d1f7      	bne.n	8008aba <rt_test_010_009_execute.lto_priv.0+0x8a>
  if (!n)
 8008aca:	0060      	lsls	r0, r4, #1
 8008acc:	d109      	bne.n	8008ae2 <rt_test_010_009_execute.lto_priv.0+0xb2>
    streamPut(test_chp, '0');
 8008ace:	6830      	ldr	r0, [r6, #0]
 8008ad0:	6803      	ldr	r3, [r0, #0]
 8008ad2:	2130      	movs	r1, #48	@ 0x30
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	4798      	blx	r3
}
 8008ad8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 8008adc:	480a      	ldr	r0, [pc, #40]	@ (8008b08 <rt_test_010_009_execute.lto_priv.0+0xd8>)
 8008ade:	f7fe be47 	b.w	8007770 <test_println>
 8008ae2:	f7fe fe65 	bl	80077b0 <test_printn.part.0>
}
 8008ae6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 8008aea:	4807      	ldr	r0, [pc, #28]	@ (8008b08 <rt_test_010_009_execute.lto_priv.0+0xd8>)
 8008aec:	f7fe be40 	b.w	8007770 <test_println>
 8008af0:	200010b4 	.word	0x200010b4
 8008af4:	080011f1 	.word	0x080011f1
 8008af8:	200009d4 	.word	0x200009d4
 8008afc:	200009c0 	.word	0x200009c0
 8008b00:	0800c10c 	.word	0x0800c10c
 8008b04:	200010d4 	.word	0x200010d4
 8008b08:	0800c154 	.word	0x0800c154
 8008b0c:	00000000 	.word	0x00000000

08008b10 <rt_test_010_010_execute.lto_priv.0>:
static void rt_test_010_010_execute(void) {
 8008b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8008b14:	f8df a208 	ldr.w	sl, [pc, #520]	@ 8008d20 <rt_test_010_010_execute.lto_priv.0+0x210>
 8008b18:	2101      	movs	r1, #1
 8008b1a:	f8ca 1000 	str.w	r1, [sl]
 8008b1e:	2520      	movs	r5, #32
 8008b20:	f385 8811 	msr	BASEPRI, r5
 8008b24:	2008      	movs	r0, #8
 8008b26:	f7fa f9a3 	bl	8002e70 <chSchGoSleepTimeoutS>
 8008b2a:	f04f 0800 	mov.w	r8, #0
 8008b2e:	f388 8811 	msr	BASEPRI, r8
 8008b32:	f385 8811 	msr	BASEPRI, r5
 8008b36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b3a:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
 8008b3e:	f388 8811 	msr	BASEPRI, r8
    end = chTimeAddX(start, TIME_MS2I(1000));
 8008b42:	4c78      	ldr	r4, [pc, #480]	@ (8008d24 <rt_test_010_010_execute.lto_priv.0+0x214>)
    currp->u.wtsemp = sp;
 8008b44:	4f78      	ldr	r7, [pc, #480]	@ (8008d28 <rt_test_010_010_execute.lto_priv.0+0x218>)
 8008b46:	4646      	mov	r6, r8
 8008b48:	e044      	b.n	8008bd4 <rt_test_010_010_execute.lto_priv.0+0xc4>
 8008b4a:	f386 8811 	msr	BASEPRI, r6
 8008b4e:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	60a3      	str	r3, [r4, #8]
 8008b5a:	db6b      	blt.n	8008c34 <rt_test_010_010_execute.lto_priv.0+0x124>
 8008b5c:	f386 8811 	msr	BASEPRI, r6
 8008b60:	f385 8811 	msr	BASEPRI, r5
  if (++sp->cnt <= (cnt_t)0) {
 8008b64:	68a3      	ldr	r3, [r4, #8]
 8008b66:	3301      	adds	r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	60a3      	str	r3, [r4, #8]
 8008b6c:	dd5a      	ble.n	8008c24 <rt_test_010_010_execute.lto_priv.0+0x114>
 8008b6e:	f386 8811 	msr	BASEPRI, r6
 8008b72:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	60a3      	str	r3, [r4, #8]
 8008b7e:	f2c0 8098 	blt.w	8008cb2 <rt_test_010_010_execute.lto_priv.0+0x1a2>
 8008b82:	f386 8811 	msr	BASEPRI, r6
 8008b86:	f385 8811 	msr	BASEPRI, r5
  if (++sp->cnt <= (cnt_t)0) {
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	60a3      	str	r3, [r4, #8]
 8008b92:	dd3f      	ble.n	8008c14 <rt_test_010_010_execute.lto_priv.0+0x104>
 8008b94:	f386 8811 	msr	BASEPRI, r6
 8008b98:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 8008b9c:	68a3      	ldr	r3, [r4, #8]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	60a3      	str	r3, [r4, #8]
 8008ba4:	db70      	blt.n	8008c88 <rt_test_010_010_execute.lto_priv.0+0x178>
 8008ba6:	f386 8811 	msr	BASEPRI, r6
 8008baa:	f385 8811 	msr	BASEPRI, r5
  if (++sp->cnt <= (cnt_t)0) {
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	60a3      	str	r3, [r4, #8]
 8008bb6:	dd25      	ble.n	8008c04 <rt_test_010_010_execute.lto_priv.0+0xf4>
 8008bb8:	f386 8811 	msr	BASEPRI, r6
 8008bbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008bc0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc6:	eba3 0309 	sub.w	r3, r3, r9
 8008bca:	4293      	cmp	r3, r2
      n++;
 8008bcc:	f108 0801 	add.w	r8, r8, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008bd0:	f200 8084 	bhi.w	8008cdc <rt_test_010_010_execute.lto_priv.0+0x1cc>
 8008bd4:	f385 8811 	msr	BASEPRI, r5
  if (--sp->cnt < (cnt_t)0) {
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	60a3      	str	r3, [r4, #8]
 8008be0:	db3d      	blt.n	8008c5e <rt_test_010_010_execute.lto_priv.0+0x14e>
 8008be2:	f386 8811 	msr	BASEPRI, r6
 8008be6:	f385 8811 	msr	BASEPRI, r5
  if (++sp->cnt <= (cnt_t)0) {
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	3301      	adds	r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	60a3      	str	r3, [r4, #8]
 8008bf2:	dcaa      	bgt.n	8008b4a <rt_test_010_010_execute.lto_priv.0+0x3a>
  thread_t *tp = tqp->next;
 8008bf4:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008bf6:	6803      	ldr	r3, [r0, #0]
 8008bf8:	6023      	str	r3, [r4, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8008bfa:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8008bfc:	605c      	str	r4, [r3, #4]
 8008bfe:	f7fa ff47 	bl	8003a90 <chSchWakeupS>
 8008c02:	e7a2      	b.n	8008b4a <rt_test_010_010_execute.lto_priv.0+0x3a>
  thread_t *tp = tqp->next;
 8008c04:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008c06:	6803      	ldr	r3, [r0, #0]
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8008c0c:	605c      	str	r4, [r3, #4]
 8008c0e:	f7fa ff3f 	bl	8003a90 <chSchWakeupS>
 8008c12:	e7d1      	b.n	8008bb8 <rt_test_010_010_execute.lto_priv.0+0xa8>
  thread_t *tp = tqp->next;
 8008c14:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008c16:	6803      	ldr	r3, [r0, #0]
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8008c1c:	605c      	str	r4, [r3, #4]
 8008c1e:	f7fa ff37 	bl	8003a90 <chSchWakeupS>
 8008c22:	e7b7      	b.n	8008b94 <rt_test_010_010_execute.lto_priv.0+0x84>
  thread_t *tp = tqp->next;
 8008c24:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8008c26:	6803      	ldr	r3, [r0, #0]
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8008c2c:	605c      	str	r4, [r3, #4]
 8008c2e:	f7fa ff2f 	bl	8003a90 <chSchWakeupS>
 8008c32:	e79c      	b.n	8008b6e <rt_test_010_010_execute.lto_priv.0+0x5e>
    currp->u.wtsemp = sp;
 8008c34:	69b9      	ldr	r1, [r7, #24]
  tp->queue.prev             = tqp->prev;
 8008c36:	6863      	ldr	r3, [r4, #4]
  tp->queue.next             = (thread_t *)tqp;
 8008c38:	600c      	str	r4, [r1, #0]
  tp->queue.prev             = tqp->prev;
 8008c3a:	604b      	str	r3, [r1, #4]
 8008c3c:	624c      	str	r4, [r1, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 8008c3e:	6019      	str	r1, [r3, #0]
  thread_t *tp = tqp->next;
 8008c40:	6838      	ldr	r0, [r7, #0]
  tqp->prev                  = tp;
 8008c42:	6061      	str	r1, [r4, #4]
  otp->state = newstate;
 8008c44:	2305      	movs	r3, #5
 8008c46:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	603b      	str	r3, [r7, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008c4e:	605f      	str	r7, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8008c50:	2301      	movs	r3, #1
 8008c52:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8008c56:	61b8      	str	r0, [r7, #24]
  chSysSwitch(currp, otp);
 8008c58:	f7f7 fb32 	bl	80002c0 <_port_switch>
    return currp->u.rdymsg;
 8008c5c:	e77e      	b.n	8008b5c <rt_test_010_010_execute.lto_priv.0+0x4c>
    currp->u.wtsemp = sp;
 8008c5e:	69b9      	ldr	r1, [r7, #24]
  tp->queue.prev             = tqp->prev;
 8008c60:	6863      	ldr	r3, [r4, #4]
  tp->queue.next             = (thread_t *)tqp;
 8008c62:	600c      	str	r4, [r1, #0]
  tp->queue.prev             = tqp->prev;
 8008c64:	604b      	str	r3, [r1, #4]
 8008c66:	624c      	str	r4, [r1, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 8008c68:	6019      	str	r1, [r3, #0]
  thread_t *tp = tqp->next;
 8008c6a:	6838      	ldr	r0, [r7, #0]
  tqp->prev                  = tp;
 8008c6c:	6061      	str	r1, [r4, #4]
  otp->state = newstate;
 8008c6e:	2305      	movs	r3, #5
 8008c70:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8008c74:	6803      	ldr	r3, [r0, #0]
 8008c76:	603b      	str	r3, [r7, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008c78:	605f      	str	r7, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8008c80:	61b8      	str	r0, [r7, #24]
  chSysSwitch(currp, otp);
 8008c82:	f7f7 fb1d 	bl	80002c0 <_port_switch>
    return currp->u.rdymsg;
 8008c86:	e7ac      	b.n	8008be2 <rt_test_010_010_execute.lto_priv.0+0xd2>
    currp->u.wtsemp = sp;
 8008c88:	69b9      	ldr	r1, [r7, #24]
  tp->queue.prev             = tqp->prev;
 8008c8a:	6863      	ldr	r3, [r4, #4]
  tp->queue.next             = (thread_t *)tqp;
 8008c8c:	600c      	str	r4, [r1, #0]
  tp->queue.prev             = tqp->prev;
 8008c8e:	604b      	str	r3, [r1, #4]
 8008c90:	624c      	str	r4, [r1, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 8008c92:	6019      	str	r1, [r3, #0]
  thread_t *tp = tqp->next;
 8008c94:	6838      	ldr	r0, [r7, #0]
  tqp->prev                  = tp;
 8008c96:	6061      	str	r1, [r4, #4]
  otp->state = newstate;
 8008c98:	2305      	movs	r3, #5
 8008c9a:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8008c9e:	6803      	ldr	r3, [r0, #0]
 8008ca0:	603b      	str	r3, [r7, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008ca2:	605f      	str	r7, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8008caa:	61b8      	str	r0, [r7, #24]
  chSysSwitch(currp, otp);
 8008cac:	f7f7 fb08 	bl	80002c0 <_port_switch>
    return currp->u.rdymsg;
 8008cb0:	e779      	b.n	8008ba6 <rt_test_010_010_execute.lto_priv.0+0x96>
    currp->u.wtsemp = sp;
 8008cb2:	69b9      	ldr	r1, [r7, #24]
  tp->queue.prev             = tqp->prev;
 8008cb4:	6863      	ldr	r3, [r4, #4]
  tp->queue.next             = (thread_t *)tqp;
 8008cb6:	600c      	str	r4, [r1, #0]
  tp->queue.prev             = tqp->prev;
 8008cb8:	604b      	str	r3, [r1, #4]
 8008cba:	624c      	str	r4, [r1, #36]	@ 0x24
  tp->queue.prev->queue.next = tp;
 8008cbc:	6019      	str	r1, [r3, #0]
  thread_t *tp = tqp->next;
 8008cbe:	6838      	ldr	r0, [r7, #0]
  tqp->prev                  = tp;
 8008cc0:	6061      	str	r1, [r4, #4]
  otp->state = newstate;
 8008cc2:	2305      	movs	r3, #5
 8008cc4:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 8008cc8:	6803      	ldr	r3, [r0, #0]
 8008cca:	603b      	str	r3, [r7, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008ccc:	605f      	str	r7, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8008cd4:	61b8      	str	r0, [r7, #24]
  chSysSwitch(currp, otp);
 8008cd6:	f7f7 faf3 	bl	80002c0 <_port_switch>
    return currp->u.rdymsg;
 8008cda:	e752      	b.n	8008b82 <rt_test_010_010_execute.lto_priv.0+0x72>
  test_set_step(2);
 8008cdc:	2302      	movs	r3, #2
 8008cde:	4c13      	ldr	r4, [pc, #76]	@ (8008d2c <rt_test_010_010_execute.lto_priv.0+0x21c>)
 8008ce0:	4d13      	ldr	r5, [pc, #76]	@ (8008d30 <rt_test_010_010_execute.lto_priv.0+0x220>)
 8008ce2:	f8ca 3000 	str.w	r3, [sl]
  while (*msgp)
 8008ce6:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008ce8:	6828      	ldr	r0, [r5, #0]
 8008cea:	6803      	ldr	r3, [r0, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	4798      	blx	r3
  while (*msgp)
 8008cf0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8008cf4:	2900      	cmp	r1, #0
 8008cf6:	d1f7      	bne.n	8008ce8 <rt_test_010_010_execute.lto_priv.0+0x1d8>
  if (!n)
 8008cf8:	ea5f 0088 	movs.w	r0, r8, lsl #2
 8008cfc:	d109      	bne.n	8008d12 <rt_test_010_010_execute.lto_priv.0+0x202>
    streamPut(test_chp, '0');
 8008cfe:	6828      	ldr	r0, [r5, #0]
 8008d00:	6803      	ldr	r3, [r0, #0]
 8008d02:	2130      	movs	r1, #48	@ 0x30
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	4798      	blx	r3
}
 8008d08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" wait+signal/S");
 8008d0c:	4809      	ldr	r0, [pc, #36]	@ (8008d34 <rt_test_010_010_execute.lto_priv.0+0x224>)
 8008d0e:	f7fe bd2f 	b.w	8007770 <test_println>
 8008d12:	f7fe fd4d 	bl	80077b0 <test_printn.part.0>
}
 8008d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" wait+signal/S");
 8008d1a:	4806      	ldr	r0, [pc, #24]	@ (8008d34 <rt_test_010_010_execute.lto_priv.0+0x224>)
 8008d1c:	f7fe bd28 	b.w	8007770 <test_println>
 8008d20:	200010b4 	.word	0x200010b4
 8008d24:	200009e8 	.word	0x200009e8
 8008d28:	200011c0 	.word	0x200011c0
 8008d2c:	0800c10c 	.word	0x0800c10c
 8008d30:	200010d4 	.word	0x200010d4
 8008d34:	0800c160 	.word	0x0800c160
	...

08008d40 <rt_test_010_011_execute.lto_priv.0>:

static void rt_test_010_011_execute(void) {
 8008d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t n;

  /* [10.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8008d44:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 8008e1c <rt_test_010_011_execute.lto_priv.0+0xdc>
 8008d48:	2101      	movs	r1, #1
 8008d4a:	f8c9 1000 	str.w	r1, [r9]
 8008d4e:	2520      	movs	r5, #32
 8008d50:	f385 8811 	msr	BASEPRI, r5
 8008d54:	2008      	movs	r0, #8
 8008d56:	f7fa f88b 	bl	8002e70 <chSchGoSleepTimeoutS>
 8008d5a:	2700      	movs	r7, #0
 8008d5c:	f387 8811 	msr	BASEPRI, r7
 8008d60:	f385 8811 	msr	BASEPRI, r5
 8008d64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d68:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8008d6c:	f387 8811 	msr	BASEPRI, r7
 8008d70:	4c2b      	ldr	r4, [pc, #172]	@ (8008e20 <rt_test_010_011_execute.lto_priv.0+0xe0>)
 8008d72:	463e      	mov	r6, r7
 8008d74:	f385 8811 	msr	BASEPRI, r5
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f7fc fa31 	bl	80051e0 <chMtxLockS>
 8008d7e:	f386 8811 	msr	BASEPRI, r6
    n = 0;
    start = test_wait_tick();
    end = chTimeAddX(start, TIME_MS2I(1000));
    do {
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008d82:	4620      	mov	r0, r4
 8008d84:	f7fc facc 	bl	8005320 <chMtxUnlock>
 8008d88:	f385 8811 	msr	BASEPRI, r5
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7fc fa27 	bl	80051e0 <chMtxLockS>
 8008d92:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008d96:	4620      	mov	r0, r4
 8008d98:	f7fc fac2 	bl	8005320 <chMtxUnlock>
 8008d9c:	f385 8811 	msr	BASEPRI, r5
 8008da0:	4620      	mov	r0, r4
 8008da2:	f7fc fa1d 	bl	80051e0 <chMtxLockS>
 8008da6:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008daa:	4620      	mov	r0, r4
 8008dac:	f7fc fab8 	bl	8005320 <chMtxUnlock>
 8008db0:	f385 8811 	msr	BASEPRI, r5
 8008db4:	4620      	mov	r0, r4
 8008db6:	f7fc fa13 	bl	80051e0 <chMtxLockS>
 8008dba:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f7fc faae 	bl	8005320 <chMtxUnlock>
 8008dc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8008dc8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dce:	eba3 0308 	sub.w	r3, r3, r8
 8008dd2:	4293      	cmp	r3, r2
      n++;
 8008dd4:	f107 0701 	add.w	r7, r7, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008dd8:	d9cc      	bls.n	8008d74 <rt_test_010_011_execute.lto_priv.0+0x34>
  }

  /* [10.11.2] The score is printed.*/
  test_set_step(2);
 8008dda:	2302      	movs	r3, #2
 8008ddc:	4c11      	ldr	r4, [pc, #68]	@ (8008e24 <rt_test_010_011_execute.lto_priv.0+0xe4>)
 8008dde:	4d12      	ldr	r5, [pc, #72]	@ (8008e28 <rt_test_010_011_execute.lto_priv.0+0xe8>)
 8008de0:	f8c9 3000 	str.w	r3, [r9]
  while (*msgp)
 8008de4:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008de6:	6828      	ldr	r0, [r5, #0]
 8008de8:	6803      	ldr	r3, [r0, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	4798      	blx	r3
  while (*msgp)
 8008dee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8008df2:	2900      	cmp	r1, #0
 8008df4:	d1f7      	bne.n	8008de6 <rt_test_010_011_execute.lto_priv.0+0xa6>
  if (!n)
 8008df6:	00b8      	lsls	r0, r7, #2
 8008df8:	d109      	bne.n	8008e0e <rt_test_010_011_execute.lto_priv.0+0xce>
    streamPut(test_chp, '0');
 8008dfa:	6828      	ldr	r0, [r5, #0]
 8008dfc:	6803      	ldr	r3, [r0, #0]
 8008dfe:	2130      	movs	r1, #48	@ 0x30
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	4798      	blx	r3
  {
    test_print("--- Score : ");
    test_printn(n * 4);
    test_println(" lock+unlock/S");
  }
}
 8008e04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8008e08:	4808      	ldr	r0, [pc, #32]	@ (8008e2c <rt_test_010_011_execute.lto_priv.0+0xec>)
 8008e0a:	f7fe bcb1 	b.w	8007770 <test_println>
 8008e0e:	f7fe fccf 	bl	80077b0 <test_printn.part.0>
}
 8008e12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8008e16:	4805      	ldr	r0, [pc, #20]	@ (8008e2c <rt_test_010_011_execute.lto_priv.0+0xec>)
 8008e18:	f7fe bcaa 	b.w	8007770 <test_println>
 8008e1c:	200010b4 	.word	0x200010b4
 8008e20:	200009b0 	.word	0x200009b0
 8008e24:	0800c10c 	.word	0x0800c10c
 8008e28:	200010d4 	.word	0x200010d4
 8008e2c:	0800c170 	.word	0x0800c170

08008e30 <rt_test_010_012_execute.lto_priv.0>:
 * - [10.12.8] The size of an event listener is printed.
 * - [10.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_010_012_execute(void) {
 8008e30:	b570      	push	{r4, r5, r6, lr}

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8008e32:	4d53      	ldr	r5, [pc, #332]	@ (8008f80 <rt_test_010_012_execute.lto_priv.0+0x150>)
 8008e34:	4e53      	ldr	r6, [pc, #332]	@ (8008f84 <rt_test_010_012_execute.lto_priv.0+0x154>)
 8008e36:	4c54      	ldr	r4, [pc, #336]	@ (8008f88 <rt_test_010_012_execute.lto_priv.0+0x158>)
 8008e38:	2301      	movs	r3, #1
 8008e3a:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008e3c:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	6803      	ldr	r3, [r0, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	4798      	blx	r3
  while (*msgp)
 8008e46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	d1f7      	bne.n	8008e3e <rt_test_010_012_execute.lto_priv.0+0xe>
  if (!n)
 8008e4e:	2078      	movs	r0, #120	@ 0x78
 8008e50:	f7fe fcae 	bl	80077b0 <test_printn.part.0>
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8008e54:	484d      	ldr	r0, [pc, #308]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
  }

  /* [10.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8008e56:	4e4e      	ldr	r6, [pc, #312]	@ (8008f90 <rt_test_010_012_execute.lto_priv.0+0x160>)
    test_println(" bytes");
 8008e58:	f7fe fc8a 	bl	8007770 <test_println>
  test_set_step(2);
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008e60:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008e62:	6820      	ldr	r0, [r4, #0]
 8008e64:	6803      	ldr	r3, [r0, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	4798      	blx	r3
  while (*msgp)
 8008e6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e6e:	2900      	cmp	r1, #0
 8008e70:	d1f7      	bne.n	8008e62 <rt_test_010_012_execute.lto_priv.0+0x32>
  if (!n)
 8008e72:	2044      	movs	r0, #68	@ 0x44
 8008e74:	f7fe fc9c 	bl	80077b0 <test_printn.part.0>
  {
    test_print("--- Thread: ");
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 8008e78:	4844      	ldr	r0, [pc, #272]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
  }

  /* [10.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8008e7a:	4e46      	ldr	r6, [pc, #280]	@ (8008f94 <rt_test_010_012_execute.lto_priv.0+0x164>)
    test_println(" bytes");
 8008e7c:	f7fe fc78 	bl	8007770 <test_println>
  test_set_step(3);
 8008e80:	2303      	movs	r3, #3
 8008e82:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008e84:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008e86:	6820      	ldr	r0, [r4, #0]
 8008e88:	6803      	ldr	r3, [r0, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	4798      	blx	r3
  while (*msgp)
 8008e8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e92:	2900      	cmp	r1, #0
 8008e94:	d1f7      	bne.n	8008e86 <rt_test_010_012_execute.lto_priv.0+0x56>
  if (!n)
 8008e96:	2014      	movs	r0, #20
 8008e98:	f7fe fc8a 	bl	80077b0 <test_printn.part.0>
  {
    test_print("--- Timer : ");
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 8008e9c:	483b      	ldr	r0, [pc, #236]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8008e9e:	4e3e      	ldr	r6, [pc, #248]	@ (8008f98 <rt_test_010_012_execute.lto_priv.0+0x168>)
    test_println(" bytes");
 8008ea0:	f7fe fc66 	bl	8007770 <test_println>
  test_set_step(4);
 8008ea4:	2304      	movs	r3, #4
 8008ea6:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008ea8:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	6803      	ldr	r3, [r0, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	4798      	blx	r3
  while (*msgp)
 8008eb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	d1f7      	bne.n	8008eaa <rt_test_010_012_execute.lto_priv.0+0x7a>
  if (!n)
 8008eba:	200c      	movs	r0, #12
 8008ebc:	f7fe fc78 	bl	80077b0 <test_printn.part.0>
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8008ec0:	4832      	ldr	r0, [pc, #200]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8008ec2:	4e36      	ldr	r6, [pc, #216]	@ (8008f9c <rt_test_010_012_execute.lto_priv.0+0x16c>)
    test_println(" bytes");
 8008ec4:	f7fe fc54 	bl	8007770 <test_println>
  test_set_step(5);
 8008ec8:	2305      	movs	r3, #5
 8008eca:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008ecc:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008ece:	6820      	ldr	r0, [r4, #0]
 8008ed0:	6803      	ldr	r3, [r0, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	4798      	blx	r3
  while (*msgp)
 8008ed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008eda:	2900      	cmp	r1, #0
 8008edc:	d1f7      	bne.n	8008ece <rt_test_010_012_execute.lto_priv.0+0x9e>
  if (!n)
 8008ede:	2010      	movs	r0, #16
 8008ee0:	f7fe fc66 	bl	80077b0 <test_printn.part.0>
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 8008ee4:	4829      	ldr	r0, [pc, #164]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8008ee6:	4e2e      	ldr	r6, [pc, #184]	@ (8008fa0 <rt_test_010_012_execute.lto_priv.0+0x170>)
    test_println(" bytes");
 8008ee8:	f7fe fc42 	bl	8007770 <test_println>
  test_set_step(6);
 8008eec:	2306      	movs	r3, #6
 8008eee:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008ef0:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	6803      	ldr	r3, [r0, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	4798      	blx	r3
  while (*msgp)
 8008efa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008efe:	2900      	cmp	r1, #0
 8008f00:	d1f7      	bne.n	8008ef2 <rt_test_010_012_execute.lto_priv.0+0xc2>
  if (!n)
 8008f02:	2008      	movs	r0, #8
 8008f04:	f7fe fc54 	bl	80077b0 <test_printn.part.0>
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8008f08:	4820      	ldr	r0, [pc, #128]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
 8008f0a:	4e26      	ldr	r6, [pc, #152]	@ (8008fa4 <rt_test_010_012_execute.lto_priv.0+0x174>)
    test_println(" bytes");
 8008f0c:	f7fe fc30 	bl	8007770 <test_println>
  test_set_step(7);
 8008f10:	2307      	movs	r3, #7
 8008f12:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008f14:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008f16:	6820      	ldr	r0, [r4, #0]
 8008f18:	6803      	ldr	r3, [r0, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	4798      	blx	r3
  while (*msgp)
 8008f1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f22:	2900      	cmp	r1, #0
 8008f24:	d1f7      	bne.n	8008f16 <rt_test_010_012_execute.lto_priv.0+0xe6>
  if (!n)
 8008f26:	2004      	movs	r0, #4
 8008f28:	f7fe fc42 	bl	80077b0 <test_printn.part.0>
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 8008f2c:	4817      	ldr	r0, [pc, #92]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8008f2e:	4e1e      	ldr	r6, [pc, #120]	@ (8008fa8 <rt_test_010_012_execute.lto_priv.0+0x178>)
    test_println(" bytes");
 8008f30:	f7fe fc1e 	bl	8007770 <test_println>
  test_set_step(8);
 8008f34:	2308      	movs	r3, #8
 8008f36:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008f38:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008f3a:	6820      	ldr	r0, [r4, #0]
 8008f3c:	6803      	ldr	r3, [r0, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	4798      	blx	r3
  while (*msgp)
 8008f42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f46:	2900      	cmp	r1, #0
 8008f48:	d1f7      	bne.n	8008f3a <rt_test_010_012_execute.lto_priv.0+0x10a>
  if (!n)
 8008f4a:	2014      	movs	r0, #20
 8008f4c:	f7fe fc30 	bl	80077b0 <test_printn.part.0>
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8008f50:	480e      	ldr	r0, [pc, #56]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8008f52:	4e16      	ldr	r6, [pc, #88]	@ (8008fac <rt_test_010_012_execute.lto_priv.0+0x17c>)
    test_println(" bytes");
 8008f54:	f7fe fc0c 	bl	8007770 <test_println>
  test_set_step(9);
 8008f58:	2309      	movs	r3, #9
 8008f5a:	602b      	str	r3, [r5, #0]
  while (*msgp)
 8008f5c:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	6803      	ldr	r3, [r0, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	4798      	blx	r3
  while (*msgp)
 8008f66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f6a:	2900      	cmp	r1, #0
 8008f6c:	d1f7      	bne.n	8008f5e <rt_test_010_012_execute.lto_priv.0+0x12e>
  if (!n)
 8008f6e:	2028      	movs	r0, #40	@ 0x28
 8008f70:	f7fe fc1e 	bl	80077b0 <test_printn.part.0>
    test_print("--- MailB.: ");
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
#endif
  }
}
 8008f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 8008f78:	4804      	ldr	r0, [pc, #16]	@ (8008f8c <rt_test_010_012_execute.lto_priv.0+0x15c>)
 8008f7a:	f7fe bbf9 	b.w	8007770 <test_println>
 8008f7e:	bf00      	nop
 8008f80:	200010b4 	.word	0x200010b4
 8008f84:	0800c180 	.word	0x0800c180
 8008f88:	200010d4 	.word	0x200010d4
 8008f8c:	0800c210 	.word	0x0800c210
 8008f90:	0800c190 	.word	0x0800c190
 8008f94:	0800c1a0 	.word	0x0800c1a0
 8008f98:	0800c1b0 	.word	0x0800c1b0
 8008f9c:	0800c1c0 	.word	0x0800c1c0
 8008fa0:	0800c1d0 	.word	0x0800c1d0
 8008fa4:	0800c1e0 	.word	0x0800c1e0
 8008fa8:	0800c1f0 	.word	0x0800c1f0
 8008fac:	0800c200 	.word	0x0800c200

08008fb0 <chTMStartMeasurementX.constprop.0>:
 8008fb0:	4b01      	ldr	r3, [pc, #4]	@ (8008fb8 <chTMStartMeasurementX.constprop.0+0x8>)
 8008fb2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8008fb4:	6083      	str	r3, [r0, #8]
}
 8008fb6:	4770      	bx	lr
 8008fb8:	e0001000 	.word	0xe0001000
 8008fbc:	00000000 	.word	0x00000000

08008fc0 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8008fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8008fc4:	2200      	movs	r2, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8008fc6:	4c23      	ldr	r4, [pc, #140]	@ (8009054 <_pal_lld_setgroupmode.constprop.0+0x94>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8008fc8:	f04f 0e02 	mov.w	lr, #2
      altrmask = altr << ((bit & 7) * 4);
 8008fcc:	f04f 0807 	mov.w	r8, #7
      m1 = 1 << bit;
 8008fd0:	2701      	movs	r7, #1
      m2 = 3 << (bit * 2);
 8008fd2:	2603      	movs	r6, #3
      m4 = 15 << ((bit & 7) * 4);
 8008fd4:	250f      	movs	r5, #15
 8008fd6:	e00f      	b.n	8008ff8 <_pal_lld_setgroupmode.constprop.0+0x38>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8008fd8:	6a21      	ldr	r1, [r4, #32]
 8008fda:	ea01 010c 	and.w	r1, r1, ip
 8008fde:	430b      	orrs	r3, r1
 8008fe0:	6223      	str	r3, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	ea0a 0a03 	and.w	sl, sl, r3
 8008fe8:	ea4a 030e 	orr.w	r3, sl, lr
 8008fec:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8008fee:	0840      	lsrs	r0, r0, #1
 8008ff0:	d02e      	beq.n	8009050 <_pal_lld_setgroupmode.constprop.0+0x90>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8008ff2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8008ff6:	3201      	adds	r2, #1
      altrmask = altr << ((bit & 7) * 4);
 8008ff8:	f002 0307 	and.w	r3, r2, #7
 8008ffc:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
 8008ffe:	0051      	lsls	r1, r2, #1
      m4 = 15 << ((bit & 7) * 4);
 8009000:	fa05 fc03 	lsl.w	ip, r5, r3
      m2 = 3 << (bit * 2);
 8009004:	fa06 f101 	lsl.w	r1, r6, r1
    if ((mask & 1) != 0) {
 8009008:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
 800900c:	fa07 f902 	lsl.w	r9, r7, r2
      altrmask = altr << ((bit & 7) * 4);
 8009010:	fa08 f303 	lsl.w	r3, r8, r3
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8009014:	ea6f 0c0c 	mvn.w	ip, ip
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8009018:	ea6f 0a01 	mvn.w	sl, r1
    if ((mask & 1) != 0) {
 800901c:	d0e7      	beq.n	8008fee <_pal_lld_setgroupmode.constprop.0+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800901e:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8009022:	ea2b 0909 	bic.w	r9, fp, r9
 8009026:	f8c4 9004 	str.w	r9, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800902a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800902e:	ea29 0901 	bic.w	r9, r9, r1
 8009032:	f8c4 9008 	str.w	r9, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8009036:	f8d4 900c 	ldr.w	r9, [r4, #12]
        if (bit < 8)
 800903a:	2a07      	cmp	r2, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800903c:	ea29 0101 	bic.w	r1, r9, r1
 8009040:	60e1      	str	r1, [r4, #12]
        if (bit < 8)
 8009042:	d9c9      	bls.n	8008fd8 <_pal_lld_setgroupmode.constprop.0+0x18>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8009044:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009046:	ea01 010c 	and.w	r1, r1, ip
 800904a:	430b      	orrs	r3, r1
 800904c:	6263      	str	r3, [r4, #36]	@ 0x24
 800904e:	e7c8      	b.n	8008fe2 <_pal_lld_setgroupmode.constprop.0+0x22>
  }
}
 8009050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009054:	40020000 	.word	0x40020000
	...

08009060 <chFactoryFindPipe.constprop.0>:
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	2320      	movs	r3, #32
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	4d13      	ldr	r5, [pc, #76]	@ (80090b8 <chFactoryFindPipe.constprop.0+0x58>)
 800906a:	4628      	mov	r0, r5
 800906c:	f7fc f8b8 	bl	80051e0 <chMtxLockS>
 8009070:	2300      	movs	r3, #0
 8009072:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009076:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800907a:	42ac      	cmp	r4, r5
 800907c:	d01a      	beq.n	80090b4 <chFactoryFindPipe.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800907e:	4e0f      	ldr	r6, [pc, #60]	@ (80090bc <chFactoryFindPipe.constprop.0+0x5c>)
 8009080:	e002      	b.n	8009088 <chFactoryFindPipe.constprop.0+0x28>
    p = p->next;
 8009082:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009084:	42ac      	cmp	r4, r5
 8009086:	d00f      	beq.n	80090a8 <chFactoryFindPipe.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009088:	4631      	mov	r1, r6
 800908a:	f104 0008 	add.w	r0, r4, #8
 800908e:	f7f7 f9b7 	bl	8000400 <strcmp>
 8009092:	2800      	cmp	r0, #0
 8009094:	d1f5      	bne.n	8009082 <chFactoryFindPipe.constprop.0+0x22>
  if (dep != NULL) {
 8009096:	b114      	cbz	r4, 800909e <chFactoryFindPipe.constprop.0+0x3e>
    dep->refs++;
 8009098:	6863      	ldr	r3, [r4, #4]
 800909a:	3301      	adds	r3, #1
 800909c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800909e:	4806      	ldr	r0, [pc, #24]	@ (80090b8 <chFactoryFindPipe.constprop.0+0x58>)
 80090a0:	f7fc f93e 	bl	8005320 <chMtxUnlock>
}
 80090a4:	4620      	mov	r0, r4
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 80090a8:	4803      	ldr	r0, [pc, #12]	@ (80090b8 <chFactoryFindPipe.constprop.0+0x58>)
  return NULL;
 80090aa:	2400      	movs	r4, #0
  F_UNLOCK();
 80090ac:	f7fc f938 	bl	8005320 <chMtxUnlock>
}
 80090b0:	4620      	mov	r0, r4
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 80090b4:	461c      	mov	r4, r3
 80090b6:	e7f2      	b.n	800909e <chFactoryFindPipe.constprop.0+0x3e>
 80090b8:	200010d8 	.word	0x200010d8
 80090bc:	0800c218 	.word	0x0800c218

080090c0 <chFactoryFindObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	2320      	movs	r3, #32
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	4d13      	ldr	r5, [pc, #76]	@ (8009118 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7fc f888 	bl	80051e0 <chMtxLockS>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80090d6:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 80090da:	42ac      	cmp	r4, r5
 80090dc:	d01a      	beq.n	8009114 <chFactoryFindObjectsFIFO.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80090de:	4e0f      	ldr	r6, [pc, #60]	@ (800911c <chFactoryFindObjectsFIFO.constprop.0+0x5c>)
 80090e0:	e002      	b.n	80090e8 <chFactoryFindObjectsFIFO.constprop.0+0x28>
    p = p->next;
 80090e2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80090e4:	42ac      	cmp	r4, r5
 80090e6:	d00f      	beq.n	8009108 <chFactoryFindObjectsFIFO.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80090e8:	4631      	mov	r1, r6
 80090ea:	f104 0008 	add.w	r0, r4, #8
 80090ee:	f7f7 f987 	bl	8000400 <strcmp>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d1f5      	bne.n	80090e2 <chFactoryFindObjectsFIFO.constprop.0+0x22>
  if (dep != NULL) {
 80090f6:	b114      	cbz	r4, 80090fe <chFactoryFindObjectsFIFO.constprop.0+0x3e>
    dep->refs++;
 80090f8:	6863      	ldr	r3, [r4, #4]
 80090fa:	3301      	adds	r3, #1
 80090fc:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 80090fe:	4806      	ldr	r0, [pc, #24]	@ (8009118 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 8009100:	f7fc f90e 	bl	8005320 <chMtxUnlock>
}
 8009104:	4620      	mov	r0, r4
 8009106:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 8009108:	4803      	ldr	r0, [pc, #12]	@ (8009118 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
  return NULL;
 800910a:	2400      	movs	r4, #0
  F_UNLOCK();
 800910c:	f7fc f908 	bl	8005320 <chMtxUnlock>
}
 8009110:	4620      	mov	r0, r4
 8009112:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009114:	461c      	mov	r4, r3
 8009116:	e7f2      	b.n	80090fe <chFactoryFindObjectsFIFO.constprop.0+0x3e>
 8009118:	200010d8 	.word	0x200010d8
 800911c:	0800c220 	.word	0x0800c220

08009120 <chFactoryFindMailbox.constprop.0>:
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	2320      	movs	r3, #32
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	4d13      	ldr	r5, [pc, #76]	@ (8009178 <chFactoryFindMailbox.constprop.0+0x58>)
 800912a:	4628      	mov	r0, r5
 800912c:	f7fc f858 	bl	80051e0 <chMtxLockS>
 8009130:	2300      	movs	r3, #0
 8009132:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009136:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800913a:	42ac      	cmp	r4, r5
 800913c:	d01a      	beq.n	8009174 <chFactoryFindMailbox.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800913e:	4e0f      	ldr	r6, [pc, #60]	@ (800917c <chFactoryFindMailbox.constprop.0+0x5c>)
 8009140:	e002      	b.n	8009148 <chFactoryFindMailbox.constprop.0+0x28>
    p = p->next;
 8009142:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009144:	42ac      	cmp	r4, r5
 8009146:	d00f      	beq.n	8009168 <chFactoryFindMailbox.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009148:	4631      	mov	r1, r6
 800914a:	f104 0008 	add.w	r0, r4, #8
 800914e:	f7f7 f957 	bl	8000400 <strcmp>
 8009152:	2800      	cmp	r0, #0
 8009154:	d1f5      	bne.n	8009142 <chFactoryFindMailbox.constprop.0+0x22>
  if (dep != NULL) {
 8009156:	b114      	cbz	r4, 800915e <chFactoryFindMailbox.constprop.0+0x3e>
    dep->refs++;
 8009158:	6863      	ldr	r3, [r4, #4]
 800915a:	3301      	adds	r3, #1
 800915c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800915e:	4806      	ldr	r0, [pc, #24]	@ (8009178 <chFactoryFindMailbox.constprop.0+0x58>)
 8009160:	f7fc f8de 	bl	8005320 <chMtxUnlock>
}
 8009164:	4620      	mov	r0, r4
 8009166:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 8009168:	4803      	ldr	r0, [pc, #12]	@ (8009178 <chFactoryFindMailbox.constprop.0+0x58>)
  return NULL;
 800916a:	2400      	movs	r4, #0
  F_UNLOCK();
 800916c:	f7fc f8d8 	bl	8005320 <chMtxUnlock>
}
 8009170:	4620      	mov	r0, r4
 8009172:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8009174:	461c      	mov	r4, r3
 8009176:	e7f2      	b.n	800915e <chFactoryFindMailbox.constprop.0+0x3e>
 8009178:	200010d8 	.word	0x200010d8
 800917c:	0800c228 	.word	0x0800c228

08009180 <chFactoryFindSemaphore.constprop.0>:
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	2320      	movs	r3, #32
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	4d13      	ldr	r5, [pc, #76]	@ (80091d8 <chFactoryFindSemaphore.constprop.0+0x58>)
 800918a:	4628      	mov	r0, r5
 800918c:	f7fc f828 	bl	80051e0 <chMtxLockS>
 8009190:	2300      	movs	r3, #0
 8009192:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009196:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800919a:	42ac      	cmp	r4, r5
 800919c:	d01a      	beq.n	80091d4 <chFactoryFindSemaphore.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800919e:	4e0f      	ldr	r6, [pc, #60]	@ (80091dc <chFactoryFindSemaphore.constprop.0+0x5c>)
 80091a0:	e002      	b.n	80091a8 <chFactoryFindSemaphore.constprop.0+0x28>
    p = p->next;
 80091a2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80091a4:	42ac      	cmp	r4, r5
 80091a6:	d00f      	beq.n	80091c8 <chFactoryFindSemaphore.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80091a8:	4631      	mov	r1, r6
 80091aa:	f104 0008 	add.w	r0, r4, #8
 80091ae:	f7f7 f927 	bl	8000400 <strcmp>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d1f5      	bne.n	80091a2 <chFactoryFindSemaphore.constprop.0+0x22>
  if (dep != NULL) {
 80091b6:	b114      	cbz	r4, 80091be <chFactoryFindSemaphore.constprop.0+0x3e>
    dep->refs++;
 80091b8:	6863      	ldr	r3, [r4, #4]
 80091ba:	3301      	adds	r3, #1
 80091bc:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 80091be:	4806      	ldr	r0, [pc, #24]	@ (80091d8 <chFactoryFindSemaphore.constprop.0+0x58>)
 80091c0:	f7fc f8ae 	bl	8005320 <chMtxUnlock>
}
 80091c4:	4620      	mov	r0, r4
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 80091c8:	4803      	ldr	r0, [pc, #12]	@ (80091d8 <chFactoryFindSemaphore.constprop.0+0x58>)
  return NULL;
 80091ca:	2400      	movs	r4, #0
  F_UNLOCK();
 80091cc:	f7fc f8a8 	bl	8005320 <chMtxUnlock>
}
 80091d0:	4620      	mov	r0, r4
 80091d2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 80091d4:	461c      	mov	r4, r3
 80091d6:	e7f2      	b.n	80091be <chFactoryFindSemaphore.constprop.0+0x3e>
 80091d8:	200010d8 	.word	0x200010d8
 80091dc:	0800b50c 	.word	0x0800b50c

080091e0 <oslib_test_005_004_teardown>:
 * - [5.4.6] Retrieving the dynamic mailbox by name again, must not
 *   exist.
 * .
 */

static void oslib_test_005_004_teardown(void) {
 80091e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e4:	2320      	movs	r3, #32
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	4e25      	ldr	r6, [pc, #148]	@ (8009280 <oslib_test_005_004_teardown+0xa0>)
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7fb fff7 	bl	80051e0 <chMtxLockS>
 80091f2:	2300      	movs	r3, #0
 80091f4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80091f8:	f856 4f3c 	ldr.w	r4, [r6, #60]!
  while (p != (dyn_element_t *)dlp) {
 80091fc:	42b4      	cmp	r4, r6
 80091fe:	d039      	beq.n	8009274 <oslib_test_005_004_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009200:	4f20      	ldr	r7, [pc, #128]	@ (8009284 <oslib_test_005_004_teardown+0xa4>)
 8009202:	e002      	b.n	800920a <oslib_test_005_004_teardown+0x2a>
    p = p->next;
 8009204:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009206:	42b4      	cmp	r4, r6
 8009208:	d034      	beq.n	8009274 <oslib_test_005_004_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800920a:	4639      	mov	r1, r7
 800920c:	f104 0008 	add.w	r0, r4, #8
 8009210:	f7f7 f8f6 	bl	8000400 <strcmp>
 8009214:	4605      	mov	r5, r0
 8009216:	2800      	cmp	r0, #0
 8009218:	d1f4      	bne.n	8009204 <oslib_test_005_004_teardown+0x24>
  if (dep != NULL) {
 800921a:	b35c      	cbz	r4, 8009274 <oslib_test_005_004_teardown+0x94>
    dep->refs++;
 800921c:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800921e:	4818      	ldr	r0, [pc, #96]	@ (8009280 <oslib_test_005_004_teardown+0xa0>)
    dep->refs++;
 8009220:	3301      	adds	r3, #1
 8009222:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8009224:	f7fc f87c 	bl	8005320 <chMtxUnlock>
  dyn_mailbox_t *dmp;

  dmp = chFactoryFindMailbox("mymbx");
  if (dmp != NULL) {
    while (dmp->element.refs > 0U) {
 8009228:	6863      	ldr	r3, [r4, #4]
 800922a:	b1f3      	cbz	r3, 800926a <oslib_test_005_004_teardown+0x8a>
 800922c:	4f14      	ldr	r7, [pc, #80]	@ (8009280 <oslib_test_005_004_teardown+0xa0>)
 800922e:	f04f 0820 	mov.w	r8, #32
 8009232:	f388 8811 	msr	BASEPRI, r8
 8009236:	4638      	mov	r0, r7
 8009238:	f7fb ffd2 	bl	80051e0 <chMtxLockS>
 800923c:	f385 8811 	msr	BASEPRI, r5
  dep->refs--;
 8009240:	6863      	ldr	r3, [r4, #4]
 8009242:	3b01      	subs	r3, #1
 8009244:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8009246:	b953      	cbnz	r3, 800925e <oslib_test_005_004_teardown+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8009248:	480f      	ldr	r0, [pc, #60]	@ (8009288 <oslib_test_005_004_teardown+0xa8>)
 800924a:	e001      	b.n	8009250 <oslib_test_005_004_teardown+0x70>
    if (prev->next == element) {
 800924c:	4284      	cmp	r4, r0
 800924e:	d00e      	beq.n	800926e <oslib_test_005_004_teardown+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 8009250:	4603      	mov	r3, r0
 8009252:	6800      	ldr	r0, [r0, #0]
 8009254:	42b0      	cmp	r0, r6
 8009256:	d1f9      	bne.n	800924c <oslib_test_005_004_teardown+0x6c>
  return NULL;
 8009258:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800925a:	f7fc fcb9 	bl	8005bd0 <chHeapFree>
  F_UNLOCK();
 800925e:	4638      	mov	r0, r7
 8009260:	f7fc f85e 	bl	8005320 <chMtxUnlock>
 8009264:	6863      	ldr	r3, [r4, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e3      	bne.n	8009232 <oslib_test_005_004_teardown+0x52>
      chFactoryReleaseMailbox(dmp);
    }
  }
}
 800926a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800926e:	6822      	ldr	r2, [r4, #0]
 8009270:	601a      	str	r2, [r3, #0]
      return element;
 8009272:	e7f2      	b.n	800925a <oslib_test_005_004_teardown+0x7a>
 8009274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  F_UNLOCK();
 8009278:	4801      	ldr	r0, [pc, #4]	@ (8009280 <oslib_test_005_004_teardown+0xa0>)
 800927a:	f7fc b851 	b.w	8005320 <chMtxUnlock>
 800927e:	bf00      	nop
 8009280:	200010d8 	.word	0x200010d8
 8009284:	0800c228 	.word	0x0800c228
 8009288:	20001114 	.word	0x20001114
 800928c:	00000000 	.word	0x00000000

08009290 <oslib_test_005_005_teardown>:
 * - [5.5.6] Retrieving the dynamic objects FIFO by name again, must
 *   not exist.
 * .
 */

static void oslib_test_005_005_teardown(void) {
 8009290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009294:	2320      	movs	r3, #32
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	4e25      	ldr	r6, [pc, #148]	@ (8009330 <oslib_test_005_005_teardown+0xa0>)
 800929c:	4630      	mov	r0, r6
 800929e:	f7fb ff9f 	bl	80051e0 <chMtxLockS>
 80092a2:	2300      	movs	r3, #0
 80092a4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80092a8:	f856 4f40 	ldr.w	r4, [r6, #64]!
  while (p != (dyn_element_t *)dlp) {
 80092ac:	42b4      	cmp	r4, r6
 80092ae:	d039      	beq.n	8009324 <oslib_test_005_005_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80092b0:	4f20      	ldr	r7, [pc, #128]	@ (8009334 <oslib_test_005_005_teardown+0xa4>)
 80092b2:	e002      	b.n	80092ba <oslib_test_005_005_teardown+0x2a>
    p = p->next;
 80092b4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80092b6:	42b4      	cmp	r4, r6
 80092b8:	d034      	beq.n	8009324 <oslib_test_005_005_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80092ba:	4639      	mov	r1, r7
 80092bc:	f104 0008 	add.w	r0, r4, #8
 80092c0:	f7f7 f89e 	bl	8000400 <strcmp>
 80092c4:	4605      	mov	r5, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d1f4      	bne.n	80092b4 <oslib_test_005_005_teardown+0x24>
  if (dep != NULL) {
 80092ca:	b35c      	cbz	r4, 8009324 <oslib_test_005_005_teardown+0x94>
    dep->refs++;
 80092cc:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 80092ce:	4818      	ldr	r0, [pc, #96]	@ (8009330 <oslib_test_005_005_teardown+0xa0>)
    dep->refs++;
 80092d0:	3301      	adds	r3, #1
 80092d2:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 80092d4:	f7fc f824 	bl	8005320 <chMtxUnlock>
  dyn_objects_fifo_t *dofp;

  dofp = chFactoryFindObjectsFIFO("myfifo");
  if (dofp != NULL) {
    while (dofp->element.refs > 0U) {
 80092d8:	6863      	ldr	r3, [r4, #4]
 80092da:	b1f3      	cbz	r3, 800931a <oslib_test_005_005_teardown+0x8a>
 80092dc:	4f14      	ldr	r7, [pc, #80]	@ (8009330 <oslib_test_005_005_teardown+0xa0>)
 80092de:	f04f 0820 	mov.w	r8, #32
 80092e2:	f388 8811 	msr	BASEPRI, r8
 80092e6:	4638      	mov	r0, r7
 80092e8:	f7fb ff7a 	bl	80051e0 <chMtxLockS>
 80092ec:	f385 8811 	msr	BASEPRI, r5
  dep->refs--;
 80092f0:	6863      	ldr	r3, [r4, #4]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80092f6:	b953      	cbnz	r3, 800930e <oslib_test_005_005_teardown+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80092f8:	480f      	ldr	r0, [pc, #60]	@ (8009338 <oslib_test_005_005_teardown+0xa8>)
 80092fa:	e001      	b.n	8009300 <oslib_test_005_005_teardown+0x70>
    if (prev->next == element) {
 80092fc:	4284      	cmp	r4, r0
 80092fe:	d00e      	beq.n	800931e <oslib_test_005_005_teardown+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 8009300:	4603      	mov	r3, r0
 8009302:	6800      	ldr	r0, [r0, #0]
 8009304:	42b0      	cmp	r0, r6
 8009306:	d1f9      	bne.n	80092fc <oslib_test_005_005_teardown+0x6c>
  return NULL;
 8009308:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800930a:	f7fc fc61 	bl	8005bd0 <chHeapFree>
  F_UNLOCK();
 800930e:	4638      	mov	r0, r7
 8009310:	f7fc f806 	bl	8005320 <chMtxUnlock>
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e3      	bne.n	80092e2 <oslib_test_005_005_teardown+0x52>
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}
 800931a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	601a      	str	r2, [r3, #0]
      return element;
 8009322:	e7f2      	b.n	800930a <oslib_test_005_005_teardown+0x7a>
 8009324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  F_UNLOCK();
 8009328:	4801      	ldr	r0, [pc, #4]	@ (8009330 <oslib_test_005_005_teardown+0xa0>)
 800932a:	f7fb bff9 	b.w	8005320 <chMtxUnlock>
 800932e:	bf00      	nop
 8009330:	200010d8 	.word	0x200010d8
 8009334:	0800c220 	.word	0x0800c220
 8009338:	20001118 	.word	0x20001118
 800933c:	00000000 	.word	0x00000000

08009340 <oslib_test_005_006_teardown>:
 *   trigger an assertion.
 * - [5.6.6] Retrieving the dynamic pipe by name again, must not exist.
 * .
 */

static void oslib_test_005_006_teardown(void) {
 8009340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009344:	2320      	movs	r3, #32
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	4e25      	ldr	r6, [pc, #148]	@ (80093e0 <oslib_test_005_006_teardown+0xa0>)
 800934c:	4630      	mov	r0, r6
 800934e:	f7fb ff47 	bl	80051e0 <chMtxLockS>
 8009352:	2300      	movs	r3, #0
 8009354:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009358:	f856 4f44 	ldr.w	r4, [r6, #68]!
  while (p != (dyn_element_t *)dlp) {
 800935c:	42b4      	cmp	r4, r6
 800935e:	d039      	beq.n	80093d4 <oslib_test_005_006_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009360:	4f20      	ldr	r7, [pc, #128]	@ (80093e4 <oslib_test_005_006_teardown+0xa4>)
 8009362:	e002      	b.n	800936a <oslib_test_005_006_teardown+0x2a>
    p = p->next;
 8009364:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009366:	42b4      	cmp	r4, r6
 8009368:	d034      	beq.n	80093d4 <oslib_test_005_006_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800936a:	4639      	mov	r1, r7
 800936c:	f104 0008 	add.w	r0, r4, #8
 8009370:	f7f7 f846 	bl	8000400 <strcmp>
 8009374:	4605      	mov	r5, r0
 8009376:	2800      	cmp	r0, #0
 8009378:	d1f4      	bne.n	8009364 <oslib_test_005_006_teardown+0x24>
  if (dep != NULL) {
 800937a:	b35c      	cbz	r4, 80093d4 <oslib_test_005_006_teardown+0x94>
    dep->refs++;
 800937c:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800937e:	4818      	ldr	r0, [pc, #96]	@ (80093e0 <oslib_test_005_006_teardown+0xa0>)
    dep->refs++;
 8009380:	3301      	adds	r3, #1
 8009382:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8009384:	f7fb ffcc 	bl	8005320 <chMtxUnlock>
  dyn_pipe_t *dpp;

  dpp = chFactoryFindPipe("mypipe");
  if (dpp != NULL) {
    while (dpp->element.refs > 0U) {
 8009388:	6863      	ldr	r3, [r4, #4]
 800938a:	b1f3      	cbz	r3, 80093ca <oslib_test_005_006_teardown+0x8a>
 800938c:	4f14      	ldr	r7, [pc, #80]	@ (80093e0 <oslib_test_005_006_teardown+0xa0>)
 800938e:	f04f 0820 	mov.w	r8, #32
 8009392:	f388 8811 	msr	BASEPRI, r8
 8009396:	4638      	mov	r0, r7
 8009398:	f7fb ff22 	bl	80051e0 <chMtxLockS>
 800939c:	f385 8811 	msr	BASEPRI, r5
  dep->refs--;
 80093a0:	6863      	ldr	r3, [r4, #4]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80093a6:	b953      	cbnz	r3, 80093be <oslib_test_005_006_teardown+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80093a8:	480f      	ldr	r0, [pc, #60]	@ (80093e8 <oslib_test_005_006_teardown+0xa8>)
 80093aa:	e001      	b.n	80093b0 <oslib_test_005_006_teardown+0x70>
    if (prev->next == element) {
 80093ac:	4284      	cmp	r4, r0
 80093ae:	d00e      	beq.n	80093ce <oslib_test_005_006_teardown+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 80093b0:	4603      	mov	r3, r0
 80093b2:	6800      	ldr	r0, [r0, #0]
 80093b4:	42b0      	cmp	r0, r6
 80093b6:	d1f9      	bne.n	80093ac <oslib_test_005_006_teardown+0x6c>
  return NULL;
 80093b8:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 80093ba:	f7fc fc09 	bl	8005bd0 <chHeapFree>
  F_UNLOCK();
 80093be:	4638      	mov	r0, r7
 80093c0:	f7fb ffae 	bl	8005320 <chMtxUnlock>
 80093c4:	6863      	ldr	r3, [r4, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e3      	bne.n	8009392 <oslib_test_005_006_teardown+0x52>
      chFactoryReleasePipe(dpp);
    }
  }
}
 80093ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 80093ce:	6822      	ldr	r2, [r4, #0]
 80093d0:	601a      	str	r2, [r3, #0]
      return element;
 80093d2:	e7f2      	b.n	80093ba <oslib_test_005_006_teardown+0x7a>
 80093d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  F_UNLOCK();
 80093d8:	4801      	ldr	r0, [pc, #4]	@ (80093e0 <oslib_test_005_006_teardown+0xa0>)
 80093da:	f7fb bfa1 	b.w	8005320 <chMtxUnlock>
 80093de:	bf00      	nop
 80093e0:	200010d8 	.word	0x200010d8
 80093e4:	0800c218 	.word	0x0800c218
 80093e8:	2000111c 	.word	0x2000111c
 80093ec:	00000000 	.word	0x00000000

080093f0 <oslib_test_005_004_execute>:
static void oslib_test_005_004_execute(void) {
 80093f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80093f4:	4f6f      	ldr	r7, [pc, #444]	@ (80095b4 <oslib_test_005_004_execute+0x1c4>)
 80093f6:	2301      	movs	r3, #1
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	2320      	movs	r3, #32
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	4d6d      	ldr	r5, [pc, #436]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
 8009402:	4628      	mov	r0, r5
 8009404:	f7fb feec 	bl	80051e0 <chMtxLockS>
 8009408:	2300      	movs	r3, #0
 800940a:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800940e:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 8009412:	42ac      	cmp	r4, r5
 8009414:	d01c      	beq.n	8009450 <oslib_test_005_004_execute+0x60>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009416:	4e69      	ldr	r6, [pc, #420]	@ (80095bc <oslib_test_005_004_execute+0x1cc>)
 8009418:	e002      	b.n	8009420 <oslib_test_005_004_execute+0x30>
    p = p->next;
 800941a:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800941c:	42ac      	cmp	r4, r5
 800941e:	d017      	beq.n	8009450 <oslib_test_005_004_execute+0x60>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009420:	4631      	mov	r1, r6
 8009422:	f104 0008 	add.w	r0, r4, #8
 8009426:	f7f6 ffeb 	bl	8000400 <strcmp>
 800942a:	2800      	cmp	r0, #0
 800942c:	d1f5      	bne.n	800941a <oslib_test_005_004_execute+0x2a>
  if (dep != NULL) {
 800942e:	b17c      	cbz	r4, 8009450 <oslib_test_005_004_execute+0x60>
    dep->refs++;
 8009430:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 8009432:	4861      	ldr	r0, [pc, #388]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
    dep->refs++;
 8009434:	3301      	adds	r3, #1
 8009436:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8009438:	f7fb ff72 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 800943c:	4c60      	ldr	r4, [pc, #384]	@ (80095c0 <oslib_test_005_004_execute+0x1d0>)
  test_global_fail     = true;
 800943e:	4861      	ldr	r0, [pc, #388]	@ (80095c4 <oslib_test_005_004_execute+0x1d4>)
  test_failure_message = msg;
 8009440:	4a61      	ldr	r2, [pc, #388]	@ (80095c8 <oslib_test_005_004_execute+0x1d8>)
 8009442:	4962      	ldr	r1, [pc, #392]	@ (80095cc <oslib_test_005_004_execute+0x1dc>)
 8009444:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009446:	2301      	movs	r3, #1
 8009448:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800944a:	7003      	strb	r3, [r0, #0]
}
 800944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009450:	4859      	ldr	r0, [pc, #356]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
 8009452:	f7fb ff65 	bl	8005320 <chMtxUnlock>
  test_set_step(2);
 8009456:	2302      	movs	r3, #2
 8009458:	2620      	movs	r6, #32
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	f386 8811 	msr	BASEPRI, r6
 8009460:	4855      	ldr	r0, [pc, #340]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
 8009462:	f7fb febd 	bl	80051e0 <chMtxLockS>
 8009466:	2500      	movs	r5, #0
 8009468:	f385 8811 	msr	BASEPRI, r5
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 800946c:	4958      	ldr	r1, [pc, #352]	@ (80095d0 <oslib_test_005_004_execute+0x1e0>)
 800946e:	4853      	ldr	r0, [pc, #332]	@ (80095bc <oslib_test_005_004_execute+0x1cc>)
 8009470:	2278      	movs	r2, #120	@ 0x78
 8009472:	f7fc fce5 	bl	8005e40 <dyn_create_object_heap.lto_priv.0>
  if (dmp != NULL) {
 8009476:	4604      	mov	r4, r0
 8009478:	2800      	cmp	r0, #0
 800947a:	d046      	beq.n	800950a <oslib_test_005_004_execute+0x11a>
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 800947c:	f100 0338 	add.w	r3, r0, #56	@ 0x38
  mbp->wrptr  = buf;
 8009480:	e9c0 3306 	strd	r3, r3, [r0, #24]
  mbp->buffer = buf;
 8009484:	6103      	str	r3, [r0, #16]
  mbp->top    = &buf[n];
 8009486:	f100 0378 	add.w	r3, r0, #120	@ 0x78
 800948a:	6143      	str	r3, [r0, #20]
  chThdQueueObjectInit(&mbp->qw);
 800948c:	f100 0328 	add.w	r3, r0, #40	@ 0x28
  tqp->next = (thread_t *)tqp;
 8009490:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  chThdQueueObjectInit(&mbp->qr);
 8009494:	f104 0330 	add.w	r3, r4, #48	@ 0x30
  mbp->cnt    = (size_t)0;
 8009498:	6205      	str	r5, [r0, #32]
  mbp->reset  = false;
 800949a:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  test_set_step(3);
 800949e:	f04f 0803 	mov.w	r8, #3
 80094a2:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
  F_UNLOCK();
 80094a6:	4844      	ldr	r0, [pc, #272]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
 80094a8:	f7fb ff3a 	bl	8005320 <chMtxUnlock>
 80094ac:	f8c7 8000 	str.w	r8, [r7]
 80094b0:	f386 8811 	msr	BASEPRI, r6
 80094b4:	4840      	ldr	r0, [pc, #256]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
 80094b6:	f7fb fe93 	bl	80051e0 <chMtxLockS>
 80094ba:	f385 8811 	msr	BASEPRI, r5
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 80094be:	4944      	ldr	r1, [pc, #272]	@ (80095d0 <oslib_test_005_004_execute+0x1e0>)
 80094c0:	483e      	ldr	r0, [pc, #248]	@ (80095bc <oslib_test_005_004_execute+0x1cc>)
 80094c2:	2278      	movs	r2, #120	@ 0x78
 80094c4:	f7fc fcbc 	bl	8005e40 <dyn_create_object_heap.lto_priv.0>
  if (dmp != NULL) {
 80094c8:	4603      	mov	r3, r0
 80094ca:	b358      	cbz	r0, 8009524 <oslib_test_005_004_execute+0x134>
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 80094cc:	f100 0238 	add.w	r2, r0, #56	@ 0x38
  chThdQueueObjectInit(&mbp->qr);
 80094d0:	f100 0130 	add.w	r1, r0, #48	@ 0x30
  chThdQueueObjectInit(&mbp->qw);
 80094d4:	f100 0428 	add.w	r4, r0, #40	@ 0x28
  mbp->top    = &buf[n];
 80094d8:	3078      	adds	r0, #120	@ 0x78
  mbp->buffer = buf;
 80094da:	e9c3 2004 	strd	r2, r0, [r3, #16]
  mbp->wrptr  = buf;
 80094de:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80094e2:	e9c3 440a 	strd	r4, r4, [r3, #40]	@ 0x28
 80094e6:	e9c3 110c 	strd	r1, r1, [r3, #48]	@ 0x30
  F_UNLOCK();
 80094ea:	4833      	ldr	r0, [pc, #204]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
  mbp->cnt    = (size_t)0;
 80094ec:	621d      	str	r5, [r3, #32]
  mbp->reset  = false;
 80094ee:	f883 5024 	strb.w	r5, [r3, #36]	@ 0x24
 80094f2:	f7fb ff15 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 80094f6:	4c32      	ldr	r4, [pc, #200]	@ (80095c0 <oslib_test_005_004_execute+0x1d0>)
  test_global_fail     = true;
 80094f8:	4832      	ldr	r0, [pc, #200]	@ (80095c4 <oslib_test_005_004_execute+0x1d4>)
  test_failure_message = msg;
 80094fa:	4a33      	ldr	r2, [pc, #204]	@ (80095c8 <oslib_test_005_004_execute+0x1d8>)
 80094fc:	4935      	ldr	r1, [pc, #212]	@ (80095d4 <oslib_test_005_004_execute+0x1e4>)
 80094fe:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009500:	2301      	movs	r3, #1
 8009502:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009504:	7003      	strb	r3, [r0, #0]
}
 8009506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950a:	482b      	ldr	r0, [pc, #172]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
  test_local_fail      = true;
 800950c:	4c2c      	ldr	r4, [pc, #176]	@ (80095c0 <oslib_test_005_004_execute+0x1d0>)
 800950e:	f7fb ff07 	bl	8005320 <chMtxUnlock>
  test_global_fail     = true;
 8009512:	482c      	ldr	r0, [pc, #176]	@ (80095c4 <oslib_test_005_004_execute+0x1d4>)
  test_failure_message = msg;
 8009514:	4a2c      	ldr	r2, [pc, #176]	@ (80095c8 <oslib_test_005_004_execute+0x1d8>)
 8009516:	4930      	ldr	r1, [pc, #192]	@ (80095d8 <oslib_test_005_004_execute+0x1e8>)
 8009518:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800951a:	2301      	movs	r3, #1
 800951c:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800951e:	7003      	strb	r3, [r0, #0]
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009524:	4824      	ldr	r0, [pc, #144]	@ (80095b8 <oslib_test_005_004_execute+0x1c8>)
 8009526:	f7fb fefb 	bl	8005320 <chMtxUnlock>
  test_set_step(4);
 800952a:	2304      	movs	r3, #4
 800952c:	603b      	str	r3, [r7, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 800952e:	f7ff fdf7 	bl	8009120 <chFactoryFindMailbox.constprop.0>
  if (!condition)
 8009532:	4605      	mov	r5, r0
 8009534:	b358      	cbz	r0, 800958e <oslib_test_005_004_execute+0x19e>
 8009536:	42a0      	cmp	r0, r4
 8009538:	d120      	bne.n	800957c <oslib_test_005_004_execute+0x18c>
 800953a:	6843      	ldr	r3, [r0, #4]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d11d      	bne.n	800957c <oslib_test_005_004_execute+0x18c>
 8009540:	f8c0 8004 	str.w	r8, [r0, #4]
    chFactoryReleaseMailbox(dmp2);
 8009544:	f7fc fd1c 	bl	8005f80 <chFactoryReleaseMailbox>
 8009548:	686b      	ldr	r3, [r5, #4]
 800954a:	2b02      	cmp	r3, #2
 800954c:	d128      	bne.n	80095a0 <oslib_test_005_004_execute+0x1b0>
    chFactoryReleaseMailbox(dmp1);
 800954e:	4628      	mov	r0, r5
 8009550:	f7fc fd16 	bl	8005f80 <chFactoryReleaseMailbox>
 8009554:	686b      	ldr	r3, [r5, #4]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d122      	bne.n	80095a0 <oslib_test_005_004_execute+0x1b0>
  test_set_step(5);
 800955a:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 800955c:	4628      	mov	r0, r5
  test_set_step(5);
 800955e:	603b      	str	r3, [r7, #0]
    chFactoryReleaseMailbox(dmp);
 8009560:	f7fc fd0e 	bl	8005f80 <chFactoryReleaseMailbox>
  test_set_step(6);
 8009564:	2306      	movs	r3, #6
 8009566:	603b      	str	r3, [r7, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8009568:	f7ff fdda 	bl	8009120 <chFactoryFindMailbox.constprop.0>
    test_assert(dmp == NULL, "found");
 800956c:	fab0 f080 	clz	r0, r0
}
 8009570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(dmp == NULL, "found");
 8009574:	4915      	ldr	r1, [pc, #84]	@ (80095cc <oslib_test_005_004_execute+0x1dc>)
 8009576:	0940      	lsrs	r0, r0, #5
 8009578:	f7fc bda2 	b.w	80060c0 <_test_assert>
  test_local_fail      = true;
 800957c:	4c10      	ldr	r4, [pc, #64]	@ (80095c0 <oslib_test_005_004_execute+0x1d0>)
  test_global_fail     = true;
 800957e:	4811      	ldr	r0, [pc, #68]	@ (80095c4 <oslib_test_005_004_execute+0x1d4>)
  test_failure_message = msg;
 8009580:	4a11      	ldr	r2, [pc, #68]	@ (80095c8 <oslib_test_005_004_execute+0x1d8>)
 8009582:	4916      	ldr	r1, [pc, #88]	@ (80095dc <oslib_test_005_004_execute+0x1ec>)
 8009584:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009586:	2301      	movs	r3, #1
 8009588:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800958a:	7003      	strb	r3, [r0, #0]
  return true;
 800958c:	e75e      	b.n	800944c <oslib_test_005_004_execute+0x5c>
  test_local_fail      = true;
 800958e:	4c0c      	ldr	r4, [pc, #48]	@ (80095c0 <oslib_test_005_004_execute+0x1d0>)
  test_global_fail     = true;
 8009590:	480c      	ldr	r0, [pc, #48]	@ (80095c4 <oslib_test_005_004_execute+0x1d4>)
  test_failure_message = msg;
 8009592:	4a0d      	ldr	r2, [pc, #52]	@ (80095c8 <oslib_test_005_004_execute+0x1d8>)
 8009594:	4912      	ldr	r1, [pc, #72]	@ (80095e0 <oslib_test_005_004_execute+0x1f0>)
 8009596:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009598:	2301      	movs	r3, #1
 800959a:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800959c:	7003      	strb	r3, [r0, #0]
  return true;
 800959e:	e755      	b.n	800944c <oslib_test_005_004_execute+0x5c>
  test_local_fail      = true;
 80095a0:	4c07      	ldr	r4, [pc, #28]	@ (80095c0 <oslib_test_005_004_execute+0x1d0>)
  test_global_fail     = true;
 80095a2:	4808      	ldr	r0, [pc, #32]	@ (80095c4 <oslib_test_005_004_execute+0x1d4>)
  test_failure_message = msg;
 80095a4:	4a08      	ldr	r2, [pc, #32]	@ (80095c8 <oslib_test_005_004_execute+0x1d8>)
 80095a6:	490f      	ldr	r1, [pc, #60]	@ (80095e4 <oslib_test_005_004_execute+0x1f4>)
 80095a8:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80095aa:	2301      	movs	r3, #1
 80095ac:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80095ae:	7003      	strb	r3, [r0, #0]
  return true;
 80095b0:	e74c      	b.n	800944c <oslib_test_005_004_execute+0x5c>
 80095b2:	bf00      	nop
 80095b4:	200010b4 	.word	0x200010b4
 80095b8:	200010d8 	.word	0x200010d8
 80095bc:	0800c228 	.word	0x0800c228
 80095c0:	200010d1 	.word	0x200010d1
 80095c4:	200010d0 	.word	0x200010d0
 80095c8:	200010cc 	.word	0x200010cc
 80095cc:	0800b688 	.word	0x0800b688
 80095d0:	20001114 	.word	0x20001114
 80095d4:	0800b6e0 	.word	0x0800b6e0
 80095d8:	0800b6d0 	.word	0x0800b6d0
 80095dc:	0800b6a0 	.word	0x0800b6a0
 80095e0:	0800b684 	.word	0x0800b684
 80095e4:	0800b6bc 	.word	0x0800b6bc
	...

080095f0 <chFactoryCreatePipe.constprop.0>:
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	2320      	movs	r3, #32
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	4816      	ldr	r0, [pc, #88]	@ (8009654 <chFactoryCreatePipe.constprop.0+0x64>)
 80095fa:	f7fb fdf1 	bl	80051e0 <chMtxLockS>
 80095fe:	2500      	movs	r5, #0
 8009600:	f385 8811 	msr	BASEPRI, r5
  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8009604:	4914      	ldr	r1, [pc, #80]	@ (8009658 <chFactoryCreatePipe.constprop.0+0x68>)
 8009606:	4815      	ldr	r0, [pc, #84]	@ (800965c <chFactoryCreatePipe.constprop.0+0x6c>)
 8009608:	2270      	movs	r2, #112	@ 0x70
 800960a:	f7fc fc19 	bl	8005e40 <dyn_create_object_heap.lto_priv.0>
  if (dpp != NULL) {
 800960e:	4604      	mov	r4, r0
 8009610:	b1d0      	cbz	r0, 8009648 <chFactoryCreatePipe.constprop.0+0x58>
    chPipeObjectInit(&dpp->pipe, dpp->buffer, size);
 8009612:	f100 0360 	add.w	r3, r0, #96	@ 0x60
  queue_init(&mp->queue);
 8009616:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 800961a:	f100 0240 	add.w	r2, r0, #64	@ 0x40
  pp->top    = &buf[n];
 800961e:	3070      	adds	r0, #112	@ 0x70
  pp->buffer = buf;
 8009620:	e9c4 3004 	strd	r3, r0, [r4, #16]
  pp->wrptr  = buf;
 8009624:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8009628:	f104 0350 	add.w	r3, r4, #80	@ 0x50
  pp->wtr    = NULL;
 800962c:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
 8009630:	e9c4 110c 	strd	r1, r1, [r4, #48]	@ 0x30
 8009634:	e9c4 2210 	strd	r2, r2, [r4, #64]	@ 0x40
 8009638:	e9c4 3314 	strd	r3, r3, [r4, #80]	@ 0x50
  pp->cnt    = (size_t)0;
 800963c:	6225      	str	r5, [r4, #32]
  pp->reset  = false;
 800963e:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
  mp->owner = NULL;
 8009642:	63a5      	str	r5, [r4, #56]	@ 0x38
 8009644:	64a5      	str	r5, [r4, #72]	@ 0x48
 8009646:	65a5      	str	r5, [r4, #88]	@ 0x58
  F_UNLOCK();
 8009648:	4802      	ldr	r0, [pc, #8]	@ (8009654 <chFactoryCreatePipe.constprop.0+0x64>)
 800964a:	f7fb fe69 	bl	8005320 <chMtxUnlock>
}
 800964e:	4620      	mov	r0, r4
 8009650:	bd38      	pop	{r3, r4, r5, pc}
 8009652:	bf00      	nop
 8009654:	200010d8 	.word	0x200010d8
 8009658:	2000111c 	.word	0x2000111c
 800965c:	0800c218 	.word	0x0800c218

08009660 <oslib_test_005_006_execute>:

static void oslib_test_005_006_execute(void) {
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [5.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 8009662:	4f48      	ldr	r7, [pc, #288]	@ (8009784 <oslib_test_005_006_execute+0x124>)
 8009664:	2301      	movs	r3, #1
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	2320      	movs	r3, #32
 800966a:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800966e:	4d46      	ldr	r5, [pc, #280]	@ (8009788 <oslib_test_005_006_execute+0x128>)
 8009670:	4628      	mov	r0, r5
 8009672:	f7fb fdb5 	bl	80051e0 <chMtxLockS>
 8009676:	2300      	movs	r3, #0
 8009678:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800967c:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 8009680:	42ac      	cmp	r4, r5
 8009682:	d01b      	beq.n	80096bc <oslib_test_005_006_execute+0x5c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009684:	4e41      	ldr	r6, [pc, #260]	@ (800978c <oslib_test_005_006_execute+0x12c>)
 8009686:	e002      	b.n	800968e <oslib_test_005_006_execute+0x2e>
    p = p->next;
 8009688:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800968a:	42ac      	cmp	r4, r5
 800968c:	d016      	beq.n	80096bc <oslib_test_005_006_execute+0x5c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800968e:	4631      	mov	r1, r6
 8009690:	f104 0008 	add.w	r0, r4, #8
 8009694:	f7f6 feb4 	bl	8000400 <strcmp>
 8009698:	2800      	cmp	r0, #0
 800969a:	d1f5      	bne.n	8009688 <oslib_test_005_006_execute+0x28>
  if (dep != NULL) {
 800969c:	b174      	cbz	r4, 80096bc <oslib_test_005_006_execute+0x5c>
    dep->refs++;
 800969e:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 80096a0:	4839      	ldr	r0, [pc, #228]	@ (8009788 <oslib_test_005_006_execute+0x128>)
    dep->refs++;
 80096a2:	3301      	adds	r3, #1
 80096a4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 80096a6:	f7fb fe3b 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 80096aa:	4c39      	ldr	r4, [pc, #228]	@ (8009790 <oslib_test_005_006_execute+0x130>)
  test_global_fail     = true;
 80096ac:	4839      	ldr	r0, [pc, #228]	@ (8009794 <oslib_test_005_006_execute+0x134>)
  test_failure_message = msg;
 80096ae:	4a3a      	ldr	r2, [pc, #232]	@ (8009798 <oslib_test_005_006_execute+0x138>)
 80096b0:	493a      	ldr	r1, [pc, #232]	@ (800979c <oslib_test_005_006_execute+0x13c>)
 80096b2:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80096b4:	2301      	movs	r3, #1
 80096b6:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80096b8:	7003      	strb	r3, [r0, #0]
  test_set_step(6);
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
}
 80096ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096bc:	4832      	ldr	r0, [pc, #200]	@ (8009788 <oslib_test_005_006_execute+0x128>)
 80096be:	f7fb fe2f 	bl	8005320 <chMtxUnlock>
  test_set_step(2);
 80096c2:	2302      	movs	r3, #2
 80096c4:	603b      	str	r3, [r7, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 80096c6:	f7ff ff93 	bl	80095f0 <chFactoryCreatePipe.constprop.0>
  if (!condition)
 80096ca:	4604      	mov	r4, r0
 80096cc:	b360      	cbz	r0, 8009728 <oslib_test_005_006_execute+0xc8>
  test_set_step(3);
 80096ce:	2503      	movs	r5, #3
 80096d0:	603d      	str	r5, [r7, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 80096d2:	f7ff ff8d 	bl	80095f0 <chFactoryCreatePipe.constprop.0>
 80096d6:	bb80      	cbnz	r0, 800973a <oslib_test_005_006_execute+0xda>
  test_set_step(4);
 80096d8:	2304      	movs	r3, #4
 80096da:	603b      	str	r3, [r7, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 80096dc:	f7ff fcc0 	bl	8009060 <chFactoryFindPipe.constprop.0>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d033      	beq.n	800974c <oslib_test_005_006_execute+0xec>
 80096e4:	4284      	cmp	r4, r0
 80096e6:	d13a      	bne.n	800975e <oslib_test_005_006_execute+0xfe>
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d137      	bne.n	800975e <oslib_test_005_006_execute+0xfe>
 80096ee:	6065      	str	r5, [r4, #4]
    chFactoryReleasePipe(dpp2);
 80096f0:	f7fc fc96 	bl	8006020 <chFactoryReleasePipe>
 80096f4:	6863      	ldr	r3, [r4, #4]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d13a      	bne.n	8009770 <oslib_test_005_006_execute+0x110>
    chFactoryReleasePipe(dpp1);
 80096fa:	4620      	mov	r0, r4
 80096fc:	f7fc fc90 	bl	8006020 <chFactoryReleasePipe>
 8009700:	6863      	ldr	r3, [r4, #4]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d134      	bne.n	8009770 <oslib_test_005_006_execute+0x110>
  test_set_step(5);
 8009706:	2305      	movs	r3, #5
    chFactoryReleasePipe(dpp);
 8009708:	4620      	mov	r0, r4
  test_set_step(5);
 800970a:	603b      	str	r3, [r7, #0]
    chFactoryReleasePipe(dpp);
 800970c:	f7fc fc88 	bl	8006020 <chFactoryReleasePipe>
  test_set_step(6);
 8009710:	2306      	movs	r3, #6
 8009712:	603b      	str	r3, [r7, #0]
    dpp = chFactoryFindPipe("mypipe");
 8009714:	f7ff fca4 	bl	8009060 <chFactoryFindPipe.constprop.0>
    test_assert(dpp == NULL, "found");
 8009718:	fab0 f080 	clz	r0, r0
}
 800971c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 8009720:	491e      	ldr	r1, [pc, #120]	@ (800979c <oslib_test_005_006_execute+0x13c>)
 8009722:	0940      	lsrs	r0, r0, #5
 8009724:	f7fc bccc 	b.w	80060c0 <_test_assert>
  test_local_fail      = true;
 8009728:	4c19      	ldr	r4, [pc, #100]	@ (8009790 <oslib_test_005_006_execute+0x130>)
  test_global_fail     = true;
 800972a:	481a      	ldr	r0, [pc, #104]	@ (8009794 <oslib_test_005_006_execute+0x134>)
  test_failure_message = msg;
 800972c:	4a1a      	ldr	r2, [pc, #104]	@ (8009798 <oslib_test_005_006_execute+0x138>)
 800972e:	491c      	ldr	r1, [pc, #112]	@ (80097a0 <oslib_test_005_006_execute+0x140>)
 8009730:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009732:	2301      	movs	r3, #1
 8009734:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009736:	7003      	strb	r3, [r0, #0]
}
 8009738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800973a:	4c15      	ldr	r4, [pc, #84]	@ (8009790 <oslib_test_005_006_execute+0x130>)
  test_global_fail     = true;
 800973c:	4815      	ldr	r0, [pc, #84]	@ (8009794 <oslib_test_005_006_execute+0x134>)
  test_failure_message = msg;
 800973e:	4a16      	ldr	r2, [pc, #88]	@ (8009798 <oslib_test_005_006_execute+0x138>)
 8009740:	4918      	ldr	r1, [pc, #96]	@ (80097a4 <oslib_test_005_006_execute+0x144>)
 8009742:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009744:	2301      	movs	r3, #1
 8009746:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009748:	7003      	strb	r3, [r0, #0]
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800974c:	4c10      	ldr	r4, [pc, #64]	@ (8009790 <oslib_test_005_006_execute+0x130>)
  test_global_fail     = true;
 800974e:	4811      	ldr	r0, [pc, #68]	@ (8009794 <oslib_test_005_006_execute+0x134>)
  test_failure_message = msg;
 8009750:	4a11      	ldr	r2, [pc, #68]	@ (8009798 <oslib_test_005_006_execute+0x138>)
 8009752:	4915      	ldr	r1, [pc, #84]	@ (80097a8 <oslib_test_005_006_execute+0x148>)
 8009754:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009756:	2301      	movs	r3, #1
 8009758:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800975a:	7003      	strb	r3, [r0, #0]
 800975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800975e:	4c0c      	ldr	r4, [pc, #48]	@ (8009790 <oslib_test_005_006_execute+0x130>)
  test_global_fail     = true;
 8009760:	480c      	ldr	r0, [pc, #48]	@ (8009794 <oslib_test_005_006_execute+0x134>)
  test_failure_message = msg;
 8009762:	4a0d      	ldr	r2, [pc, #52]	@ (8009798 <oslib_test_005_006_execute+0x138>)
 8009764:	4911      	ldr	r1, [pc, #68]	@ (80097ac <oslib_test_005_006_execute+0x14c>)
 8009766:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009768:	2301      	movs	r3, #1
 800976a:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800976c:	7003      	strb	r3, [r0, #0]
 800976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009770:	4c07      	ldr	r4, [pc, #28]	@ (8009790 <oslib_test_005_006_execute+0x130>)
  test_global_fail     = true;
 8009772:	4808      	ldr	r0, [pc, #32]	@ (8009794 <oslib_test_005_006_execute+0x134>)
  test_failure_message = msg;
 8009774:	4a08      	ldr	r2, [pc, #32]	@ (8009798 <oslib_test_005_006_execute+0x138>)
 8009776:	490e      	ldr	r1, [pc, #56]	@ (80097b0 <oslib_test_005_006_execute+0x150>)
 8009778:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 800977a:	2301      	movs	r3, #1
 800977c:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 800977e:	7003      	strb	r3, [r0, #0]
 8009780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009782:	bf00      	nop
 8009784:	200010b4 	.word	0x200010b4
 8009788:	200010d8 	.word	0x200010d8
 800978c:	0800c218 	.word	0x0800c218
 8009790:	200010d1 	.word	0x200010d1
 8009794:	200010d0 	.word	0x200010d0
 8009798:	200010cc 	.word	0x200010cc
 800979c:	0800b688 	.word	0x0800b688
 80097a0:	0800b6d0 	.word	0x0800b6d0
 80097a4:	0800b6e0 	.word	0x0800b6e0
 80097a8:	0800b684 	.word	0x0800b684
 80097ac:	0800b6a0 	.word	0x0800b6a0
 80097b0:	0800b6bc 	.word	0x0800b6bc
	...

080097c0 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80097c0:	b580      	push	{r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80097c2:	4c29      	ldr	r4, [pc, #164]	@ (8009868 <Thread1+0xa8>)
 80097c4:	4a29      	ldr	r2, [pc, #164]	@ (800986c <Thread1+0xac>)
 80097c6:	69a3      	ldr	r3, [r4, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 80097c8:	4f29      	ldr	r7, [pc, #164]	@ (8009870 <Thread1+0xb0>)
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80097ca:	4e2a      	ldr	r6, [pc, #168]	@ (8009874 <Thread1+0xb4>)
 80097cc:	619a      	str	r2, [r3, #24]
 80097ce:	f44f 5800 	mov.w	r8, #8192	@ 0x2000
static THD_FUNCTION(Thread1, arg) {
 80097d2:	b086      	sub	sp, #24
    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 80097d4:	46c1      	mov	r9, r8
 80097d6:	2520      	movs	r5, #32
 80097d8:	f8a7 9018 	strh.w	r9, [r7, #24]
 80097dc:	f385 8811 	msr	BASEPRI, r5
 80097e0:	f8d4 a018 	ldr.w	sl, [r4, #24]
 80097e4:	4632      	mov	r2, r6
 80097e6:	4653      	mov	r3, sl
 80097e8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80097ec:	a801      	add	r0, sp, #4
 80097ee:	f7f9 f85f 	bl	80028b0 <chVTDoSetI>
  thread_t *tp = tqp->next;
 80097f2:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80097f4:	2308      	movs	r3, #8
 80097f6:	f88a 3020 	strb.w	r3, [sl, #32]
  tqp->next             = tp->queue.next;
 80097fa:	6803      	ldr	r3, [r0, #0]
 80097fc:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 80097fe:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8009800:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8009802:	4651      	mov	r1, sl
  currp->state = CH_STATE_CURRENT;
 8009804:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8009808:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 800980a:	f7f6 fd59 	bl	80002c0 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 800980e:	9b04      	ldr	r3, [sp, #16]
      chVTDoResetI(&vt);
 8009810:	a801      	add	r0, sp, #4
    if (chVTIsArmedI(&vt)) {
 8009812:	b10b      	cbz	r3, 8009818 <Thread1+0x58>
      chVTDoResetI(&vt);
 8009814:	f7f9 f894 	bl	8002940 <chVTDoResetI>
 8009818:	2300      	movs	r3, #0
 800981a:	f383 8811 	msr	BASEPRI, r3
    chThdSleepMilliseconds(500);
    palClearPad(GPIOD, GPIOD_LED3);     /* Orange.  */
 800981e:	f8a7 801a 	strh.w	r8, [r7, #26]
 8009822:	f385 8811 	msr	BASEPRI, r5
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8009826:	f8d4 a018 	ldr.w	sl, [r4, #24]
 800982a:	4632      	mov	r2, r6
 800982c:	4653      	mov	r3, sl
 800982e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009832:	a801      	add	r0, sp, #4
 8009834:	f7f9 f83c 	bl	80028b0 <chVTDoSetI>
  thread_t *tp = tqp->next;
 8009838:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800983a:	2308      	movs	r3, #8
 800983c:	f88a 3020 	strb.w	r3, [sl, #32]
  tqp->next             = tp->queue.next;
 8009840:	6803      	ldr	r3, [r0, #0]
 8009842:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8009844:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8009846:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8009848:	4651      	mov	r1, sl
  currp->state = CH_STATE_CURRENT;
 800984a:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800984e:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8009850:	f7f6 fd36 	bl	80002c0 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8009854:	9b04      	ldr	r3, [sp, #16]
      chVTDoResetI(&vt);
 8009856:	a801      	add	r0, sp, #4
    if (chVTIsArmedI(&vt)) {
 8009858:	b10b      	cbz	r3, 800985e <Thread1+0x9e>
      chVTDoResetI(&vt);
 800985a:	f7f9 f871 	bl	8002940 <chVTDoResetI>
 800985e:	2300      	movs	r3, #0
 8009860:	f383 8811 	msr	BASEPRI, r3
}
 8009864:	e7b8      	b.n	80097d8 <Thread1+0x18>
 8009866:	bf00      	nop
 8009868:	200011c0 	.word	0x200011c0
 800986c:	0800c230 	.word	0x0800c230
 8009870:	40020c00 	.word	0x40020c00
 8009874:	08000931 	.word	0x08000931
	...

08009880 <chFactoryCreateObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	f04f 0920 	mov.w	r9, #32
 8009888:	b083      	sub	sp, #12
 800988a:	f389 8811 	msr	BASEPRI, r9
 800988e:	4839      	ldr	r0, [pc, #228]	@ (8009974 <chFactoryCreateObjectsFIFO.constprop.0+0xf4>)
 8009890:	f7fb fca6 	bl	80051e0 <chMtxLockS>
 8009894:	f04f 0800 	mov.w	r8, #0
 8009898:	f388 8811 	msr	BASEPRI, r8
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 800989c:	4936      	ldr	r1, [pc, #216]	@ (8009978 <chFactoryCreateObjectsFIFO.constprop.0+0xf8>)
 800989e:	4837      	ldr	r0, [pc, #220]	@ (800997c <chFactoryCreateObjectsFIFO.constprop.0+0xfc>)
 80098a0:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 80098a4:	f7fc facc 	bl	8005e40 <dyn_create_object_heap.lto_priv.0>
  if (dofp != NULL) {
 80098a8:	4604      	mov	r4, r0
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d045      	beq.n	800993a <chFactoryCreateObjectsFIFO.constprop.0+0xba>
                            (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 80098ae:	f100 0354 	add.w	r3, r0, #84	@ 0x54
  mp->object_size = size;
 80098b2:	2610      	movs	r6, #16
 80098b4:	f100 0594 	add.w	r5, r0, #148	@ 0x94
 80098b8:	9301      	str	r3, [sp, #4]
  queue_init(&sp->queue);
 80098ba:	eb00 0b06 	add.w	fp, r0, r6
 80098be:	2304      	movs	r3, #4
  tqp->next = (thread_t *)tqp;
 80098c0:	e9c0 bb04 	strd	fp, fp, [r0, #16]
 80098c4:	4f2e      	ldr	r7, [pc, #184]	@ (8009980 <chFactoryCreateObjectsFIFO.constprop.0+0x100>)
 80098c6:	9500      	str	r5, [sp, #0]
  mp->next = NULL;
 80098c8:	f8c0 801c 	str.w	r8, [r0, #28]
  mp->provider = provider;
 80098cc:	f8c0 8028 	str.w	r8, [r0, #40]	@ 0x28
  sp->cnt = n;
 80098d0:	f8c0 8018 	str.w	r8, [r0, #24]
  mp->object_size = size;
 80098d4:	6206      	str	r6, [r0, #32]
 80098d6:	6243      	str	r3, [r0, #36]	@ 0x24
    tp->u.rdymsg = MSG_OK;
 80098d8:	46c2      	mov	sl, r8
 80098da:	e005      	b.n	80098e8 <chFactoryCreateObjectsFIFO.constprop.0+0x68>
 80098dc:	f38a 8811 	msr	BASEPRI, sl
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80098e0:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 80098e2:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80098e4:	441d      	add	r5, r3
  while (n != 0U) {
 80098e6:	d017      	beq.n	8009918 <chFactoryCreateObjectsFIFO.constprop.0+0x98>
 80098e8:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 80098ec:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
  if (++sp->cnt <= (cnt_t)0) {
 80098f0:	3301      	adds	r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	602a      	str	r2, [r5, #0]
 80098f6:	e9c4 3506 	strd	r3, r5, [r4, #24]
 80098fa:	dd25      	ble.n	8009948 <chFactoryCreateObjectsFIFO.constprop.0+0xc8>
  return firstprio(&ch.rlist.queue) > currp->prio;
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	69bb      	ldr	r3, [r7, #24]
  if (chSchIsRescRequiredI()) {
 8009900:	6892      	ldr	r2, [r2, #8]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	429a      	cmp	r2, r3
 8009906:	d9e9      	bls.n	80098dc <chFactoryCreateObjectsFIFO.constprop.0+0x5c>
    chSchDoRescheduleAhead();
 8009908:	f7fa fb22 	bl	8003f50 <chSchDoReschedule>
 800990c:	f38a 8811 	msr	BASEPRI, sl
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8009910:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 8009912:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8009914:	441d      	add	r5, r3
  while (n != 0U) {
 8009916:	d1e7      	bne.n	80098e8 <chFactoryCreateObjectsFIFO.constprop.0+0x68>
  mbp->buffer = buf;
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  mbp->wrptr  = buf;
 800991c:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
  mbp->top    = &buf[n];
 8009920:	9b00      	ldr	r3, [sp, #0]
 8009922:	6323      	str	r3, [r4, #48]	@ 0x30
  chThdQueueObjectInit(&mbp->qw);
 8009924:	f104 0244 	add.w	r2, r4, #68	@ 0x44
  chThdQueueObjectInit(&mbp->qr);
 8009928:	f104 034c 	add.w	r3, r4, #76	@ 0x4c
  tqp->prev = (thread_t *)tqp;
 800992c:	e9c4 2211 	strd	r2, r2, [r4, #68]	@ 0x44
 8009930:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  mbp->cnt    = (size_t)0;
 8009934:	63e6      	str	r6, [r4, #60]	@ 0x3c
  mbp->reset  = false;
 8009936:	f884 6040 	strb.w	r6, [r4, #64]	@ 0x40
  F_UNLOCK();
 800993a:	480e      	ldr	r0, [pc, #56]	@ (8009974 <chFactoryCreateObjectsFIFO.constprop.0+0xf4>)
 800993c:	f7fb fcf0 	bl	8005320 <chMtxUnlock>
}
 8009940:	4620      	mov	r0, r4
 8009942:	b003      	add	sp, #12
 8009944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  thread_t *tp = tqp->next;
 8009948:	6920      	ldr	r0, [r4, #16]
  cp = (thread_t *)&ch.rlist.queue;
 800994a:	4a0d      	ldr	r2, [pc, #52]	@ (8009980 <chFactoryCreateObjectsFIFO.constprop.0+0x100>)
  tqp->next             = tp->queue.next;
 800994c:	6803      	ldr	r3, [r0, #0]
  } while (cp->prio >= tp->prio);
 800994e:	6881      	ldr	r1, [r0, #8]
 8009950:	6123      	str	r3, [r4, #16]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009952:	f8c3 b004 	str.w	fp, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 8009956:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800995a:	f880 8020 	strb.w	r8, [r0, #32]
    cp = cp->queue.next;
 800995e:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8009960:	6893      	ldr	r3, [r2, #8]
 8009962:	428b      	cmp	r3, r1
 8009964:	d2fb      	bcs.n	800995e <chFactoryCreateObjectsFIFO.constprop.0+0xde>
  tp->queue.prev             = cp->queue.prev;
 8009966:	6853      	ldr	r3, [r2, #4]
  tp->queue.next             = cp;
 8009968:	6002      	str	r2, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 800996a:	6043      	str	r3, [r0, #4]
  tp->queue.prev->queue.next = tp;
 800996c:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 800996e:	6050      	str	r0, [r2, #4]
  return tp;
 8009970:	e7c4      	b.n	80098fc <chFactoryCreateObjectsFIFO.constprop.0+0x7c>
 8009972:	bf00      	nop
 8009974:	200010d8 	.word	0x200010d8
 8009978:	20001118 	.word	0x20001118
 800997c:	0800c220 	.word	0x0800c220
 8009980:	200011c0 	.word	0x200011c0
	...

08009990 <oslib_test_005_005_execute>:
static void oslib_test_005_005_execute(void) {
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8009992:	4f48      	ldr	r7, [pc, #288]	@ (8009ab4 <oslib_test_005_005_execute+0x124>)
 8009994:	2301      	movs	r3, #1
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	2320      	movs	r3, #32
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	4d46      	ldr	r5, [pc, #280]	@ (8009ab8 <oslib_test_005_005_execute+0x128>)
 80099a0:	4628      	mov	r0, r5
 80099a2:	f7fb fc1d 	bl	80051e0 <chMtxLockS>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80099ac:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 80099b0:	42ac      	cmp	r4, r5
 80099b2:	d01b      	beq.n	80099ec <oslib_test_005_005_execute+0x5c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80099b4:	4e41      	ldr	r6, [pc, #260]	@ (8009abc <oslib_test_005_005_execute+0x12c>)
 80099b6:	e002      	b.n	80099be <oslib_test_005_005_execute+0x2e>
    p = p->next;
 80099b8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80099ba:	42ac      	cmp	r4, r5
 80099bc:	d016      	beq.n	80099ec <oslib_test_005_005_execute+0x5c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80099be:	4631      	mov	r1, r6
 80099c0:	f104 0008 	add.w	r0, r4, #8
 80099c4:	f7f6 fd1c 	bl	8000400 <strcmp>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d1f5      	bne.n	80099b8 <oslib_test_005_005_execute+0x28>
  if (dep != NULL) {
 80099cc:	b174      	cbz	r4, 80099ec <oslib_test_005_005_execute+0x5c>
    dep->refs++;
 80099ce:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 80099d0:	4839      	ldr	r0, [pc, #228]	@ (8009ab8 <oslib_test_005_005_execute+0x128>)
    dep->refs++;
 80099d2:	3301      	adds	r3, #1
 80099d4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 80099d6:	f7fb fca3 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 80099da:	4c39      	ldr	r4, [pc, #228]	@ (8009ac0 <oslib_test_005_005_execute+0x130>)
  test_global_fail     = true;
 80099dc:	4839      	ldr	r0, [pc, #228]	@ (8009ac4 <oslib_test_005_005_execute+0x134>)
  test_failure_message = msg;
 80099de:	4a3a      	ldr	r2, [pc, #232]	@ (8009ac8 <oslib_test_005_005_execute+0x138>)
 80099e0:	493a      	ldr	r1, [pc, #232]	@ (8009acc <oslib_test_005_005_execute+0x13c>)
 80099e2:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 80099e4:	2301      	movs	r3, #1
 80099e6:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 80099e8:	7003      	strb	r3, [r0, #0]
}
 80099ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ec:	4832      	ldr	r0, [pc, #200]	@ (8009ab8 <oslib_test_005_005_execute+0x128>)
 80099ee:	f7fb fc97 	bl	8005320 <chMtxUnlock>
  test_set_step(2);
 80099f2:	2302      	movs	r3, #2
 80099f4:	603b      	str	r3, [r7, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 80099f6:	f7ff ff43 	bl	8009880 <chFactoryCreateObjectsFIFO.constprop.0>
  if (!condition)
 80099fa:	4604      	mov	r4, r0
 80099fc:	b360      	cbz	r0, 8009a58 <oslib_test_005_005_execute+0xc8>
  test_set_step(3);
 80099fe:	2503      	movs	r5, #3
 8009a00:	603d      	str	r5, [r7, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8009a02:	f7ff ff3d 	bl	8009880 <chFactoryCreateObjectsFIFO.constprop.0>
 8009a06:	bb80      	cbnz	r0, 8009a6a <oslib_test_005_005_execute+0xda>
  test_set_step(4);
 8009a08:	2304      	movs	r3, #4
 8009a0a:	603b      	str	r3, [r7, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8009a0c:	f7ff fb58 	bl	80090c0 <chFactoryFindObjectsFIFO.constprop.0>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d033      	beq.n	8009a7c <oslib_test_005_005_execute+0xec>
 8009a14:	4284      	cmp	r4, r0
 8009a16:	d13a      	bne.n	8009a8e <oslib_test_005_005_execute+0xfe>
 8009a18:	6863      	ldr	r3, [r4, #4]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d137      	bne.n	8009a8e <oslib_test_005_005_execute+0xfe>
 8009a1e:	6065      	str	r5, [r4, #4]
    chFactoryReleaseObjectsFIFO(dofp2);
 8009a20:	f7fc fad6 	bl	8005fd0 <chFactoryReleaseObjectsFIFO>
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d13a      	bne.n	8009aa0 <oslib_test_005_005_execute+0x110>
    chFactoryReleaseObjectsFIFO(dofp1);
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7fc fad0 	bl	8005fd0 <chFactoryReleaseObjectsFIFO>
 8009a30:	6863      	ldr	r3, [r4, #4]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d134      	bne.n	8009aa0 <oslib_test_005_005_execute+0x110>
  test_set_step(5);
 8009a36:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 8009a38:	4620      	mov	r0, r4
  test_set_step(5);
 8009a3a:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 8009a3c:	f7fc fac8 	bl	8005fd0 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 8009a40:	2306      	movs	r3, #6
 8009a42:	603b      	str	r3, [r7, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8009a44:	f7ff fb3c 	bl	80090c0 <chFactoryFindObjectsFIFO.constprop.0>
    test_assert(dofp == NULL, "found");
 8009a48:	fab0 f080 	clz	r0, r0
}
 8009a4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8009a50:	491e      	ldr	r1, [pc, #120]	@ (8009acc <oslib_test_005_005_execute+0x13c>)
 8009a52:	0940      	lsrs	r0, r0, #5
 8009a54:	f7fc bb34 	b.w	80060c0 <_test_assert>
  test_local_fail      = true;
 8009a58:	4c19      	ldr	r4, [pc, #100]	@ (8009ac0 <oslib_test_005_005_execute+0x130>)
  test_global_fail     = true;
 8009a5a:	481a      	ldr	r0, [pc, #104]	@ (8009ac4 <oslib_test_005_005_execute+0x134>)
  test_failure_message = msg;
 8009a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ac8 <oslib_test_005_005_execute+0x138>)
 8009a5e:	491c      	ldr	r1, [pc, #112]	@ (8009ad0 <oslib_test_005_005_execute+0x140>)
 8009a60:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009a62:	2301      	movs	r3, #1
 8009a64:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009a66:	7003      	strb	r3, [r0, #0]
}
 8009a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009a6a:	4c15      	ldr	r4, [pc, #84]	@ (8009ac0 <oslib_test_005_005_execute+0x130>)
  test_global_fail     = true;
 8009a6c:	4815      	ldr	r0, [pc, #84]	@ (8009ac4 <oslib_test_005_005_execute+0x134>)
  test_failure_message = msg;
 8009a6e:	4a16      	ldr	r2, [pc, #88]	@ (8009ac8 <oslib_test_005_005_execute+0x138>)
 8009a70:	4918      	ldr	r1, [pc, #96]	@ (8009ad4 <oslib_test_005_005_execute+0x144>)
 8009a72:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009a74:	2301      	movs	r3, #1
 8009a76:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009a78:	7003      	strb	r3, [r0, #0]
 8009a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009a7c:	4c10      	ldr	r4, [pc, #64]	@ (8009ac0 <oslib_test_005_005_execute+0x130>)
  test_global_fail     = true;
 8009a7e:	4811      	ldr	r0, [pc, #68]	@ (8009ac4 <oslib_test_005_005_execute+0x134>)
  test_failure_message = msg;
 8009a80:	4a11      	ldr	r2, [pc, #68]	@ (8009ac8 <oslib_test_005_005_execute+0x138>)
 8009a82:	4915      	ldr	r1, [pc, #84]	@ (8009ad8 <oslib_test_005_005_execute+0x148>)
 8009a84:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009a86:	2301      	movs	r3, #1
 8009a88:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009a8a:	7003      	strb	r3, [r0, #0]
 8009a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8009ac0 <oslib_test_005_005_execute+0x130>)
  test_global_fail     = true;
 8009a90:	480c      	ldr	r0, [pc, #48]	@ (8009ac4 <oslib_test_005_005_execute+0x134>)
  test_failure_message = msg;
 8009a92:	4a0d      	ldr	r2, [pc, #52]	@ (8009ac8 <oslib_test_005_005_execute+0x138>)
 8009a94:	4911      	ldr	r1, [pc, #68]	@ (8009adc <oslib_test_005_005_execute+0x14c>)
 8009a96:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009a9c:	7003      	strb	r3, [r0, #0]
 8009a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009aa0:	4c07      	ldr	r4, [pc, #28]	@ (8009ac0 <oslib_test_005_005_execute+0x130>)
  test_global_fail     = true;
 8009aa2:	4808      	ldr	r0, [pc, #32]	@ (8009ac4 <oslib_test_005_005_execute+0x134>)
  test_failure_message = msg;
 8009aa4:	4a08      	ldr	r2, [pc, #32]	@ (8009ac8 <oslib_test_005_005_execute+0x138>)
 8009aa6:	490e      	ldr	r1, [pc, #56]	@ (8009ae0 <oslib_test_005_005_execute+0x150>)
 8009aa8:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009aae:	7003      	strb	r3, [r0, #0]
 8009ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	200010b4 	.word	0x200010b4
 8009ab8:	200010d8 	.word	0x200010d8
 8009abc:	0800c220 	.word	0x0800c220
 8009ac0:	200010d1 	.word	0x200010d1
 8009ac4:	200010d0 	.word	0x200010d0
 8009ac8:	200010cc 	.word	0x200010cc
 8009acc:	0800b688 	.word	0x0800b688
 8009ad0:	0800b6d0 	.word	0x0800b6d0
 8009ad4:	0800b6e0 	.word	0x0800b6e0
 8009ad8:	0800b684 	.word	0x0800b684
 8009adc:	0800b6a0 	.word	0x0800b6a0
 8009ae0:	0800b6bc 	.word	0x0800b6bc
	...

08009af0 <chFactoryCreateSemaphore.constprop.0>:
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	2320      	movs	r3, #32
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	4f26      	ldr	r7, [pc, #152]	@ (8009b94 <chFactoryCreateSemaphore.constprop.0+0xa4>)
 8009afa:	4638      	mov	r0, r7
 8009afc:	f7fb fb70 	bl	80051e0 <chMtxLockS>
 8009b00:	2300      	movs	r3, #0
 8009b02:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009b06:	463d      	mov	r5, r7
 8009b08:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 8009b0c:	42ac      	cmp	r4, r5
 8009b0e:	d012      	beq.n	8009b36 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009b10:	4e21      	ldr	r6, [pc, #132]	@ (8009b98 <chFactoryCreateSemaphore.constprop.0+0xa8>)
 8009b12:	e002      	b.n	8009b1a <chFactoryCreateSemaphore.constprop.0+0x2a>
    p = p->next;
 8009b14:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009b16:	42ac      	cmp	r4, r5
 8009b18:	d00d      	beq.n	8009b36 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	f104 0008 	add.w	r0, r4, #8
 8009b20:	f7f6 fc6e 	bl	8000400 <strcmp>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d1f5      	bne.n	8009b14 <chFactoryCreateSemaphore.constprop.0+0x24>
  if (dep != NULL) {
 8009b28:	b12c      	cbz	r4, 8009b36 <chFactoryCreateSemaphore.constprop.0+0x46>
  F_UNLOCK();
 8009b2a:	481a      	ldr	r0, [pc, #104]	@ (8009b94 <chFactoryCreateSemaphore.constprop.0+0xa4>)
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8009b2c:	2400      	movs	r4, #0
  F_UNLOCK();
 8009b2e:	f7fb fbf7 	bl	8005320 <chMtxUnlock>
}
 8009b32:	4620      	mov	r0, r4
 8009b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b36:	2320      	movs	r3, #32
 8009b38:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8009b3c:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
  if (objp != NULL) {
 8009b3e:	b1cc      	cbz	r4, 8009b74 <chFactoryCreateSemaphore.constprop.0+0x84>
    mp->next = mp->next->next;
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b44:	2300      	movs	r3, #0
 8009b46:	f383 8811 	msr	BASEPRI, r3
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	18a0      	adds	r0, r4, r2
 8009b4e:	4912      	ldr	r1, [pc, #72]	@ (8009b98 <chFactoryCreateSemaphore.constprop.0+0xa8>)
 8009b50:	f7f6 fbca 	bl	80002e8 <strncpy>
  dep->refs = (ucnt_t)1;
 8009b54:	2301      	movs	r3, #1
  dep->next = dlp->next;
 8009b56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
  dep->refs = (ucnt_t)1;
 8009b58:	6063      	str	r3, [r4, #4]
  sp->cnt = n;
 8009b5a:	2200      	movs	r2, #0
  queue_init(&sp->queue);
 8009b5c:	f104 0310 	add.w	r3, r4, #16
  dep->next = dlp->next;
 8009b60:	6021      	str	r1, [r4, #0]
  F_UNLOCK();
 8009b62:	480c      	ldr	r0, [pc, #48]	@ (8009b94 <chFactoryCreateSemaphore.constprop.0+0xa4>)
  dlp->next = (dyn_element_t *)dep;
 8009b64:	62bc      	str	r4, [r7, #40]	@ 0x28
  tqp->next = (thread_t *)tqp;
 8009b66:	e9c4 3304 	strd	r3, r3, [r4, #16]
  sp->cnt = n;
 8009b6a:	61a2      	str	r2, [r4, #24]
  F_UNLOCK();
 8009b6c:	f7fb fbd8 	bl	8005320 <chMtxUnlock>
}
 8009b70:	4620      	mov	r0, r4
 8009b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (mp->provider != NULL) {
 8009b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b76:	b14b      	cbz	r3, 8009b8c <chFactoryCreateSemaphore.constprop.0+0x9c>
    objp = mp->provider(mp->object_size, mp->align);
 8009b78:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009b7c:	4798      	blx	r3
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4604      	mov	r4, r0
 8009b82:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d1df      	bne.n	8009b4a <chFactoryCreateSemaphore.constprop.0+0x5a>
 8009b8a:	e7ce      	b.n	8009b2a <chFactoryCreateSemaphore.constprop.0+0x3a>
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	e7cb      	b.n	8009b2a <chFactoryCreateSemaphore.constprop.0+0x3a>
 8009b92:	bf00      	nop
 8009b94:	200010d8 	.word	0x200010d8
 8009b98:	0800b50c 	.word	0x0800b50c
 8009b9c:	00000000 	.word	0x00000000

08009ba0 <oslib_test_005_003_execute>:
static void oslib_test_005_003_execute(void) {
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8009ba2:	4f4a      	ldr	r7, [pc, #296]	@ (8009ccc <oslib_test_005_003_execute+0x12c>)
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	4d48      	ldr	r5, [pc, #288]	@ (8009cd0 <oslib_test_005_003_execute+0x130>)
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f7fb fb15 	bl	80051e0 <chMtxLockS>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8009bbc:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 8009bc0:	42ac      	cmp	r4, r5
 8009bc2:	d01b      	beq.n	8009bfc <oslib_test_005_003_execute+0x5c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009bc4:	4e43      	ldr	r6, [pc, #268]	@ (8009cd4 <oslib_test_005_003_execute+0x134>)
 8009bc6:	e002      	b.n	8009bce <oslib_test_005_003_execute+0x2e>
    p = p->next;
 8009bc8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8009bca:	42ac      	cmp	r4, r5
 8009bcc:	d016      	beq.n	8009bfc <oslib_test_005_003_execute+0x5c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8009bce:	4631      	mov	r1, r6
 8009bd0:	f104 0008 	add.w	r0, r4, #8
 8009bd4:	f7f6 fc14 	bl	8000400 <strcmp>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d1f5      	bne.n	8009bc8 <oslib_test_005_003_execute+0x28>
  if (dep != NULL) {
 8009bdc:	b174      	cbz	r4, 8009bfc <oslib_test_005_003_execute+0x5c>
    dep->refs++;
 8009bde:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 8009be0:	483b      	ldr	r0, [pc, #236]	@ (8009cd0 <oslib_test_005_003_execute+0x130>)
    dep->refs++;
 8009be2:	3301      	adds	r3, #1
 8009be4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8009be6:	f7fb fb9b 	bl	8005320 <chMtxUnlock>
  test_local_fail      = true;
 8009bea:	4c3b      	ldr	r4, [pc, #236]	@ (8009cd8 <oslib_test_005_003_execute+0x138>)
  test_global_fail     = true;
 8009bec:	483b      	ldr	r0, [pc, #236]	@ (8009cdc <oslib_test_005_003_execute+0x13c>)
  test_failure_message = msg;
 8009bee:	4a3c      	ldr	r2, [pc, #240]	@ (8009ce0 <oslib_test_005_003_execute+0x140>)
 8009bf0:	493c      	ldr	r1, [pc, #240]	@ (8009ce4 <oslib_test_005_003_execute+0x144>)
 8009bf2:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009bf8:	7003      	strb	r3, [r0, #0]
}
 8009bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bfc:	4834      	ldr	r0, [pc, #208]	@ (8009cd0 <oslib_test_005_003_execute+0x130>)
 8009bfe:	f7fb fb8f 	bl	8005320 <chMtxUnlock>
  test_set_step(2);
 8009c02:	2302      	movs	r3, #2
 8009c04:	603b      	str	r3, [r7, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8009c06:	f7ff ff73 	bl	8009af0 <chFactoryCreateSemaphore.constprop.0>
  if (!condition)
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d02f      	beq.n	8009c70 <oslib_test_005_003_execute+0xd0>
  test_set_step(3);
 8009c10:	2503      	movs	r5, #3
 8009c12:	603d      	str	r5, [r7, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 8009c14:	f7ff ff6c 	bl	8009af0 <chFactoryCreateSemaphore.constprop.0>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d132      	bne.n	8009c82 <oslib_test_005_003_execute+0xe2>
  test_set_step(4);
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	603b      	str	r3, [r7, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8009c20:	f7ff faae 	bl	8009180 <chFactoryFindSemaphore.constprop.0>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d035      	beq.n	8009c94 <oslib_test_005_003_execute+0xf4>
 8009c28:	4284      	cmp	r4, r0
 8009c2a:	d13c      	bne.n	8009ca6 <oslib_test_005_003_execute+0x106>
 8009c2c:	6863      	ldr	r3, [r4, #4]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d139      	bne.n	8009ca6 <oslib_test_005_003_execute+0x106>
 8009c32:	6065      	str	r5, [r4, #4]
    chFactoryReleaseSemaphore(dsp2);
 8009c34:	f7fc f934 	bl	8005ea0 <chFactoryReleaseSemaphore>
 8009c38:	6863      	ldr	r3, [r4, #4]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d13c      	bne.n	8009cb8 <oslib_test_005_003_execute+0x118>
    chFactoryReleaseSemaphore(dsp1);
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f7fc f92e 	bl	8005ea0 <chFactoryReleaseSemaphore>
 8009c44:	6865      	ldr	r5, [r4, #4]
 8009c46:	2d01      	cmp	r5, #1
 8009c48:	d136      	bne.n	8009cb8 <oslib_test_005_003_execute+0x118>
  test_set_step(5);
 8009c4a:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 8009c4c:	4620      	mov	r0, r4
  test_set_step(5);
 8009c4e:	603b      	str	r3, [r7, #0]
    chFactoryReleaseSemaphore(dsp);
 8009c50:	f7fc f926 	bl	8005ea0 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8009c54:	2306      	movs	r3, #6
 8009c56:	603b      	str	r3, [r7, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8009c58:	f7ff fa92 	bl	8009180 <chFactoryFindSemaphore.constprop.0>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d0cc      	beq.n	8009bfa <oslib_test_005_003_execute+0x5a>
  test_local_fail      = true;
 8009c60:	481d      	ldr	r0, [pc, #116]	@ (8009cd8 <oslib_test_005_003_execute+0x138>)
  test_global_fail     = true;
 8009c62:	491e      	ldr	r1, [pc, #120]	@ (8009cdc <oslib_test_005_003_execute+0x13c>)
  test_failure_message = msg;
 8009c64:	4b1e      	ldr	r3, [pc, #120]	@ (8009ce0 <oslib_test_005_003_execute+0x140>)
 8009c66:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce4 <oslib_test_005_003_execute+0x144>)
  test_local_fail      = true;
 8009c68:	7005      	strb	r5, [r0, #0]
  test_global_fail     = true;
 8009c6a:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 8009c6c:	601a      	str	r2, [r3, #0]
}
 8009c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009c70:	4c19      	ldr	r4, [pc, #100]	@ (8009cd8 <oslib_test_005_003_execute+0x138>)
  test_global_fail     = true;
 8009c72:	481a      	ldr	r0, [pc, #104]	@ (8009cdc <oslib_test_005_003_execute+0x13c>)
  test_failure_message = msg;
 8009c74:	4a1a      	ldr	r2, [pc, #104]	@ (8009ce0 <oslib_test_005_003_execute+0x140>)
 8009c76:	491c      	ldr	r1, [pc, #112]	@ (8009ce8 <oslib_test_005_003_execute+0x148>)
 8009c78:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009c7e:	7003      	strb	r3, [r0, #0]
 8009c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009c82:	4c15      	ldr	r4, [pc, #84]	@ (8009cd8 <oslib_test_005_003_execute+0x138>)
  test_global_fail     = true;
 8009c84:	4815      	ldr	r0, [pc, #84]	@ (8009cdc <oslib_test_005_003_execute+0x13c>)
  test_failure_message = msg;
 8009c86:	4a16      	ldr	r2, [pc, #88]	@ (8009ce0 <oslib_test_005_003_execute+0x140>)
 8009c88:	4918      	ldr	r1, [pc, #96]	@ (8009cec <oslib_test_005_003_execute+0x14c>)
 8009c8a:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009c90:	7003      	strb	r3, [r0, #0]
 8009c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009c94:	4c10      	ldr	r4, [pc, #64]	@ (8009cd8 <oslib_test_005_003_execute+0x138>)
  test_global_fail     = true;
 8009c96:	4811      	ldr	r0, [pc, #68]	@ (8009cdc <oslib_test_005_003_execute+0x13c>)
  test_failure_message = msg;
 8009c98:	4a11      	ldr	r2, [pc, #68]	@ (8009ce0 <oslib_test_005_003_execute+0x140>)
 8009c9a:	4915      	ldr	r1, [pc, #84]	@ (8009cf0 <oslib_test_005_003_execute+0x150>)
 8009c9c:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009ca2:	7003      	strb	r3, [r0, #0]
 8009ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8009cd8 <oslib_test_005_003_execute+0x138>)
  test_global_fail     = true;
 8009ca8:	480c      	ldr	r0, [pc, #48]	@ (8009cdc <oslib_test_005_003_execute+0x13c>)
  test_failure_message = msg;
 8009caa:	4a0d      	ldr	r2, [pc, #52]	@ (8009ce0 <oslib_test_005_003_execute+0x140>)
 8009cac:	4911      	ldr	r1, [pc, #68]	@ (8009cf4 <oslib_test_005_003_execute+0x154>)
 8009cae:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009cb4:	7003      	strb	r3, [r0, #0]
 8009cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8009cb8:	4c07      	ldr	r4, [pc, #28]	@ (8009cd8 <oslib_test_005_003_execute+0x138>)
  test_global_fail     = true;
 8009cba:	4808      	ldr	r0, [pc, #32]	@ (8009cdc <oslib_test_005_003_execute+0x13c>)
  test_failure_message = msg;
 8009cbc:	4a08      	ldr	r2, [pc, #32]	@ (8009ce0 <oslib_test_005_003_execute+0x140>)
 8009cbe:	490e      	ldr	r1, [pc, #56]	@ (8009cf8 <oslib_test_005_003_execute+0x158>)
 8009cc0:	6011      	str	r1, [r2, #0]
  test_local_fail      = true;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	7023      	strb	r3, [r4, #0]
  test_global_fail     = true;
 8009cc6:	7003      	strb	r3, [r0, #0]
 8009cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200010b4 	.word	0x200010b4
 8009cd0:	200010d8 	.word	0x200010d8
 8009cd4:	0800b50c 	.word	0x0800b50c
 8009cd8:	200010d1 	.word	0x200010d1
 8009cdc:	200010d0 	.word	0x200010d0
 8009ce0:	200010cc 	.word	0x200010cc
 8009ce4:	0800b688 	.word	0x0800b688
 8009ce8:	0800b6d0 	.word	0x0800b6d0
 8009cec:	0800b6e0 	.word	0x0800b6e0
 8009cf0:	0800b684 	.word	0x0800b684
 8009cf4:	0800b6a0 	.word	0x0800b6a0
 8009cf8:	0800b6bc 	.word	0x0800b6bc
 8009cfc:	00000000 	.word	0x00000000

08009d00 <test_execute.constprop.0.isra.0>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	4683      	mov	fp, r0
  int tseq, tcase;

  test_chp = stream;
 8009d06:	4ca2      	ldr	r4, [pc, #648]	@ (8009f90 <test_execute.constprop.0.isra.0+0x290>)
 8009d08:	4ba2      	ldr	r3, [pc, #648]	@ (8009f94 <test_execute.constprop.0.isra.0+0x294>)
  test_println("");
 8009d0a:	48a3      	ldr	r0, [pc, #652]	@ (8009f98 <test_execute.constprop.0.isra.0+0x298>)
  test_chp = stream;
 8009d0c:	6023      	str	r3, [r4, #0]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8009d0e:	b089      	sub	sp, #36	@ 0x24
  test_println("");
 8009d10:	f7fd fd2e 	bl	8007770 <test_println>
  if (tsp->name != NULL) {
 8009d14:	f8db 3000 	ldr.w	r3, [fp]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 81f5 	beq.w	800a108 <test_execute.constprop.0.isra.0+0x408>
 8009d1e:	4d9f      	ldr	r5, [pc, #636]	@ (8009f9c <test_execute.constprop.0.isra.0+0x29c>)
  while (*msgp)
 8009d20:	212a      	movs	r1, #42	@ 0x2a
    streamPut(test_chp, *msgp++);
 8009d22:	6820      	ldr	r0, [r4, #0]
 8009d24:	6803      	ldr	r3, [r0, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	4798      	blx	r3
  while (*msgp)
 8009d2a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	d1f7      	bne.n	8009d22 <test_execute.constprop.0.isra.0+0x22>
    test_print("*** ");
    test_println(tsp->name);
 8009d32:	f8db 0000 	ldr.w	r0, [fp]
 8009d36:	f7fd fd1b 	bl	8007770 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8009d3a:	4899      	ldr	r0, [pc, #612]	@ (8009fa0 <test_execute.constprop.0.isra.0+0x2a0>)
 8009d3c:	4d99      	ldr	r5, [pc, #612]	@ (8009fa4 <test_execute.constprop.0.isra.0+0x2a4>)
 8009d3e:	f7fd fd17 	bl	8007770 <test_println>
  while (*msgp)
 8009d42:	212a      	movs	r1, #42	@ 0x2a
    streamPut(test_chp, *msgp++);
 8009d44:	6820      	ldr	r0, [r4, #0]
 8009d46:	6803      	ldr	r3, [r0, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	4798      	blx	r3
  while (*msgp)
 8009d4c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009d50:	2900      	cmp	r1, #0
 8009d52:	d1f7      	bne.n	8009d44 <test_execute.constprop.0.isra.0+0x44>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8009d54:	4894      	ldr	r0, [pc, #592]	@ (8009fa8 <test_execute.constprop.0.isra.0+0x2a8>)
 8009d56:	4d95      	ldr	r5, [pc, #596]	@ (8009fac <test_execute.constprop.0.isra.0+0x2ac>)
 8009d58:	f7fd fd0a 	bl	8007770 <test_println>
  while (*msgp)
 8009d5c:	212a      	movs	r1, #42	@ 0x2a
    streamPut(test_chp, *msgp++);
 8009d5e:	6820      	ldr	r0, [r4, #0]
 8009d60:	6803      	ldr	r3, [r0, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	4798      	blx	r3
  while (*msgp)
 8009d66:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009d6a:	2900      	cmp	r1, #0
 8009d6c:	d1f7      	bne.n	8009d5e <test_execute.constprop.0.isra.0+0x5e>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8009d6e:	4890      	ldr	r0, [pc, #576]	@ (8009fb0 <test_execute.constprop.0.isra.0+0x2b0>)
 8009d70:	4d90      	ldr	r5, [pc, #576]	@ (8009fb4 <test_execute.constprop.0.isra.0+0x2b4>)
 8009d72:	f7fd fcfd 	bl	8007770 <test_println>
  while (*msgp)
 8009d76:	212a      	movs	r1, #42	@ 0x2a
    streamPut(test_chp, *msgp++);
 8009d78:	6820      	ldr	r0, [r4, #0]
 8009d7a:	6803      	ldr	r3, [r0, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	4798      	blx	r3
  while (*msgp)
 8009d80:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009d84:	2900      	cmp	r1, #0
 8009d86:	d1f7      	bne.n	8009d78 <test_execute.constprop.0.isra.0+0x78>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8009d88:	488b      	ldr	r0, [pc, #556]	@ (8009fb8 <test_execute.constprop.0.isra.0+0x2b8>)
#if TEST_CFG_SIZE_REPORT == TRUE
  {
    extern uint8_t __text_base, __text_end,
                   _data_start, _data_end,
                   _bss_start, _bss_end;
    test_println("***");
 8009d8a:	4d8c      	ldr	r5, [pc, #560]	@ (8009fbc <test_execute.constprop.0.isra.0+0x2bc>)
  test_println(BOARD_NAME);
 8009d8c:	f7fd fcf0 	bl	8007770 <test_println>
    test_println("***");
 8009d90:	4883      	ldr	r0, [pc, #524]	@ (8009fa0 <test_execute.constprop.0.isra.0+0x2a0>)
 8009d92:	f7fd fced 	bl	8007770 <test_println>
  while (*msgp)
 8009d96:	212a      	movs	r1, #42	@ 0x2a
    streamPut(test_chp, *msgp++);
 8009d98:	6820      	ldr	r0, [r4, #0]
 8009d9a:	6803      	ldr	r3, [r0, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	4798      	blx	r3
  while (*msgp)
 8009da0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009da4:	2900      	cmp	r1, #0
 8009da6:	d1f7      	bne.n	8009d98 <test_execute.constprop.0.isra.0+0x98>
    test_print("*** Text size:    ");
    test_printn((uint32_t)(&__text_end - &__text_base));
 8009da8:	4b85      	ldr	r3, [pc, #532]	@ (8009fc0 <test_execute.constprop.0.isra.0+0x2c0>)
 8009daa:	4886      	ldr	r0, [pc, #536]	@ (8009fc4 <test_execute.constprop.0.isra.0+0x2c4>)
  if (!n)
 8009dac:	1a18      	subs	r0, r3, r0
 8009dae:	f040 81a8 	bne.w	800a102 <test_execute.constprop.0.isra.0+0x402>
    streamPut(test_chp, '0');
 8009db2:	6820      	ldr	r0, [r4, #0]
 8009db4:	6803      	ldr	r3, [r0, #0]
 8009db6:	2130      	movs	r1, #48	@ 0x30
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	4798      	blx	r3
    test_println(" bytes");
 8009dbc:	4882      	ldr	r0, [pc, #520]	@ (8009fc8 <test_execute.constprop.0.isra.0+0x2c8>)
 8009dbe:	4d83      	ldr	r5, [pc, #524]	@ (8009fcc <test_execute.constprop.0.isra.0+0x2cc>)
 8009dc0:	f7fd fcd6 	bl	8007770 <test_println>
  while (*msgp)
 8009dc4:	212a      	movs	r1, #42	@ 0x2a
    streamPut(test_chp, *msgp++);
 8009dc6:	6820      	ldr	r0, [r4, #0]
 8009dc8:	6803      	ldr	r3, [r0, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	4798      	blx	r3
  while (*msgp)
 8009dce:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009dd2:	2900      	cmp	r1, #0
 8009dd4:	d1f7      	bne.n	8009dc6 <test_execute.constprop.0.isra.0+0xc6>
    test_print("*** Data size:    ");
    test_printn((uint32_t)(&_data_end - &_data_start));
 8009dd6:	4b7e      	ldr	r3, [pc, #504]	@ (8009fd0 <test_execute.constprop.0.isra.0+0x2d0>)
 8009dd8:	487e      	ldr	r0, [pc, #504]	@ (8009fd4 <test_execute.constprop.0.isra.0+0x2d4>)
  if (!n)
 8009dda:	1a18      	subs	r0, r3, r0
 8009ddc:	f040 818e 	bne.w	800a0fc <test_execute.constprop.0.isra.0+0x3fc>
    streamPut(test_chp, '0');
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	6803      	ldr	r3, [r0, #0]
 8009de4:	2130      	movs	r1, #48	@ 0x30
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4798      	blx	r3
    test_println(" bytes");
 8009dea:	4877      	ldr	r0, [pc, #476]	@ (8009fc8 <test_execute.constprop.0.isra.0+0x2c8>)
 8009dec:	4d7a      	ldr	r5, [pc, #488]	@ (8009fd8 <test_execute.constprop.0.isra.0+0x2d8>)
 8009dee:	f7fd fcbf 	bl	8007770 <test_println>
  while (*msgp)
 8009df2:	212a      	movs	r1, #42	@ 0x2a
    streamPut(test_chp, *msgp++);
 8009df4:	6820      	ldr	r0, [r4, #0]
 8009df6:	6803      	ldr	r3, [r0, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	4798      	blx	r3
  while (*msgp)
 8009dfc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009e00:	2900      	cmp	r1, #0
 8009e02:	d1f7      	bne.n	8009df4 <test_execute.constprop.0.isra.0+0xf4>
    test_print("*** BSS size:     ");
    test_printn((uint32_t)(&_bss_end - &_bss_start));
 8009e04:	4b75      	ldr	r3, [pc, #468]	@ (8009fdc <test_execute.constprop.0.isra.0+0x2dc>)
 8009e06:	4876      	ldr	r0, [pc, #472]	@ (8009fe0 <test_execute.constprop.0.isra.0+0x2e0>)
  if (!n)
 8009e08:	1a18      	subs	r0, r3, r0
 8009e0a:	f040 8174 	bne.w	800a0f6 <test_execute.constprop.0.isra.0+0x3f6>
    streamPut(test_chp, '0');
 8009e0e:	6820      	ldr	r0, [r4, #0]
 8009e10:	6803      	ldr	r3, [r0, #0]
 8009e12:	2130      	movs	r1, #48	@ 0x30
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	4798      	blx	r3
    test_println(" bytes");
 8009e18:	486b      	ldr	r0, [pc, #428]	@ (8009fc8 <test_execute.constprop.0.isra.0+0x2c8>)
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");

  test_global_fail = false;
 8009e1a:	f8df a1c8 	ldr.w	sl, [pc, #456]	@ 8009fe4 <test_execute.constprop.0.isra.0+0x2e4>
    test_println(" bytes");
 8009e1e:	f7fd fca7 	bl	8007770 <test_println>
  test_println("");
 8009e22:	485d      	ldr	r0, [pc, #372]	@ (8009f98 <test_execute.constprop.0.isra.0+0x298>)
 8009e24:	f7fd fca4 	bl	8007770 <test_println>
  tseq = 0;
  while (tsp->sequences[tseq] != NULL) {
 8009e28:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
  test_global_fail = false;
 8009e2e:	f04f 0c00 	mov.w	ip, #0
 8009e32:	f88a c000 	strb.w	ip, [sl]
  while (tsp->sequences[tseq] != NULL) {
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 8173 	beq.w	800a122 <test_execute.constprop.0.isra.0+0x422>
 8009e3c:	46e1      	mov	r9, ip
  tseq = 0;
 8009e3e:	46e0      	mov	r8, ip
    test_println(" bytes");
 8009e40:	254c      	movs	r5, #76	@ 0x4c
    streamPut(test_chp, '=');
 8009e42:	6820      	ldr	r0, [r4, #0]
 8009e44:	6803      	ldr	r3, [r0, #0]
 8009e46:	213d      	movs	r1, #61	@ 0x3d
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8009e4c:	3d01      	subs	r5, #1
 8009e4e:	d1f8      	bne.n	8009e42 <test_execute.constprop.0.isra.0+0x142>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8009e50:	6820      	ldr	r0, [r4, #0]
 8009e52:	4965      	ldr	r1, [pc, #404]	@ (8009fe8 <test_execute.constprop.0.isra.0+0x2e8>)
 8009e54:	6803      	ldr	r3, [r0, #0]
 8009e56:	4d65      	ldr	r5, [pc, #404]	@ (8009fec <test_execute.constprop.0.isra.0+0x2ec>)
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	4798      	blx	r3
  while (*msgp)
 8009e5e:	213d      	movs	r1, #61	@ 0x3d
    streamPut(test_chp, *msgp++);
 8009e60:	6820      	ldr	r0, [r4, #0]
 8009e62:	6803      	ldr	r3, [r0, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	4798      	blx	r3
  while (*msgp)
 8009e68:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009e6c:	2900      	cmp	r1, #0
 8009e6e:	d1f7      	bne.n	8009e60 <test_execute.constprop.0.isra.0+0x160>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8009e70:	f108 0801 	add.w	r8, r8, #1
 8009e74:	4640      	mov	r0, r8
 8009e76:	4d5e      	ldr	r5, [pc, #376]	@ (8009ff0 <test_execute.constprop.0.isra.0+0x2f0>)
 8009e78:	f7fd fc9a 	bl	80077b0 <test_printn.part.0>
  while (*msgp)
 8009e7c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8009e7e:	6820      	ldr	r0, [r4, #0]
 8009e80:	6803      	ldr	r3, [r0, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	4798      	blx	r3
  while (*msgp)
 8009e86:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009e8a:	2900      	cmp	r1, #0
 8009e8c:	d1f7      	bne.n	8009e7e <test_execute.constprop.0.isra.0+0x17e>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8009e8e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009e92:	f853 3009 	ldr.w	r3, [r3, r9]
 8009e96:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8009e98:	7829      	ldrb	r1, [r5, #0]
 8009e9a:	b139      	cbz	r1, 8009eac <test_execute.constprop.0.isra.0+0x1ac>
    streamPut(test_chp, *msgp++);
 8009e9c:	6820      	ldr	r0, [r4, #0]
 8009e9e:	6803      	ldr	r3, [r0, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	4798      	blx	r3
  while (*msgp)
 8009ea4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	d1f7      	bne.n	8009e9c <test_execute.constprop.0.isra.0+0x19c>
    test_println(")");
 8009eac:	4851      	ldr	r0, [pc, #324]	@ (8009ff4 <test_execute.constprop.0.isra.0+0x2f4>)
 8009eae:	f7fd fc5f 	bl	8007770 <test_println>
#endif
    tcase = 0;
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8009eb2:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009eb6:	f853 2009 	ldr.w	r2, [r3, r9]
 8009eba:	6852      	ldr	r2, [r2, #4]
 8009ebc:	6812      	ldr	r2, [r2, #0]
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	f000 8128 	beq.w	800a114 <test_execute.constprop.0.isra.0+0x414>
 8009ec4:	4f4c      	ldr	r7, [pc, #304]	@ (8009ff8 <test_execute.constprop.0.isra.0+0x2f8>)
 8009ec6:	f8cd 9004 	str.w	r9, [sp, #4]
    tcase = 0;
 8009eca:	2500      	movs	r5, #0
      print_line();
 8009ecc:	4e4b      	ldr	r6, [pc, #300]	@ (8009ffc <test_execute.constprop.0.isra.0+0x2fc>)
 8009ece:	f7fc f8df 	bl	8006090 <print_line.lto_priv.0>
  while (*msgp)
 8009ed2:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 8009ed4:	6820      	ldr	r0, [r4, #0]
 8009ed6:	6803      	ldr	r3, [r0, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	4798      	blx	r3
  while (*msgp)
 8009edc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ee0:	2900      	cmp	r1, #0
 8009ee2:	d1f7      	bne.n	8009ed4 <test_execute.constprop.0.isra.0+0x1d4>
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	f7fd fc63 	bl	80077b0 <test_printn.part.0>
    streamPut(test_chp, *msgp++);
 8009eea:	6820      	ldr	r0, [r4, #0]
 8009eec:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8009ff0 <test_execute.constprop.0.isra.0+0x2f0>
 8009ef0:	6803      	ldr	r3, [r0, #0]
 8009ef2:	212e      	movs	r1, #46	@ 0x2e
 8009ef4:	68db      	ldr	r3, [r3, #12]
      test_print("--- Test Case ");
      test_printn(tseq + 1);
      test_print(".");
      test_printn(tcase + 1);
 8009ef6:	1c6e      	adds	r6, r5, #1
    streamPut(test_chp, *msgp++);
 8009ef8:	4798      	blx	r3
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7fd fc58 	bl	80077b0 <test_printn.part.0>
  while (*msgp)
 8009f00:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8009f02:	6820      	ldr	r0, [r4, #0]
 8009f04:	6803      	ldr	r3, [r0, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	4798      	blx	r3
  while (*msgp)
 8009f0a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d1f7      	bne.n	8009f02 <test_execute.constprop.0.isra.0+0x202>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8009f12:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009f16:	9a01      	ldr	r2, [sp, #4]
 8009f18:	589b      	ldr	r3, [r3, r2]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009f20:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8009f24:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8009f26:	7829      	ldrb	r1, [r5, #0]
 8009f28:	b139      	cbz	r1, 8009f3a <test_execute.constprop.0.isra.0+0x23a>
    streamPut(test_chp, *msgp++);
 8009f2a:	6820      	ldr	r0, [r4, #0]
 8009f2c:	6803      	ldr	r3, [r0, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	4798      	blx	r3
  while (*msgp)
 8009f32:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009f36:	2900      	cmp	r1, #0
 8009f38:	d1f7      	bne.n	8009f2a <test_execute.constprop.0.isra.0+0x22a>
    streamPut(test_chp, *msgp++);
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	6803      	ldr	r3, [r0, #0]
 8009f3e:	2129      	movs	r1, #41	@ 0x29
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	4798      	blx	r3
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	4928      	ldr	r1, [pc, #160]	@ (8009fe8 <test_execute.constprop.0.isra.0+0x2e8>)
 8009f48:	6803      	ldr	r3, [r0, #0]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	4798      	blx	r3
 8009f50:	2320      	movs	r3, #32
 8009f52:	f383 8811 	msr	BASEPRI, r3
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8009f56:	4d2a      	ldr	r5, [pc, #168]	@ (800a000 <test_execute.constprop.0.isra.0+0x300>)
 8009f58:	4a2a      	ldr	r2, [pc, #168]	@ (800a004 <test_execute.constprop.0.isra.0+0x304>)
 8009f5a:	69ad      	ldr	r5, [r5, #24]
 8009f5c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8009f60:	462b      	mov	r3, r5
 8009f62:	a803      	add	r0, sp, #12
 8009f64:	f7f8 fca4 	bl	80028b0 <chVTDoSetI>
  otp->state = newstate;
 8009f68:	2208      	movs	r2, #8
 8009f6a:	f885 2020 	strb.w	r2, [r5, #32]
  chSysSwitch(currp, otp);
 8009f6e:	4629      	mov	r1, r5
  thread_t *tp = tqp->next;
 8009f70:	4d23      	ldr	r5, [pc, #140]	@ (800a000 <test_execute.constprop.0.isra.0+0x300>)
 8009f72:	6828      	ldr	r0, [r5, #0]
  tqp->next             = tp->queue.next;
 8009f74:	6803      	ldr	r3, [r0, #0]
 8009f76:	602b      	str	r3, [r5, #0]
  currp->state = CH_STATE_CURRENT;
 8009f78:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8009f7a:	605d      	str	r5, [r3, #4]
 8009f7c:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8009f80:	61a8      	str	r0, [r5, #24]
  chSysSwitch(currp, otp);
 8009f82:	f7f6 f99d 	bl	80002c0 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8009f86:	9b06      	ldr	r3, [sp, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d040      	beq.n	800a00e <test_execute.constprop.0.isra.0+0x30e>
 8009f8c:	e03c      	b.n	800a008 <test_execute.constprop.0.isra.0+0x308>
 8009f8e:	bf00      	nop
 8009f90:	200010d4 	.word	0x200010d4
 8009f94:	20001144 	.word	0x20001144
 8009f98:	0800b76c 	.word	0x0800b76c
 8009f9c:	0800c238 	.word	0x0800c238
 8009fa0:	0800c338 	.word	0x0800c338
 8009fa4:	0800c240 	.word	0x0800c240
 8009fa8:	0800c33c 	.word	0x0800c33c
 8009fac:	0800c254 	.word	0x0800c254
 8009fb0:	0800c354 	.word	0x0800c354
 8009fb4:	0800c268 	.word	0x0800c268
 8009fb8:	0800c380 	.word	0x0800c380
 8009fbc:	0800c27c 	.word	0x0800c27c
 8009fc0:	0800b0fc 	.word	0x0800b0fc
 8009fc4:	080001e0 	.word	0x080001e0
 8009fc8:	0800c210 	.word	0x0800c210
 8009fcc:	0800c290 	.word	0x0800c290
 8009fd0:	200008e0 	.word	0x200008e0
 8009fd4:	20000800 	.word	0x20000800
 8009fd8:	0800c2a4 	.word	0x0800c2a4
 8009fdc:	20001458 	.word	0x20001458
 8009fe0:	200008e0 	.word	0x200008e0
 8009fe4:	200010d0 	.word	0x200010d0
 8009fe8:	0800b514 	.word	0x0800b514
 8009fec:	0800c2b8 	.word	0x0800c2b8
 8009ff0:	0800c2cc 	.word	0x0800c2cc
 8009ff4:	0800c3a8 	.word	0x0800c3a8
 8009ff8:	200010c8 	.word	0x200010c8
 8009ffc:	0800c2d0 	.word	0x0800c2d0
 800a000:	200011c0 	.word	0x200011c0
 800a004:	08000931 	.word	0x08000931
      chVTDoResetI(&vt);
 800a008:	a803      	add	r0, sp, #12
 800a00a:	f7f8 fc99 	bl	8002940 <chVTDoResetI>
 800a00e:	2300      	movs	r3, #0
 800a010:	f383 8811 	msr	BASEPRI, r3
  test_local_fail = false;
 800a014:	4a58      	ldr	r2, [pc, #352]	@ (800a178 <test_execute.constprop.0.isra.0+0x478>)
 800a016:	7013      	strb	r3, [r2, #0]
      test_println(")");
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 800a018:	9a01      	ldr	r2, [sp, #4]
 800a01a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a01e:	589b      	ldr	r3, [r3, r2]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f853 5009 	ldr.w	r5, [r3, r9]
  test_tokp = test_tokens_buffer;
 800a026:	4b55      	ldr	r3, [pc, #340]	@ (800a17c <test_execute.constprop.0.isra.0+0x47c>)
  if (tcp->setup != NULL)
 800a028:	686a      	ldr	r2, [r5, #4]
  test_tokp = test_tokens_buffer;
 800a02a:	603b      	str	r3, [r7, #0]
  if (tcp->setup != NULL)
 800a02c:	b102      	cbz	r2, 800a030 <test_execute.constprop.0.isra.0+0x330>
    tcp->setup();
 800a02e:	4790      	blx	r2
  tcp->execute();
 800a030:	68ea      	ldr	r2, [r5, #12]
 800a032:	4790      	blx	r2
  if (tcp->teardown != NULL)
 800a034:	68ab      	ldr	r3, [r5, #8]
 800a036:	b103      	cbz	r3, 800a03a <test_execute.constprop.0.isra.0+0x33a>
    tcp->teardown();
 800a038:	4798      	blx	r3
      if (test_local_fail) {
 800a03a:	4b4f      	ldr	r3, [pc, #316]	@ (800a178 <test_execute.constprop.0.isra.0+0x478>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 8087 	beq.w	800a152 <test_execute.constprop.0.isra.0+0x452>
 800a044:	4d4e      	ldr	r5, [pc, #312]	@ (800a180 <test_execute.constprop.0.isra.0+0x480>)
  while (*msgp)
 800a046:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800a048:	6820      	ldr	r0, [r4, #0]
 800a04a:	6803      	ldr	r3, [r0, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	4798      	blx	r3
  while (*msgp)
 800a050:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800a054:	2900      	cmp	r1, #0
 800a056:	d1f7      	bne.n	800a048 <test_execute.constprop.0.isra.0+0x348>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 800a058:	4b4a      	ldr	r3, [pc, #296]	@ (800a184 <test_execute.constprop.0.isra.0+0x484>)
 800a05a:	6818      	ldr	r0, [r3, #0]
  if (!n)
 800a05c:	2800      	cmp	r0, #0
 800a05e:	f000 8085 	beq.w	800a16c <test_execute.constprop.0.isra.0+0x46c>
 800a062:	f7fd fba5 	bl	80077b0 <test_printn.part.0>
  while (*msgp)
 800a066:	4d48      	ldr	r5, [pc, #288]	@ (800a188 <test_execute.constprop.0.isra.0+0x488>)
 800a068:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800a06a:	6820      	ldr	r0, [r4, #0]
 800a06c:	6803      	ldr	r3, [r0, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	4798      	blx	r3
  while (*msgp)
 800a072:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800a076:	2900      	cmp	r1, #0
 800a078:	d1f7      	bne.n	800a06a <test_execute.constprop.0.isra.0+0x36a>
  while (cp < test_tokp)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	4a3f      	ldr	r2, [pc, #252]	@ (800a17c <test_execute.constprop.0.isra.0+0x47c>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d909      	bls.n	800a096 <test_execute.constprop.0.isra.0+0x396>
  char *cp = test_tokens_buffer;
 800a082:	4d3e      	ldr	r5, [pc, #248]	@ (800a17c <test_execute.constprop.0.isra.0+0x47c>)
    streamPut(test_chp, *cp++);
 800a084:	6820      	ldr	r0, [r4, #0]
 800a086:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a08a:	6803      	ldr	r3, [r0, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	4798      	blx	r3
  while (cp < test_tokp)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	429d      	cmp	r5, r3
 800a094:	d3f6      	bcc.n	800a084 <test_execute.constprop.0.isra.0+0x384>
  while (*msgp)
 800a096:	4d3d      	ldr	r5, [pc, #244]	@ (800a18c <test_execute.constprop.0.isra.0+0x48c>)
 800a098:	215d      	movs	r1, #93	@ 0x5d
    streamPut(test_chp, *msgp++);
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	6803      	ldr	r3, [r0, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	4798      	blx	r3
  while (*msgp)
 800a0a2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800a0a6:	2900      	cmp	r1, #0
 800a0a8:	d1f7      	bne.n	800a09a <test_execute.constprop.0.isra.0+0x39a>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 800a0aa:	4b39      	ldr	r3, [pc, #228]	@ (800a190 <test_execute.constprop.0.isra.0+0x490>)
 800a0ac:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 800a0ae:	7829      	ldrb	r1, [r5, #0]
 800a0b0:	b139      	cbz	r1, 800a0c2 <test_execute.constprop.0.isra.0+0x3c2>
    streamPut(test_chp, *msgp++);
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	6803      	ldr	r3, [r0, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	4798      	blx	r3
  while (*msgp)
 800a0ba:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800a0be:	2900      	cmp	r1, #0
 800a0c0:	d1f7      	bne.n	800a0b2 <test_execute.constprop.0.isra.0+0x3b2>
 800a0c2:	4d34      	ldr	r5, [pc, #208]	@ (800a194 <test_execute.constprop.0.isra.0+0x494>)
 800a0c4:	2122      	movs	r1, #34	@ 0x22
    streamPut(test_chp, *msgp++);
 800a0c6:	6820      	ldr	r0, [r4, #0]
 800a0c8:	6803      	ldr	r3, [r0, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	4798      	blx	r3
  while (*msgp)
 800a0ce:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800a0d2:	2900      	cmp	r1, #0
 800a0d4:	d1f7      	bne.n	800a0c6 <test_execute.constprop.0.isra.0+0x3c6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800a0d6:	6820      	ldr	r0, [r4, #0]
 800a0d8:	492f      	ldr	r1, [pc, #188]	@ (800a198 <test_execute.constprop.0.isra.0+0x498>)
 800a0da:	6803      	ldr	r3, [r0, #0]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	4798      	blx	r3
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800a0e2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a0e6:	9a01      	ldr	r2, [sp, #4]
 800a0e8:	589a      	ldr	r2, [r3, r2]
 800a0ea:	6852      	ldr	r2, [r2, #4]
 800a0ec:	444a      	add	r2, r9
 800a0ee:	6852      	ldr	r2, [r2, #4]
 800a0f0:	b172      	cbz	r2, 800a110 <test_execute.constprop.0.isra.0+0x410>
 800a0f2:	4635      	mov	r5, r6
 800a0f4:	e6ea      	b.n	8009ecc <test_execute.constprop.0.isra.0+0x1cc>
 800a0f6:	f7fd fb5b 	bl	80077b0 <test_printn.part.0>
 800a0fa:	e68d      	b.n	8009e18 <test_execute.constprop.0.isra.0+0x118>
 800a0fc:	f7fd fb58 	bl	80077b0 <test_printn.part.0>
 800a100:	e673      	b.n	8009dea <test_execute.constprop.0.isra.0+0xea>
 800a102:	f7fd fb55 	bl	80077b0 <test_printn.part.0>
 800a106:	e659      	b.n	8009dbc <test_execute.constprop.0.isra.0+0xbc>
    test_println("*** Test Suite");
 800a108:	4824      	ldr	r0, [pc, #144]	@ (800a19c <test_execute.constprop.0.isra.0+0x49c>)
 800a10a:	f7fd fb31 	bl	8007770 <test_println>
 800a10e:	e614      	b.n	8009d3a <test_execute.constprop.0.isra.0+0x3a>
 800a110:	f8dd 9004 	ldr.w	r9, [sp, #4]
  while (tsp->sequences[tseq] != NULL) {
 800a114:	f109 0904 	add.w	r9, r9, #4
 800a118:	f853 3009 	ldr.w	r3, [r3, r9]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f47f ae8f 	bne.w	8009e40 <test_execute.constprop.0.isra.0+0x140>
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 800a122:	f7fb ffb5 	bl	8006090 <print_line.lto_priv.0>
  test_println("");
 800a126:	4d1e      	ldr	r5, [pc, #120]	@ (800a1a0 <test_execute.constprop.0.isra.0+0x4a0>)
 800a128:	481e      	ldr	r0, [pc, #120]	@ (800a1a4 <test_execute.constprop.0.isra.0+0x4a4>)
 800a12a:	f7fd fb21 	bl	8007770 <test_println>
  while (*msgp)
 800a12e:	2146      	movs	r1, #70	@ 0x46
    streamPut(test_chp, *msgp++);
 800a130:	6820      	ldr	r0, [r4, #0]
 800a132:	6803      	ldr	r3, [r0, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	4798      	blx	r3
  while (*msgp)
 800a138:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800a13c:	2900      	cmp	r1, #0
 800a13e:	d1f7      	bne.n	800a130 <test_execute.constprop.0.isra.0+0x430>
  test_print("Final result: ");
  if (test_global_fail)
 800a140:	f89a 3000 	ldrb.w	r3, [sl]
 800a144:	b183      	cbz	r3, 800a168 <test_execute.constprop.0.isra.0+0x468>
    test_println("FAILURE");
 800a146:	4818      	ldr	r0, [pc, #96]	@ (800a1a8 <test_execute.constprop.0.isra.0+0x4a8>)
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 800a148:	b009      	add	sp, #36	@ 0x24
 800a14a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println("SUCCESS");
 800a14e:	f7fd bb0f 	b.w	8007770 <test_println>
 800a152:	4d16      	ldr	r5, [pc, #88]	@ (800a1ac <test_execute.constprop.0.isra.0+0x4ac>)
  while (*msgp)
 800a154:	212d      	movs	r1, #45	@ 0x2d
    streamPut(test_chp, *msgp++);
 800a156:	6820      	ldr	r0, [r4, #0]
 800a158:	6803      	ldr	r3, [r0, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	4798      	blx	r3
  while (*msgp)
 800a15e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800a162:	2900      	cmp	r1, #0
 800a164:	d1f7      	bne.n	800a156 <test_execute.constprop.0.isra.0+0x456>
 800a166:	e7b6      	b.n	800a0d6 <test_execute.constprop.0.isra.0+0x3d6>
    test_println("SUCCESS");
 800a168:	4811      	ldr	r0, [pc, #68]	@ (800a1b0 <test_execute.constprop.0.isra.0+0x4b0>)
 800a16a:	e7ed      	b.n	800a148 <test_execute.constprop.0.isra.0+0x448>
    streamPut(test_chp, '0');
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	6803      	ldr	r3, [r0, #0]
 800a170:	2130      	movs	r1, #48	@ 0x30
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	4798      	blx	r3
 800a176:	e776      	b.n	800a066 <test_execute.constprop.0.isra.0+0x366>
 800a178:	200010d1 	.word	0x200010d1
 800a17c:	200010b8 	.word	0x200010b8
 800a180:	0800c2e0 	.word	0x0800c2e0
 800a184:	200010b4 	.word	0x200010b4
 800a188:	0800c2f8 	.word	0x0800c2f8
 800a18c:	0800c2fc 	.word	0x0800c2fc
 800a190:	200010cc 	.word	0x200010cc
 800a194:	0800c300 	.word	0x0800c300
 800a198:	0800b514 	.word	0x0800b514
 800a19c:	0800c328 	.word	0x0800c328
 800a1a0:	0800c318 	.word	0x0800c318
 800a1a4:	0800b76c 	.word	0x0800b76c
 800a1a8:	0800c3ac 	.word	0x0800c3ac
 800a1ac:	0800c304 	.word	0x0800c304
 800a1b0:	0800c310 	.word	0x0800c310
	...

0800a1c0 <chFactoryFindBuffer.constprop.0>:
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	2320      	movs	r3, #32
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	4d13      	ldr	r5, [pc, #76]	@ (800a218 <chFactoryFindBuffer.constprop.0+0x58>)
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	f7fb f808 	bl	80051e0 <chMtxLockS>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a1d6:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800a1da:	42ac      	cmp	r4, r5
 800a1dc:	d01a      	beq.n	800a214 <chFactoryFindBuffer.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a1de:	4e0f      	ldr	r6, [pc, #60]	@ (800a21c <chFactoryFindBuffer.constprop.0+0x5c>)
 800a1e0:	e002      	b.n	800a1e8 <chFactoryFindBuffer.constprop.0+0x28>
    p = p->next;
 800a1e2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a1e4:	42ac      	cmp	r4, r5
 800a1e6:	d00f      	beq.n	800a208 <chFactoryFindBuffer.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	f104 0008 	add.w	r0, r4, #8
 800a1ee:	f7f6 f907 	bl	8000400 <strcmp>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d1f5      	bne.n	800a1e2 <chFactoryFindBuffer.constprop.0+0x22>
  if (dep != NULL) {
 800a1f6:	b114      	cbz	r4, 800a1fe <chFactoryFindBuffer.constprop.0+0x3e>
    dep->refs++;
 800a1f8:	6863      	ldr	r3, [r4, #4]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a1fe:	4806      	ldr	r0, [pc, #24]	@ (800a218 <chFactoryFindBuffer.constprop.0+0x58>)
 800a200:	f7fb f88e 	bl	8005320 <chMtxUnlock>
}
 800a204:	4620      	mov	r0, r4
 800a206:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 800a208:	4803      	ldr	r0, [pc, #12]	@ (800a218 <chFactoryFindBuffer.constprop.0+0x58>)
  return NULL;
 800a20a:	2400      	movs	r4, #0
  F_UNLOCK();
 800a20c:	f7fb f888 	bl	8005320 <chMtxUnlock>
}
 800a210:	4620      	mov	r0, r4
 800a212:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800a214:	461c      	mov	r4, r3
 800a216:	e7f2      	b.n	800a1fe <chFactoryFindBuffer.constprop.0+0x3e>
 800a218:	200010d8 	.word	0x200010d8
 800a21c:	0800b504 	.word	0x0800b504

0800a220 <chFactoryFindObject.constprop.0>:
registered_object_t *chFactoryFindObject(const char *name) {
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	2320      	movs	r3, #32
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	4d13      	ldr	r5, [pc, #76]	@ (800a278 <chFactoryFindObject.constprop.0+0x58>)
 800a22a:	4628      	mov	r0, r5
 800a22c:	f7fa ffd8 	bl	80051e0 <chMtxLockS>
 800a230:	2300      	movs	r3, #0
 800a232:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a236:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800a23a:	42ac      	cmp	r4, r5
 800a23c:	d01a      	beq.n	800a274 <chFactoryFindObject.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a23e:	4e0f      	ldr	r6, [pc, #60]	@ (800a27c <chFactoryFindObject.constprop.0+0x5c>)
 800a240:	e002      	b.n	800a248 <chFactoryFindObject.constprop.0+0x28>
    p = p->next;
 800a242:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a244:	42ac      	cmp	r4, r5
 800a246:	d00f      	beq.n	800a268 <chFactoryFindObject.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a248:	4631      	mov	r1, r6
 800a24a:	f104 0008 	add.w	r0, r4, #8
 800a24e:	f7f6 f8d7 	bl	8000400 <strcmp>
 800a252:	2800      	cmp	r0, #0
 800a254:	d1f5      	bne.n	800a242 <chFactoryFindObject.constprop.0+0x22>
  if (dep != NULL) {
 800a256:	b114      	cbz	r4, 800a25e <chFactoryFindObject.constprop.0+0x3e>
    dep->refs++;
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	3301      	adds	r3, #1
 800a25c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a25e:	4806      	ldr	r0, [pc, #24]	@ (800a278 <chFactoryFindObject.constprop.0+0x58>)
 800a260:	f7fb f85e 	bl	8005320 <chMtxUnlock>
}
 800a264:	4620      	mov	r0, r4
 800a266:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 800a268:	4803      	ldr	r0, [pc, #12]	@ (800a278 <chFactoryFindObject.constprop.0+0x58>)
  return NULL;
 800a26a:	2400      	movs	r4, #0
  F_UNLOCK();
 800a26c:	f7fb f858 	bl	8005320 <chMtxUnlock>
}
 800a270:	4620      	mov	r0, r4
 800a272:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800a274:	461c      	mov	r4, r3
 800a276:	e7f2      	b.n	800a25e <chFactoryFindObject.constprop.0+0x3e>
 800a278:	200010d8 	.word	0x200010d8
 800a27c:	0800b4d0 	.word	0x0800b4d0

0800a280 <chPipeReadTimeout.part.0.constprop.0>:
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	4680      	mov	r8, r0
 800a286:	b083      	sub	sp, #12
 800a288:	460e      	mov	r6, r1
 800a28a:	f04f 0b20 	mov.w	fp, #32
 800a28e:	f38b 8811 	msr	BASEPRI, fp
 800a292:	4830      	ldr	r0, [pc, #192]	@ (800a354 <chPipeReadTimeout.part.0.constprop.0+0xd4>)
 800a294:	f7fa ffa4 	bl	80051e0 <chMtxLockS>
 800a298:	2300      	movs	r3, #0
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	4c2e      	ldr	r4, [pc, #184]	@ (800a358 <chPipeReadTimeout.part.0.constprop.0+0xd8>)
 800a2a0:	4637      	mov	r7, r6
 800a2a2:	469a      	mov	sl, r3
 800a2a4:	eb04 090b 	add.w	r9, r4, fp
 800a2a8:	e01d      	b.n	800a2e6 <chPipeReadTimeout.part.0.constprop.0+0x66>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800a2aa:	f7f6 fa8d 	bl	80007c8 <memcpy>
    s2 = n - s1;
 800a2ae:	9b01      	ldr	r3, [sp, #4]
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800a2b0:	6821      	ldr	r1, [r4, #0]
    s2 = n - s1;
 800a2b2:	1aea      	subs	r2, r5, r3
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800a2b4:	eb08 0003 	add.w	r0, r8, r3
 800a2b8:	9201      	str	r2, [sp, #4]
 800a2ba:	f7f6 fa85 	bl	80007c8 <memcpy>
    pp->rdptr = pp->buffer + s2;
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	9a01      	ldr	r2, [sp, #4]
  PC_UNLOCK(pp);
 800a2c2:	4648      	mov	r0, r9
    pp->rdptr = pp->buffer + s2;
 800a2c4:	4413      	add	r3, r2
 800a2c6:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 800a2c8:	f7fb f82a 	bl	8005320 <chMtxUnlock>
      if (msg != MSG_OK) {
        break;
      }
    }
    else {
      n  -= done;
 800a2cc:	1b7f      	subs	r7, r7, r5
      bp += done;
 800a2ce:	44a8      	add	r8, r5
 800a2d0:	f38b 8811 	msr	BASEPRI, fp
  if (*trp != NULL) {
 800a2d4:	69a0      	ldr	r0, [r4, #24]
    chSchWakeupS(tp, msg);
 800a2d6:	2100      	movs	r1, #0
  if (*trp != NULL) {
 800a2d8:	b110      	cbz	r0, 800a2e0 <chPipeReadTimeout.part.0.constprop.0+0x60>
    *trp = NULL;
 800a2da:	61a1      	str	r1, [r4, #24]
    chSchWakeupS(tp, msg);
 800a2dc:	f7f9 fbd8 	bl	8003a90 <chSchWakeupS>
 800a2e0:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 800a2e4:	b33f      	cbz	r7, 800a336 <chPipeReadTimeout.part.0.constprop.0+0xb6>
 800a2e6:	f38b 8811 	msr	BASEPRI, fp
 800a2ea:	4648      	mov	r0, r9
 800a2ec:	f7fa ff78 	bl	80051e0 <chMtxLockS>
 800a2f0:	f38a 8811 	msr	BASEPRI, sl
  s1 = (size_t)(pp->top - pp->rdptr);
 800a2f4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800a2f8:	6863      	ldr	r3, [r4, #4]
  if (n > chPipeGetUsedCount(pp)) {
 800a2fa:	42ba      	cmp	r2, r7
 800a2fc:	4615      	mov	r5, r2
  s1 = (size_t)(pp->top - pp->rdptr);
 800a2fe:	eba3 0301 	sub.w	r3, r3, r1
  if (n > chPipeGetUsedCount(pp)) {
 800a302:	bf28      	it	cs
 800a304:	463d      	movcs	r5, r7
  pp->cnt -= n;
 800a306:	1b52      	subs	r2, r2, r5
  if (n < s1) {
 800a308:	429d      	cmp	r5, r3
  pp->cnt -= n;
 800a30a:	6122      	str	r2, [r4, #16]
  if (n < s1) {
 800a30c:	d31a      	bcc.n	800a344 <chPipeReadTimeout.part.0.constprop.0+0xc4>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800a30e:	461a      	mov	r2, r3
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	4640      	mov	r0, r8
  else if (n > s1) {
 800a314:	d8c9      	bhi.n	800a2aa <chPipeReadTimeout.part.0.constprop.0+0x2a>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800a316:	462a      	mov	r2, r5
 800a318:	f7f6 fa56 	bl	80007c8 <memcpy>
    pp->rdptr = pp->buffer;
 800a31c:	6823      	ldr	r3, [r4, #0]
    pp->rdptr += n;
 800a31e:	60e3      	str	r3, [r4, #12]
  PC_UNLOCK(pp);
 800a320:	4648      	mov	r0, r9
 800a322:	f7fa fffd 	bl	8005320 <chMtxUnlock>
    if (done == (size_t)0) {
 800a326:	2d00      	cmp	r5, #0
 800a328:	d1d0      	bne.n	800a2cc <chPipeReadTimeout.part.0.constprop.0+0x4c>
 800a32a:	2320      	movs	r3, #32
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f385 8811 	msr	BASEPRI, r5
    }
  }

  PR_UNLOCK(pp);

  return max - n;
 800a334:	1bf6      	subs	r6, r6, r7
  PR_UNLOCK(pp);
 800a336:	4807      	ldr	r0, [pc, #28]	@ (800a354 <chPipeReadTimeout.part.0.constprop.0+0xd4>)
 800a338:	f7fa fff2 	bl	8005320 <chMtxUnlock>
}
 800a33c:	4630      	mov	r0, r6
 800a33e:	b003      	add	sp, #12
 800a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800a344:	462a      	mov	r2, r5
 800a346:	4640      	mov	r0, r8
 800a348:	f7f6 fa3e 	bl	80007c8 <memcpy>
    pp->rdptr += n;
 800a34c:	68e3      	ldr	r3, [r4, #12]
 800a34e:	442b      	add	r3, r5
 800a350:	e7e5      	b.n	800a31e <chPipeReadTimeout.part.0.constprop.0+0x9e>
 800a352:	bf00      	nop
 800a354:	20000878 	.word	0x20000878
 800a358:	20000838 	.word	0x20000838
 800a35c:	00000000 	.word	0x00000000

0800a360 <chPipeWriteTimeout.part.0.constprop.0>:
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	4606      	mov	r6, r0
 800a366:	b083      	sub	sp, #12
 800a368:	f04f 0b20 	mov.w	fp, #32
 800a36c:	f38b 8811 	msr	BASEPRI, fp
 800a370:	4831      	ldr	r0, [pc, #196]	@ (800a438 <chPipeWriteTimeout.part.0.constprop.0+0xd8>)
 800a372:	f7fa ff35 	bl	80051e0 <chMtxLockS>
 800a376:	2300      	movs	r3, #0
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	4d2f      	ldr	r5, [pc, #188]	@ (800a43c <chPipeWriteTimeout.part.0.constprop.0+0xdc>)
 800a37e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800a440 <chPipeWriteTimeout.part.0.constprop.0+0xe0>
 800a382:	4637      	mov	r7, r6
 800a384:	eb05 090b 	add.w	r9, r5, fp
 800a388:	469a      	mov	sl, r3
 800a38a:	e01d      	b.n	800a3c8 <chPipeWriteTimeout.part.0.constprop.0+0x68>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800a38c:	f7f6 fa1c 	bl	80007c8 <memcpy>
    s2 = n - s1;
 800a390:	9b01      	ldr	r3, [sp, #4]
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800a392:	6828      	ldr	r0, [r5, #0]
    s2 = n - s1;
 800a394:	1ae2      	subs	r2, r4, r3
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800a396:	eb08 0103 	add.w	r1, r8, r3
 800a39a:	9201      	str	r2, [sp, #4]
 800a39c:	f7f6 fa14 	bl	80007c8 <memcpy>
    pp->wrptr = pp->buffer + s2;
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	9a01      	ldr	r2, [sp, #4]
  PC_UNLOCK(pp);
 800a3a4:	4648      	mov	r0, r9
    pp->wrptr = pp->buffer + s2;
 800a3a6:	4413      	add	r3, r2
 800a3a8:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 800a3aa:	f7fa ffb9 	bl	8005320 <chMtxUnlock>
      n  -= done;
 800a3ae:	1b3f      	subs	r7, r7, r4
      bp += done;
 800a3b0:	44a0      	add	r8, r4
 800a3b2:	f38b 8811 	msr	BASEPRI, fp
  if (*trp != NULL) {
 800a3b6:	69e8      	ldr	r0, [r5, #28]
    chSchWakeupS(tp, msg);
 800a3b8:	2100      	movs	r1, #0
  if (*trp != NULL) {
 800a3ba:	b110      	cbz	r0, 800a3c2 <chPipeWriteTimeout.part.0.constprop.0+0x62>
    *trp = NULL;
 800a3bc:	61e9      	str	r1, [r5, #28]
    chSchWakeupS(tp, msg);
 800a3be:	f7f9 fb67 	bl	8003a90 <chSchWakeupS>
 800a3c2:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 800a3c6:	b347      	cbz	r7, 800a41a <chPipeWriteTimeout.part.0.constprop.0+0xba>
 800a3c8:	f38b 8811 	msr	BASEPRI, fp
 800a3cc:	4648      	mov	r0, r9
 800a3ce:	f7fa ff07 	bl	80051e0 <chMtxLockS>
 800a3d2:	f38a 8811 	msr	BASEPRI, sl
  return (size_t)(pp->top - pp->buffer);
 800a3d6:	e9d5 4300 	ldrd	r4, r3, [r5]
  return pp->cnt;
 800a3da:	692a      	ldr	r2, [r5, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 800a3dc:	68a8      	ldr	r0, [r5, #8]
  return (size_t)(pp->top - pp->buffer);
 800a3de:	1b1c      	subs	r4, r3, r4
  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 800a3e0:	1aa4      	subs	r4, r4, r2
  if (n > chPipeGetFreeCount(pp)) {
 800a3e2:	42bc      	cmp	r4, r7
 800a3e4:	bf28      	it	cs
 800a3e6:	463c      	movcs	r4, r7
  s1 = (size_t)(pp->top - pp->wrptr);
 800a3e8:	1a1b      	subs	r3, r3, r0
  pp->cnt += n;
 800a3ea:	4422      	add	r2, r4
  if (n < s1) {
 800a3ec:	429c      	cmp	r4, r3
  pp->cnt += n;
 800a3ee:	612a      	str	r2, [r5, #16]
  if (n < s1) {
 800a3f0:	d31a      	bcc.n	800a428 <chPipeWriteTimeout.part.0.constprop.0+0xc8>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	4641      	mov	r1, r8
  else if (n > s1) {
 800a3f8:	d8c8      	bhi.n	800a38c <chPipeWriteTimeout.part.0.constprop.0+0x2c>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	f7f6 f9e4 	bl	80007c8 <memcpy>
    pp->wrptr = pp->buffer;
 800a400:	682b      	ldr	r3, [r5, #0]
    pp->wrptr += n;
 800a402:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 800a404:	4648      	mov	r0, r9
 800a406:	f7fa ff8b 	bl	8005320 <chMtxUnlock>
    if (done == (size_t)0) {
 800a40a:	2c00      	cmp	r4, #0
 800a40c:	d1cf      	bne.n	800a3ae <chPipeWriteTimeout.part.0.constprop.0+0x4e>
 800a40e:	2320      	movs	r3, #32
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f384 8811 	msr	BASEPRI, r4
  return max - n;
 800a418:	1bf6      	subs	r6, r6, r7
  PW_UNLOCK(pp);
 800a41a:	4807      	ldr	r0, [pc, #28]	@ (800a438 <chPipeWriteTimeout.part.0.constprop.0+0xd8>)
 800a41c:	f7fa ff80 	bl	8005320 <chMtxUnlock>
}
 800a420:	4630      	mov	r0, r6
 800a422:	b003      	add	sp, #12
 800a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800a428:	4622      	mov	r2, r4
 800a42a:	4641      	mov	r1, r8
 800a42c:	f7f6 f9cc 	bl	80007c8 <memcpy>
    pp->wrptr += n;
 800a430:	68ab      	ldr	r3, [r5, #8]
 800a432:	4423      	add	r3, r4
 800a434:	e7e5      	b.n	800a402 <chPipeWriteTimeout.part.0.constprop.0+0xa2>
 800a436:	bf00      	nop
 800a438:	20000868 	.word	0x20000868
 800a43c:	20000838 	.word	0x20000838
 800a440:	0800ccd8 	.word	0x0800ccd8
	...

0800a450 <chGuardedPoolAllocTimeout.constprop.0>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 800a450:	b510      	push	{r4, lr}
 800a452:	2320      	movs	r3, #32
 800a454:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800a458:	4c16      	ldr	r4, [pc, #88]	@ (800a4b4 <chGuardedPoolAllocTimeout.constprop.0+0x64>)
 800a45a:	68a2      	ldr	r2, [r4, #8]
 800a45c:	1e53      	subs	r3, r2, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	60a3      	str	r3, [r4, #8]
 800a462:	db07      	blt.n	800a474 <chGuardedPoolAllocTimeout.constprop.0+0x24>
  objp = mp->next;
 800a464:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 800a466:	b1c8      	cbz	r0, 800a49c <chGuardedPoolAllocTimeout.constprop.0+0x4c>
    mp->next = mp->next->next;
 800a468:	6803      	ldr	r3, [r0, #0]
 800a46a:	60e3      	str	r3, [r4, #12]
 800a46c:	2300      	movs	r3, #0
 800a46e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 800a472:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 800a474:	b1e0      	cbz	r0, 800a4b0 <chGuardedPoolAllocTimeout.constprop.0+0x60>
    currp->u.wtsemp = sp;
 800a476:	4b10      	ldr	r3, [pc, #64]	@ (800a4b8 <chGuardedPoolAllocTimeout.constprop.0+0x68>)
  tp->queue.prev             = tqp->prev;
 800a478:	6862      	ldr	r2, [r4, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800a47c:	4601      	mov	r1, r0
 800a47e:	e9c3 4200 	strd	r4, r2, [r3]
    currp->u.wtsemp = sp;
 800a482:	625c      	str	r4, [r3, #36]	@ 0x24
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800a484:	2005      	movs	r0, #5
  tp->queue.prev->queue.next = tp;
 800a486:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 800a488:	6063      	str	r3, [r4, #4]
 800a48a:	f7f8 fcf1 	bl	8002e70 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800a48e:	2800      	cmp	r0, #0
 800a490:	d0e8      	beq.n	800a464 <chGuardedPoolAllocTimeout.constprop.0+0x14>
    return NULL;
 800a492:	2000      	movs	r0, #0
 800a494:	2300      	movs	r3, #0
 800a496:	f383 8811 	msr	BASEPRI, r3
}
 800a49a:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 800a49c:	69a3      	ldr	r3, [r4, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0f7      	beq.n	800a492 <chGuardedPoolAllocTimeout.constprop.0+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 800a4a2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800a4a6:	4798      	blx	r3
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f383 8811 	msr	BASEPRI, r3
}
 800a4ae:	bd10      	pop	{r4, pc}
      sp->cnt++;
 800a4b0:	60a2      	str	r2, [r4, #8]
 800a4b2:	e7ee      	b.n	800a492 <chGuardedPoolAllocTimeout.constprop.0+0x42>
 800a4b4:	20000808 	.word	0x20000808
 800a4b8:	200011c0 	.word	0x200011c0
 800a4bc:	00000000 	.word	0x00000000

0800a4c0 <chMBFetchI.constprop.0>:

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800a4c0:	4b18      	ldr	r3, [pc, #96]	@ (800a524 <chMBFetchI.constprop.0+0x64>)
 800a4c2:	7d1a      	ldrb	r2, [r3, #20]
 800a4c4:	2a00      	cmp	r2, #0
 800a4c6:	d12a      	bne.n	800a51e <chMBFetchI.constprop.0+0x5e>
  return mbp->cnt;
 800a4c8:	691a      	ldr	r2, [r3, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800a4ca:	b32a      	cbz	r2, 800a518 <chMBFetchI.constprop.0+0x58>
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 800a4cc:	b410      	push	{r4}
    *msgp = *mbp->rdptr++;
 800a4ce:	68dc      	ldr	r4, [r3, #12]
 800a4d0:	1d21      	adds	r1, r4, #4
 800a4d2:	6824      	ldr	r4, [r4, #0]
 800a4d4:	60d9      	str	r1, [r3, #12]
 800a4d6:	6004      	str	r4, [r0, #0]
    if (mbp->rdptr >= mbp->top) {
 800a4d8:	6858      	ldr	r0, [r3, #4]
 800a4da:	4281      	cmp	r1, r0
      mbp->rdptr = mbp->buffer;
 800a4dc:	bf24      	itt	cs
 800a4de:	6819      	ldrcs	r1, [r3, #0]
 800a4e0:	60d9      	strcs	r1, [r3, #12]
  if (queue_notempty(tqp)) {
 800a4e2:	4811      	ldr	r0, [pc, #68]	@ (800a528 <chMBFetchI.constprop.0+0x68>)
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a4e4:	6999      	ldr	r1, [r3, #24]
    }
    mbp->cnt--;
 800a4e6:	3a01      	subs	r2, #1
 800a4e8:	4281      	cmp	r1, r0
 800a4ea:	611a      	str	r2, [r3, #16]
 800a4ec:	d011      	beq.n	800a512 <chMBFetchI.constprop.0+0x52>
  tqp->next             = tp->queue.next;
 800a4ee:	680c      	ldr	r4, [r1, #0]
 800a4f0:	619c      	str	r4, [r3, #24]
  tp->u.rdymsg = msg;
 800a4f2:	2200      	movs	r2, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800a4f4:	6060      	str	r0, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
 800a4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a52c <chMBFetchI.constprop.0+0x6c>)
  } while (cp->prio >= tp->prio);
 800a4f8:	6888      	ldr	r0, [r1, #8]
 800a4fa:	624a      	str	r2, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800a4fc:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 800a500:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	4282      	cmp	r2, r0
 800a506:	d2fb      	bcs.n	800a500 <chMBFetchI.constprop.0+0x40>
  tp->queue.prev             = cp->queue.prev;
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800a50e:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800a510:	6059      	str	r1, [r3, #4]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);

    return MSG_OK;
 800a512:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 800a514:	bc10      	pop	{r4}
 800a516:	4770      	bx	lr
  return MSG_TIMEOUT;
 800a518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800a51c:	4770      	bx	lr
    return MSG_RESET;
 800a51e:	f06f 0001 	mvn.w	r0, #1
 800a522:	4770      	bx	lr
 800a524:	20000888 	.word	0x20000888
 800a528:	200008a0 	.word	0x200008a0
 800a52c:	200011c0 	.word	0x200011c0

0800a530 <chMBFetchTimeout.constprop.0>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 800a530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a534:	2320      	movs	r3, #32
 800a536:	4680      	mov	r8, r0
 800a538:	460d      	mov	r5, r1
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	4c28      	ldr	r4, [pc, #160]	@ (800a5e0 <chMBFetchTimeout.constprop.0+0xb0>)
  queue_insert(currp, tqp);
 800a540:	4f28      	ldr	r7, [pc, #160]	@ (800a5e4 <chMBFetchTimeout.constprop.0+0xb4>)
  tp->queue.next             = (thread_t *)tqp;
 800a542:	18e6      	adds	r6, r4, r3
 800a544:	e00a      	b.n	800a55c <chMBFetchTimeout.constprop.0+0x2c>
 800a546:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800a548:	b9a3      	cbnz	r3, 800a574 <chMBFetchTimeout.constprop.0+0x44>
 800a54a:	69bb      	ldr	r3, [r7, #24]
  tp->queue.prev             = tqp->prev;
 800a54c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a54e:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 800a552:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 800a554:	6263      	str	r3, [r4, #36]	@ 0x24
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800a556:	f7f8 fc8b 	bl	8002e70 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800a55a:	b930      	cbnz	r0, 800a56a <chMBFetchTimeout.constprop.0+0x3a>
    if (mbp->reset) {
 800a55c:	7d23      	ldrb	r3, [r4, #20]
 800a55e:	4629      	mov	r1, r5
 800a560:	2004      	movs	r0, #4
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0ef      	beq.n	800a546 <chMBFetchTimeout.constprop.0+0x16>
      return MSG_RESET;
 800a566:	f06f 0001 	mvn.w	r0, #1
 800a56a:	2300      	movs	r3, #0
 800a56c:	f383 8811 	msr	BASEPRI, r3
}
 800a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *msgp = *mbp->rdptr++;
 800a574:	68e1      	ldr	r1, [r4, #12]
 800a576:	180a      	adds	r2, r1, r0
 800a578:	6809      	ldr	r1, [r1, #0]
 800a57a:	60e2      	str	r2, [r4, #12]
 800a57c:	f8c8 1000 	str.w	r1, [r8]
      if (mbp->rdptr >= mbp->top) {
 800a580:	6861      	ldr	r1, [r4, #4]
 800a582:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->buffer;
 800a584:	bf24      	itt	cs
 800a586:	6822      	ldrcs	r2, [r4, #0]
 800a588:	60e2      	strcs	r2, [r4, #12]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a58a:	69a1      	ldr	r1, [r4, #24]
  if (queue_notempty(tqp)) {
 800a58c:	4a16      	ldr	r2, [pc, #88]	@ (800a5e8 <chMBFetchTimeout.constprop.0+0xb8>)
      mbp->cnt--;
 800a58e:	3b01      	subs	r3, #1
 800a590:	4291      	cmp	r1, r2
 800a592:	6123      	str	r3, [r4, #16]
 800a594:	d01e      	beq.n	800a5d4 <chMBFetchTimeout.constprop.0+0xa4>
  tqp->next             = tp->queue.next;
 800a596:	6808      	ldr	r0, [r1, #0]
  cp = (thread_t *)&ch.rlist.queue;
 800a598:	4d12      	ldr	r5, [pc, #72]	@ (800a5e4 <chMBFetchTimeout.constprop.0+0xb4>)
 800a59a:	61a0      	str	r0, [r4, #24]
 800a59c:	2300      	movs	r3, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800a59e:	6042      	str	r2, [r0, #4]
  } while (cp->prio >= tp->prio);
 800a5a0:	6888      	ldr	r0, [r1, #8]
 800a5a2:	624b      	str	r3, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800a5a4:	f881 3020 	strb.w	r3, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800a5a8:	462b      	mov	r3, r5
    cp = cp->queue.next;
 800a5aa:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a5ac:	689a      	ldr	r2, [r3, #8]
 800a5ae:	4282      	cmp	r2, r0
 800a5b0:	d2fb      	bcs.n	800a5aa <chMBFetchTimeout.constprop.0+0x7a>
  tp->queue.prev             = cp->queue.prev;
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800a5b8:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800a5ba:	6059      	str	r1, [r3, #4]
  return firstprio(&ch.rlist.queue) > currp->prio;
 800a5bc:	682a      	ldr	r2, [r5, #0]
 800a5be:	69ab      	ldr	r3, [r5, #24]
  if (chSchIsRescRequiredI()) {
 800a5c0:	6892      	ldr	r2, [r2, #8]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d807      	bhi.n	800a5d8 <chMBFetchTimeout.constprop.0+0xa8>
      return MSG_OK;
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f383 8811 	msr	BASEPRI, r3
}
 800a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d4:	4d03      	ldr	r5, [pc, #12]	@ (800a5e4 <chMBFetchTimeout.constprop.0+0xb4>)
 800a5d6:	e7f1      	b.n	800a5bc <chMBFetchTimeout.constprop.0+0x8c>
    chSchDoRescheduleAhead();
 800a5d8:	f7f9 fcba 	bl	8003f50 <chSchDoReschedule>
 800a5dc:	e7f4      	b.n	800a5c8 <chMBFetchTimeout.constprop.0+0x98>
 800a5de:	bf00      	nop
 800a5e0:	20000888 	.word	0x20000888
 800a5e4:	200011c0 	.word	0x200011c0
 800a5e8:	200008a0 	.word	0x200008a0
 800a5ec:	00000000 	.word	0x00000000

0800a5f0 <chMBPostAheadI.constprop.0>:
  if (mbp->reset) {
 800a5f0:	4b19      	ldr	r3, [pc, #100]	@ (800a658 <chMBPostAheadI.constprop.0+0x68>)
 800a5f2:	7d1a      	ldrb	r2, [r3, #20]
 800a5f4:	2a00      	cmp	r2, #0
 800a5f6:	d12c      	bne.n	800a652 <chMBPostAheadI.constprop.0+0x62>
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800a5f8:	b430      	push	{r4, r5}
  return (size_t)(mbp->top - mbp->buffer);
 800a5fa:	e9d3 1500 	ldrd	r1, r5, [r3]
  return mbp->cnt;
 800a5fe:	691c      	ldr	r4, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a600:	1a6a      	subs	r2, r5, r1
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a602:	ebb4 0fa2 	cmp.w	r4, r2, asr #2
 800a606:	d021      	beq.n	800a64c <chMBPostAheadI.constprop.0+0x5c>
    if (--mbp->rdptr < mbp->buffer) {
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	3a04      	subs	r2, #4
 800a60c:	4291      	cmp	r1, r2
      mbp->rdptr = mbp->top - 1;
 800a60e:	bf88      	it	hi
 800a610:	1f2a      	subhi	r2, r5, #4
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a612:	6a19      	ldr	r1, [r3, #32]
    if (--mbp->rdptr < mbp->buffer) {
 800a614:	60da      	str	r2, [r3, #12]
    *mbp->rdptr = msg;
 800a616:	6010      	str	r0, [r2, #0]
 800a618:	4a10      	ldr	r2, [pc, #64]	@ (800a65c <chMBPostAheadI.constprop.0+0x6c>)
    mbp->cnt++;
 800a61a:	3401      	adds	r4, #1
 800a61c:	4291      	cmp	r1, r2
 800a61e:	611c      	str	r4, [r3, #16]
 800a620:	d011      	beq.n	800a646 <chMBPostAheadI.constprop.0+0x56>
  tqp->next             = tp->queue.next;
 800a622:	6808      	ldr	r0, [r1, #0]
 800a624:	6218      	str	r0, [r3, #32]
 800a626:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800a628:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.queue;
 800a62a:	4b0d      	ldr	r3, [pc, #52]	@ (800a660 <chMBPostAheadI.constprop.0+0x70>)
  } while (cp->prio >= tp->prio);
 800a62c:	6888      	ldr	r0, [r1, #8]
 800a62e:	624c      	str	r4, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800a630:	f881 4020 	strb.w	r4, [r1, #32]
    cp = cp->queue.next;
 800a634:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a636:	689a      	ldr	r2, [r3, #8]
 800a638:	4282      	cmp	r2, r0
 800a63a:	d2fb      	bcs.n	800a634 <chMBPostAheadI.constprop.0+0x44>
  tp->queue.prev             = cp->queue.prev;
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800a642:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800a644:	6059      	str	r1, [r3, #4]
    return MSG_OK;
 800a646:	2000      	movs	r0, #0
}
 800a648:	bc30      	pop	{r4, r5}
 800a64a:	4770      	bx	lr
  return MSG_TIMEOUT;
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a650:	e7fa      	b.n	800a648 <chMBPostAheadI.constprop.0+0x58>
    return MSG_RESET;
 800a652:	f06f 0001 	mvn.w	r0, #1
}
 800a656:	4770      	bx	lr
 800a658:	20000888 	.word	0x20000888
 800a65c:	200008a8 	.word	0x200008a8
 800a660:	200011c0 	.word	0x200011c0
	...

0800a670 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a674:	2320      	movs	r3, #32
 800a676:	4680      	mov	r8, r0
 800a678:	460d      	mov	r5, r1
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	4c2a      	ldr	r4, [pc, #168]	@ (800a728 <chMBPostAheadTimeout.constprop.0+0xb8>)
  queue_insert(currp, tqp);
 800a680:	4f2a      	ldr	r7, [pc, #168]	@ (800a72c <chMBPostAheadTimeout.constprop.0+0xbc>)
  tp->queue.next             = (thread_t *)tqp;
 800a682:	f104 0618 	add.w	r6, r4, #24
 800a686:	e010      	b.n	800a6aa <chMBPostAheadTimeout.constprop.0+0x3a>
 800a688:	e9d4 2c00 	ldrd	r2, ip, [r4]
  return mbp->cnt;
 800a68c:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a68e:	ebac 0e02 	sub.w	lr, ip, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a692:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 800a696:	d114      	bne.n	800a6c2 <chMBPostAheadTimeout.constprop.0+0x52>
 800a698:	69bb      	ldr	r3, [r7, #24]
  tp->queue.prev             = tqp->prev;
 800a69a:	69e2      	ldr	r2, [r4, #28]
 800a69c:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 800a6a0:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 800a6a2:	61e3      	str	r3, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800a6a4:	f7f8 fbe4 	bl	8002e70 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800a6a8:	b930      	cbnz	r0, 800a6b8 <chMBPostAheadTimeout.constprop.0+0x48>
    if (mbp->reset) {
 800a6aa:	7d23      	ldrb	r3, [r4, #20]
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	2004      	movs	r0, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d0e9      	beq.n	800a688 <chMBPostAheadTimeout.constprop.0+0x18>
      return MSG_RESET;
 800a6b4:	f06f 0001 	mvn.w	r0, #1
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f383 8811 	msr	BASEPRI, r3
}
 800a6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 800a6c2:	68e1      	ldr	r1, [r4, #12]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a6c4:	6a20      	ldr	r0, [r4, #32]
 800a6c6:	3904      	subs	r1, #4
 800a6c8:	428a      	cmp	r2, r1
  if (queue_notempty(tqp)) {
 800a6ca:	4a19      	ldr	r2, [pc, #100]	@ (800a730 <chMBPostAheadTimeout.constprop.0+0xc0>)
        mbp->rdptr = mbp->top - 1;
 800a6cc:	bf88      	it	hi
 800a6ce:	f1ac 0104 	subhi.w	r1, ip, #4
      mbp->cnt++;
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	4290      	cmp	r0, r2
      if (--mbp->rdptr < mbp->buffer) {
 800a6d6:	60e1      	str	r1, [r4, #12]
      *mbp->rdptr = msg;
 800a6d8:	f8c1 8000 	str.w	r8, [r1]
      mbp->cnt++;
 800a6dc:	6123      	str	r3, [r4, #16]
 800a6de:	d01e      	beq.n	800a71e <chMBPostAheadTimeout.constprop.0+0xae>
  tqp->next             = tp->queue.next;
 800a6e0:	6801      	ldr	r1, [r0, #0]
  cp = (thread_t *)&ch.rlist.queue;
 800a6e2:	4d12      	ldr	r5, [pc, #72]	@ (800a72c <chMBPostAheadTimeout.constprop.0+0xbc>)
 800a6e4:	6221      	str	r1, [r4, #32]
 800a6e6:	2300      	movs	r3, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800a6e8:	604a      	str	r2, [r1, #4]
  } while (cp->prio >= tp->prio);
 800a6ea:	6881      	ldr	r1, [r0, #8]
 800a6ec:	6243      	str	r3, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800a6ee:	f880 3020 	strb.w	r3, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800a6f2:	462b      	mov	r3, r5
    cp = cp->queue.next;
 800a6f4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	428a      	cmp	r2, r1
 800a6fa:	d2fb      	bcs.n	800a6f4 <chMBPostAheadTimeout.constprop.0+0x84>
  tp->queue.prev             = cp->queue.prev;
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800a702:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800a704:	6058      	str	r0, [r3, #4]
  return firstprio(&ch.rlist.queue) > currp->prio;
 800a706:	682a      	ldr	r2, [r5, #0]
 800a708:	69ab      	ldr	r3, [r5, #24]
  if (chSchIsRescRequiredI()) {
 800a70a:	6892      	ldr	r2, [r2, #8]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d807      	bhi.n	800a722 <chMBPostAheadTimeout.constprop.0+0xb2>
      return MSG_OK;
 800a712:	2000      	movs	r0, #0
 800a714:	2300      	movs	r3, #0
 800a716:	f383 8811 	msr	BASEPRI, r3
}
 800a71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a71e:	4d03      	ldr	r5, [pc, #12]	@ (800a72c <chMBPostAheadTimeout.constprop.0+0xbc>)
 800a720:	e7f1      	b.n	800a706 <chMBPostAheadTimeout.constprop.0+0x96>
    chSchDoRescheduleAhead();
 800a722:	f7f9 fc15 	bl	8003f50 <chSchDoReschedule>
 800a726:	e7f4      	b.n	800a712 <chMBPostAheadTimeout.constprop.0+0xa2>
 800a728:	20000888 	.word	0x20000888
 800a72c:	200011c0 	.word	0x200011c0
 800a730:	200008a8 	.word	0x200008a8
	...

0800a740 <chMBPostTimeout.constprop.0>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800a740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a744:	2320      	movs	r3, #32
 800a746:	4680      	mov	r8, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	4c2a      	ldr	r4, [pc, #168]	@ (800a7f8 <chMBPostTimeout.constprop.0+0xb8>)
  queue_insert(currp, tqp);
 800a750:	4f2a      	ldr	r7, [pc, #168]	@ (800a7fc <chMBPostTimeout.constprop.0+0xbc>)
  tp->queue.next             = (thread_t *)tqp;
 800a752:	f104 0618 	add.w	r6, r4, #24
 800a756:	e010      	b.n	800a77a <chMBPostTimeout.constprop.0+0x3a>
 800a758:	e9d4 2c00 	ldrd	r2, ip, [r4]
  return mbp->cnt;
 800a75c:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800a75e:	ebac 0e02 	sub.w	lr, ip, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800a762:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 800a766:	d114      	bne.n	800a792 <chMBPostTimeout.constprop.0+0x52>
 800a768:	69bb      	ldr	r3, [r7, #24]
  tp->queue.prev             = tqp->prev;
 800a76a:	69e2      	ldr	r2, [r4, #28]
 800a76c:	e9c3 6200 	strd	r6, r2, [r3]
  tp->queue.prev->queue.next = tp;
 800a770:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 800a772:	61e3      	str	r3, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800a774:	f7f8 fb7c 	bl	8002e70 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800a778:	b930      	cbnz	r0, 800a788 <chMBPostTimeout.constprop.0+0x48>
    if (mbp->reset) {
 800a77a:	7d23      	ldrb	r3, [r4, #20]
 800a77c:	4629      	mov	r1, r5
 800a77e:	2004      	movs	r0, #4
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0e9      	beq.n	800a758 <chMBPostTimeout.constprop.0+0x18>
      return MSG_RESET;
 800a784:	f06f 0001 	mvn.w	r0, #1
 800a788:	2300      	movs	r3, #0
 800a78a:	f383 8811 	msr	BASEPRI, r3
}
 800a78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 800a792:	68a0      	ldr	r0, [r4, #8]
 800a794:	1d01      	adds	r1, r0, #4
 800a796:	60a1      	str	r1, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 800a798:	458c      	cmp	ip, r1
      *mbp->wrptr++ = msg;
 800a79a:	f8c0 8000 	str.w	r8, [r0]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a79e:	6a21      	ldr	r1, [r4, #32]
  if (queue_notempty(tqp)) {
 800a7a0:	4817      	ldr	r0, [pc, #92]	@ (800a800 <chMBPostTimeout.constprop.0+0xc0>)
        mbp->wrptr = mbp->buffer;
 800a7a2:	bf88      	it	hi
 800a7a4:	68a2      	ldrhi	r2, [r4, #8]
 800a7a6:	60a2      	str	r2, [r4, #8]
      mbp->cnt++;
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	4281      	cmp	r1, r0
 800a7ac:	6123      	str	r3, [r4, #16]
 800a7ae:	d01e      	beq.n	800a7ee <chMBPostTimeout.constprop.0+0xae>
  tqp->next             = tp->queue.next;
 800a7b0:	680a      	ldr	r2, [r1, #0]
  cp = (thread_t *)&ch.rlist.queue;
 800a7b2:	4d12      	ldr	r5, [pc, #72]	@ (800a7fc <chMBPostTimeout.constprop.0+0xbc>)
 800a7b4:	6222      	str	r2, [r4, #32]
 800a7b6:	2300      	movs	r3, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800a7b8:	6050      	str	r0, [r2, #4]
  } while (cp->prio >= tp->prio);
 800a7ba:	6888      	ldr	r0, [r1, #8]
 800a7bc:	624b      	str	r3, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800a7be:	f881 3020 	strb.w	r3, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800a7c2:	462b      	mov	r3, r5
    cp = cp->queue.next;
 800a7c4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	4282      	cmp	r2, r0
 800a7ca:	d2fb      	bcs.n	800a7c4 <chMBPostTimeout.constprop.0+0x84>
  tp->queue.prev             = cp->queue.prev;
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800a7d2:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800a7d4:	6059      	str	r1, [r3, #4]
  return firstprio(&ch.rlist.queue) > currp->prio;
 800a7d6:	682a      	ldr	r2, [r5, #0]
 800a7d8:	69ab      	ldr	r3, [r5, #24]
  if (chSchIsRescRequiredI()) {
 800a7da:	6892      	ldr	r2, [r2, #8]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d807      	bhi.n	800a7f2 <chMBPostTimeout.constprop.0+0xb2>
      return MSG_OK;
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f383 8811 	msr	BASEPRI, r3
}
 800a7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ee:	4d03      	ldr	r5, [pc, #12]	@ (800a7fc <chMBPostTimeout.constprop.0+0xbc>)
 800a7f0:	e7f1      	b.n	800a7d6 <chMBPostTimeout.constprop.0+0x96>
    chSchDoRescheduleAhead();
 800a7f2:	f7f9 fbad 	bl	8003f50 <chSchDoReschedule>
 800a7f6:	e7f4      	b.n	800a7e2 <chMBPostTimeout.constprop.0+0xa2>
 800a7f8:	20000888 	.word	0x20000888
 800a7fc:	200011c0 	.word	0x200011c0
 800a800:	200008a8 	.word	0x200008a8
	...

0800a810 <chMBReset.constprop.0>:
void chMBReset(mailbox_t *mbp) {
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	2320      	movs	r3, #32
 800a814:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 800a818:	4d35      	ldr	r5, [pc, #212]	@ (800a8f0 <chMBReset.constprop.0+0xe0>)
 800a81a:	4e36      	ldr	r6, [pc, #216]	@ (800a8f4 <chMBReset.constprop.0+0xe4>)
 800a81c:	682b      	ldr	r3, [r5, #0]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a81e:	462f      	mov	r7, r5
  mbp->cnt   = (size_t)0;
 800a820:	f04f 0c00 	mov.w	ip, #0
 800a824:	f857 4f18 	ldr.w	r4, [r7, #24]!
 800a828:	f8c5 c010 	str.w	ip, [r5, #16]
  mbp->reset = true;
 800a82c:	2201      	movs	r2, #1
  while (queue_notempty(tqp)) {
 800a82e:	42bc      	cmp	r4, r7
  mbp->wrptr = mbp->buffer;
 800a830:	e9c5 3302 	strd	r3, r3, [r5, #8]
  mbp->reset = true;
 800a834:	752a      	strb	r2, [r5, #20]
 800a836:	bf18      	it	ne
 800a838:	f06f 0e01 	mvnne.w	lr, #1
 800a83c:	d01f      	beq.n	800a87e <chMBReset.constprop.0+0x6e>
 800a83e:	4620      	mov	r0, r4
  tqp->next             = tp->queue.next;
 800a840:	6824      	ldr	r4, [r4, #0]
  cp = (thread_t *)&ch.rlist.queue;
 800a842:	4b2c      	ldr	r3, [pc, #176]	@ (800a8f4 <chMBReset.constprop.0+0xe4>)
  } while (cp->prio >= tp->prio);
 800a844:	6881      	ldr	r1, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a846:	6067      	str	r7, [r4, #4]
 800a848:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800a84c:	f880 c020 	strb.w	ip, [r0, #32]
    cp = cp->queue.next;
 800a850:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	428a      	cmp	r2, r1
 800a856:	d2fb      	bcs.n	800a850 <chMBReset.constprop.0+0x40>
  tp->queue.prev             = cp->queue.prev;
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	42bc      	cmp	r4, r7
 800a85c:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800a860:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800a862:	6058      	str	r0, [r3, #4]
 800a864:	d1eb      	bne.n	800a83e <chMBReset.constprop.0+0x2e>
 800a866:	f06f 0101 	mvn.w	r1, #1
 800a86a:	6241      	str	r1, [r0, #36]	@ 0x24
 800a86c:	2100      	movs	r1, #0
 800a86e:	e9c5 4406 	strd	r4, r4, [r5, #24]
 800a872:	f880 1020 	strb.w	r1, [r0, #32]
 800a876:	e9c0 3200 	strd	r3, r2, [r0]
 800a87a:	6010      	str	r0, [r2, #0]
 800a87c:	6058      	str	r0, [r3, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800a87e:	6a2c      	ldr	r4, [r5, #32]
 800a880:	4f1d      	ldr	r7, [pc, #116]	@ (800a8f8 <chMBReset.constprop.0+0xe8>)
 800a882:	42bc      	cmp	r4, r7
 800a884:	d023      	beq.n	800a8ce <chMBReset.constprop.0+0xbe>
 800a886:	f06f 0e01 	mvn.w	lr, #1
  tp->state = CH_STATE_READY;
 800a88a:	f04f 0c00 	mov.w	ip, #0
 800a88e:	4620      	mov	r0, r4
  tqp->next             = tp->queue.next;
 800a890:	6824      	ldr	r4, [r4, #0]
  cp = (thread_t *)&ch.rlist.queue;
 800a892:	4b18      	ldr	r3, [pc, #96]	@ (800a8f4 <chMBReset.constprop.0+0xe4>)
  } while (cp->prio >= tp->prio);
 800a894:	6881      	ldr	r1, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a896:	6067      	str	r7, [r4, #4]
 800a898:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800a89c:	f880 c020 	strb.w	ip, [r0, #32]
    cp = cp->queue.next;
 800a8a0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	428a      	cmp	r2, r1
 800a8a6:	d2fb      	bcs.n	800a8a0 <chMBReset.constprop.0+0x90>
  tp->queue.prev             = cp->queue.prev;
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	42bc      	cmp	r4, r7
 800a8ac:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800a8b0:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800a8b2:	6058      	str	r0, [r3, #4]
 800a8b4:	d1eb      	bne.n	800a88e <chMBReset.constprop.0+0x7e>
 800a8b6:	f06f 0101 	mvn.w	r1, #1
 800a8ba:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800a8be:	6241      	str	r1, [r0, #36]	@ 0x24
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	e9c0 3200 	strd	r3, r2, [r0]
 800a8c6:	f880 1020 	strb.w	r1, [r0, #32]
 800a8ca:	6010      	str	r0, [r2, #0]
 800a8cc:	6058      	str	r0, [r3, #4]
  return firstprio(&ch.rlist.queue) > currp->prio;
 800a8ce:	6832      	ldr	r2, [r6, #0]
 800a8d0:	69b3      	ldr	r3, [r6, #24]
  if (chSchIsRescRequiredI()) {
 800a8d2:	6892      	ldr	r2, [r2, #8]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d803      	bhi.n	800a8e2 <chMBReset.constprop.0+0xd2>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f383 8811 	msr	BASEPRI, r3
}
 800a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSchDoRescheduleAhead();
 800a8e2:	f7f9 fb35 	bl	8003f50 <chSchDoReschedule>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000888 	.word	0x20000888
 800a8f4:	200011c0 	.word	0x200011c0
 800a8f8:	200008a8 	.word	0x200008a8
 800a8fc:	00000000 	.word	0x00000000

0800a900 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800a900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a904:	2320      	movs	r3, #32
 800a906:	b086      	sub	sp, #24
 800a908:	4680      	mov	r8, r0
 800a90a:	460f      	mov	r7, r1
 800a90c:	4616      	mov	r6, r2
 800a90e:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800a912:	4d1a      	ldr	r5, [pc, #104]	@ (800a97c <chThdCreateFromMemoryPool.constprop.0+0x7c>)
 800a914:	682c      	ldr	r4, [r5, #0]
  if (objp != NULL) {
 800a916:	b31c      	cbz	r4, 800a960 <chThdCreateFromMemoryPool.constprop.0+0x60>
    mp->next = mp->next->next;
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	2300      	movs	r3, #0
 800a91e:	f383 8811 	msr	BASEPRI, r3
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800a922:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 800a924:	4a16      	ldr	r2, [pc, #88]	@ (800a980 <chThdCreateFromMemoryPool.constprop.0+0x80>)
 800a926:	f8cd 8000 	str.w	r8, [sp]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800a92a:	4423      	add	r3, r4
  thread_descriptor_t td = {
 800a92c:	9302      	str	r3, [sp, #8]
 800a92e:	9401      	str	r4, [sp, #4]
 800a930:	e9cd 7203 	strd	r7, r2, [sp, #12]
 800a934:	9605      	str	r6, [sp, #20]
 800a936:	2320      	movs	r3, #32
 800a938:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800a93c:	4668      	mov	r0, sp
 800a93e:	f7fa fbdf 	bl	8005100 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 800a942:	2302      	movs	r3, #2
 800a944:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
  tp->mpool = mp;
 800a948:	6405      	str	r5, [r0, #64]	@ 0x40
  chSchWakeupS(tp, MSG_OK);
 800a94a:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 800a94c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800a94e:	f7f9 f89f 	bl	8003a90 <chSchWakeupS>
 800a952:	2300      	movs	r3, #0
 800a954:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800a958:	4620      	mov	r0, r4
 800a95a:	b006      	add	sp, #24
 800a95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 800a960:	68eb      	ldr	r3, [r5, #12]
 800a962:	b143      	cbz	r3, 800a976 <chThdCreateFromMemoryPool.constprop.0+0x76>
    objp = mp->provider(mp->object_size, mp->align);
 800a964:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800a968:	4798      	blx	r3
 800a96a:	f384 8811 	msr	BASEPRI, r4
  if (wsp == NULL) {
 800a96e:	2800      	cmp	r0, #0
 800a970:	d0f2      	beq.n	800a958 <chThdCreateFromMemoryPool.constprop.0+0x58>
 800a972:	4604      	mov	r4, r0
 800a974:	e7d5      	b.n	800a922 <chThdCreateFromMemoryPool.constprop.0+0x22>
 800a976:	f384 8811 	msr	BASEPRI, r4
 800a97a:	e7ed      	b.n	800a958 <chThdCreateFromMemoryPool.constprop.0+0x58>
 800a97c:	200009f8 	.word	0x200009f8
 800a980:	08001161 	.word	0x08001161
	...

0800a990 <chHeapAllocAligned.constprop.0>:
    heapp = &default_heap;
 800a990:	4b3c      	ldr	r3, [pc, #240]	@ (800aa84 <chHeapAllocAligned.constprop.0+0xf4>)
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 800a992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    heapp = &default_heap;
 800a996:	2800      	cmp	r0, #0
 800a998:	bf14      	ite	ne
 800a99a:	4605      	movne	r5, r0
 800a99c:	461d      	moveq	r5, r3
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800a99e:	1dce      	adds	r6, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 800a9a0:	460c      	mov	r4, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800a9a2:	08f6      	lsrs	r6, r6, #3
  H_LOCK(heapp);
 800a9a4:	f105 070c 	add.w	r7, r5, #12
 800a9a8:	2320      	movs	r3, #32
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	f7fa fc16 	bl	80051e0 <chMtxLockS>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f383 8811 	msr	BASEPRI, r3
  while (H_NEXT(qp) != NULL) {
 800a9ba:	686b      	ldr	r3, [r5, #4]
 800a9bc:	f105 0e04 	add.w	lr, r5, #4
 800a9c0:	b90b      	cbnz	r3, 800a9c6 <chHeapAllocAligned.constprop.0+0x36>
 800a9c2:	e019      	b.n	800a9f8 <chHeapAllocAligned.constprop.0+0x68>
 800a9c4:	4613      	mov	r3, r2
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800a9c6:	f8d3 9004 	ldr.w	r9, [r3, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800a9ca:	f103 010f 	add.w	r1, r3, #15
 800a9ce:	f021 0107 	bic.w	r1, r1, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800a9d2:	f109 0201 	add.w	r2, r9, #1
 800a9d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800a9da:	f1a1 0008 	sub.w	r0, r1, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800a9de:	eba2 0c01 	sub.w	ip, r2, r1
 800a9e2:	4290      	cmp	r0, r2
 800a9e4:	ea4f 0aec 	mov.w	sl, ip, asr #3
 800a9e8:	d202      	bcs.n	800a9f0 <chHeapAllocAligned.constprop.0+0x60>
 800a9ea:	ebb6 0fec 	cmp.w	r6, ip, asr #3
 800a9ee:	d914      	bls.n	800aa1a <chHeapAllocAligned.constprop.0+0x8a>
  while (H_NEXT(qp) != NULL) {
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	469e      	mov	lr, r3
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	d1e5      	bne.n	800a9c4 <chHeapAllocAligned.constprop.0+0x34>
  H_UNLOCK(heapp);
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	f7fa fc91 	bl	8005320 <chMtxUnlock>
  if (heapp->provider != NULL) {
 800a9fe:	682b      	ldr	r3, [r5, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d03a      	beq.n	800aa7a <chHeapAllocAligned.constprop.0+0xea>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 800aa04:	2208      	movs	r2, #8
 800aa06:	00f0      	lsls	r0, r6, #3
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4798      	blx	r3
    if (ahp != NULL) {
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	b108      	cbz	r0, 800aa14 <chHeapAllocAligned.constprop.0+0x84>
      H_SIZE(hp) = size;
 800aa10:	e940 5402 	strd	r5, r4, [r0, #-8]
}
 800aa14:	4640      	mov	r0, r8
 800aa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ahp > hp) {
 800aa1a:	4283      	cmp	r3, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800aa1c:	f103 0808 	add.w	r8, r3, #8
      if (ahp > hp) {
 800aa20:	d316      	bcc.n	800aa50 <chHeapAllocAligned.constprop.0+0xc0>
        if (H_PAGES(hp) == pages) {
 800aa22:	454e      	cmp	r6, r9
          H_NEXT(fp) = H_NEXT(hp);
 800aa24:	6819      	ldr	r1, [r3, #0]
        if (H_PAGES(hp) == pages) {
 800aa26:	d009      	beq.n	800aa3c <chHeapAllocAligned.constprop.0+0xac>
          fp = H_BLOCK(hp) + pages;
 800aa28:	3601      	adds	r6, #1
          H_NEXT(fp) = H_NEXT(hp);
 800aa2a:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
          fp = H_BLOCK(hp) + pages;
 800aa2e:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 800aa32:	f101 0008 	add.w	r0, r1, #8
 800aa36:	1a12      	subs	r2, r2, r0
 800aa38:	10d2      	asrs	r2, r2, #3
 800aa3a:	604a      	str	r2, [r1, #4]
          H_NEXT(qp) = fp;
 800aa3c:	f8ce 1000 	str.w	r1, [lr]
      H_UNLOCK(heapp);
 800aa40:	4638      	mov	r0, r7
      H_HEAP(hp) = heapp;
 800aa42:	e9c3 5400 	strd	r5, r4, [r3]
      H_UNLOCK(heapp);
 800aa46:	f7fa fc6b 	bl	8005320 <chMtxUnlock>
}
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800aa50:	eba0 0208 	sub.w	r2, r0, r8
 800aa54:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 800aa56:	4556      	cmp	r6, sl
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800aa58:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 800aa5a:	d20b      	bcs.n	800aa74 <chHeapAllocAligned.constprop.0+0xe4>
          fp = H_BLOCK(ahp) + pages;
 800aa5c:	f106 0c01 	add.w	ip, r6, #1
          H_PAGES(fp) = (bpages - pages) - 1U;
 800aa60:	ebaa 0206 	sub.w	r2, sl, r6
          fp = H_BLOCK(ahp) + pages;
 800aa64:	eb00 06cc 	add.w	r6, r0, ip, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 800aa68:	3a01      	subs	r2, #1
 800aa6a:	6072      	str	r2, [r6, #4]
          H_NEXT(fp) = H_NEXT(hp);
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	f840 203c 	str.w	r2, [r0, ip, lsl #3]
          H_NEXT(hp) = fp;
 800aa72:	601e      	str	r6, [r3, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 800aa74:	4688      	mov	r8, r1
        hp = ahp;
 800aa76:	4603      	mov	r3, r0
 800aa78:	e7e2      	b.n	800aa40 <chHeapAllocAligned.constprop.0+0xb0>
  return NULL;
 800aa7a:	4698      	mov	r8, r3
}
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa82:	bf00      	nop
 800aa84:	20001120 	.word	0x20001120
	...

0800aa90 <chThdCreateFromHeap.constprop.0>:
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 800aa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa94:	4605      	mov	r5, r0
 800aa96:	b086      	sub	sp, #24
 800aa98:	460f      	mov	r7, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	4811      	ldr	r0, [pc, #68]	@ (800aae4 <chThdCreateFromHeap.constprop.0+0x54>)
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 800aa9e:	4690      	mov	r8, r2
 800aaa0:	461e      	mov	r6, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800aaa2:	f7ff ff75 	bl	800a990 <chHeapAllocAligned.constprop.0>
  if (wsp == NULL) {
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	b1c0      	cbz	r0, 800aadc <chThdCreateFromHeap.constprop.0+0x4c>
  thread_descriptor_t td = {
 800aaaa:	4b0f      	ldr	r3, [pc, #60]	@ (800aae8 <chThdCreateFromHeap.constprop.0+0x58>)
 800aaac:	9304      	str	r3, [sp, #16]
    (stkalign_t *)((uint8_t *)wsp + size),
 800aaae:	4405      	add	r5, r0
  thread_descriptor_t td = {
 800aab0:	9502      	str	r5, [sp, #8]
 800aab2:	e9cd 7000 	strd	r7, r0, [sp]
 800aab6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaba:	9605      	str	r6, [sp, #20]
 800aabc:	2320      	movs	r3, #32
 800aabe:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 800aac2:	4668      	mov	r0, sp
 800aac4:	f7fa fb1c 	bl	8005100 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 800aac8:	2301      	movs	r3, #1
 800aaca:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
  chSchWakeupS(tp, MSG_OK);
 800aace:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 800aad0:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800aad2:	f7f8 ffdd 	bl	8003a90 <chSchWakeupS>
 800aad6:	2300      	movs	r3, #0
 800aad8:	f383 8811 	msr	BASEPRI, r3
}
 800aadc:	4620      	mov	r0, r4
 800aade:	b006      	add	sp, #24
 800aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae4:	20001070 	.word	0x20001070
 800aae8:	08001161 	.word	0x08001161
 800aaec:	00000000 	.word	0x00000000

0800aaf0 <chEvtWaitOne.constprop.0>:
  thread_t *ctp = currp;
 800aaf0:	4b11      	ldr	r3, [pc, #68]	@ (800ab38 <chEvtWaitOne.constprop.0+0x48>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 800aaf6:	699c      	ldr	r4, [r3, #24]
 800aaf8:	f382 8811 	msr	BASEPRI, r2
  m = ctp->epending & events;
 800aafc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  if (m == (eventmask_t)0) {
 800aafe:	b140      	cbz	r0, 800ab12 <chEvtWaitOne.constprop.0+0x22>
  m ^= m & (m - (eventmask_t)1);
 800ab00:	4243      	negs	r3, r0
  ctp->epending &= ~m;
 800ab02:	ea20 0203 	bic.w	r2, r0, r3
 800ab06:	6362      	str	r2, [r4, #52]	@ 0x34
  m ^= m & (m - (eventmask_t)1);
 800ab08:	4018      	ands	r0, r3
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f383 8811 	msr	BASEPRI, r3
}
 800ab10:	bd10      	pop	{r4, pc}
  thread_t *otp = currp;
 800ab12:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 800ab14:	6818      	ldr	r0, [r3, #0]
    ctp->u.ewmask = events;
 800ab16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab1a:	6262      	str	r2, [r4, #36]	@ 0x24
  otp->state = newstate;
 800ab1c:	220a      	movs	r2, #10
 800ab1e:	f881 2020 	strb.w	r2, [r1, #32]
  tqp->next             = tp->queue.next;
 800ab22:	6802      	ldr	r2, [r0, #0]
 800ab24:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800ab26:	6053      	str	r3, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800ab2e:	6198      	str	r0, [r3, #24]
  chSysSwitch(currp, otp);
 800ab30:	f7f5 fbc6 	bl	80002c0 <_port_switch>
    m = ctp->epending & events;
 800ab34:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ab36:	e7e3      	b.n	800ab00 <chEvtWaitOne.constprop.0+0x10>
 800ab38:	200011c0 	.word	0x200011c0
 800ab3c:	00000000 	.word	0x00000000

0800ab40 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	4604      	mov	r4, r0
 800ab44:	2020      	movs	r0, #32
 800ab46:	f380 8811 	msr	BASEPRI, r0
  tp->mtxlist   = NULL;
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	e9c4 614e 	strd	r6, r1, [r4, #312]	@ 0x138
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800ab50:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
  tp->prio      = prio;
 800ab54:	f8c4 1108 	str.w	r1, [r4, #264]	@ 0x108
  REG_INSERT(tp);
 800ab58:	4a16      	ldr	r2, [pc, #88]	@ (800abb4 <chThdCreateStatic.constprop.0+0x74>)
  tp->name      = name;
 800ab5a:	4917      	ldr	r1, [pc, #92]	@ (800abb8 <chThdCreateStatic.constprop.0+0x78>)
 800ab5c:	f8c4 1118 	str.w	r1, [r4, #280]	@ 0x118
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800ab60:	f104 01dc 	add.w	r1, r4, #220	@ 0xdc
  REG_INSERT(tp);
 800ab64:	6950      	ldr	r0, [r2, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800ab66:	f8c4 110c 	str.w	r1, [r4, #268]	@ 0x10c
  tp->state     = CH_STATE_WTSTART;
 800ab6a:	2102      	movs	r1, #2
  tp = (thread_t *)((uint8_t *)wsp + size -
 800ab6c:	f504 7580 	add.w	r5, r4, #256	@ 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800ab70:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  tp->state     = CH_STATE_WTSTART;
 800ab74:	f8a4 1120 	strh.w	r1, [r4, #288]	@ 0x120
  queue_init(&tp->msgqueue);
 800ab78:	f504 7396 	add.w	r3, r4, #300	@ 0x12c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800ab7c:	4f0f      	ldr	r7, [pc, #60]	@ (800abbc <chThdCreateStatic.constprop.0+0x7c>)
 800ab7e:	f8c4 70fc 	str.w	r7, [r4, #252]	@ 0xfc
  tp->refs      = (trefs_t)1;
 800ab82:	2101      	movs	r1, #1
  REG_INSERT(tp);
 800ab84:	e9c4 2044 	strd	r2, r0, [r4, #272]	@ 0x110
  tp->refs      = (trefs_t)1;
 800ab88:	f884 1122 	strb.w	r1, [r4, #290]	@ 0x122
  tp->wabase = (stkalign_t *)wsp;
 800ab8c:	f8c4 411c 	str.w	r4, [r4, #284]	@ 0x11c
  tp->epending  = (eventmask_t)0;
 800ab90:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
  REG_INSERT(tp);
 800ab94:	6105      	str	r5, [r0, #16]
  tqp->prev = (thread_t *)tqp;
 800ab96:	e9c4 334b 	strd	r3, r3, [r4, #300]	@ 0x12c
  list_init(&tp->waiting);
 800ab9a:	f504 7394 	add.w	r3, r4, #296	@ 0x128
  chSchWakeupS(tp, MSG_OK);
 800ab9e:	4631      	mov	r1, r6
  tlp->next = (thread_t *)tlp;
 800aba0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800aba4:	4628      	mov	r0, r5
  REG_INSERT(tp);
 800aba6:	6155      	str	r5, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 800aba8:	f7f8 ff72 	bl	8003a90 <chSchWakeupS>
 800abac:	f386 8811 	msr	BASEPRI, r6
}
 800abb0:	4628      	mov	r0, r5
 800abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb4:	200011c0 	.word	0x200011c0
 800abb8:	0800c3b4 	.word	0x0800c3b4
 800abbc:	080002d1 	.word	0x080002d1

0800abc0 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800abc0:	4bc1      	ldr	r3, [pc, #772]	@ (800aec8 <main+0x308>)
  PWR->CR |= PWR_CR_DBP;
 800abc2:	48c2      	ldr	r0, [pc, #776]	@ (800aecc <main+0x30c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800abc4:	691a      	ldr	r2, [r3, #16]
 800abc6:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800abca:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
}

/*
 * Application entry point.
 */
int main(void) {
 800abce:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800abd2:	611a      	str	r2, [r3, #16]
 800abd4:	691a      	ldr	r2, [r3, #16]
 800abd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abda:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800abdc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800abe0:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 800abe2:	695a      	ldr	r2, [r3, #20]
 800abe4:	615c      	str	r4, [r3, #20]
 800abe6:	2100      	movs	r1, #0
 800abe8:	695a      	ldr	r2, [r3, #20]
 800abea:	6159      	str	r1, [r3, #20]
 800abec:	695a      	ldr	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800abee:	6a1a      	ldr	r2, [r3, #32]
 800abf0:	f062 5280 	orn	r2, r2, #268435456	@ 0x10000000
 800abf4:	621a      	str	r2, [r3, #32]
 800abf6:	6a1a      	ldr	r2, [r3, #32]
 800abf8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800abfc:	621a      	str	r2, [r3, #32]
 800abfe:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800ac00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac02:	625c      	str	r4, [r3, #36]	@ 0x24
 800ac04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac06:	6259      	str	r1, [r3, #36]	@ 0x24
 800ac08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  rccEnablePWRInterface(true);
 800ac0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac0c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800ac10:	641a      	str	r2, [r3, #64]	@ 0x40
 800ac12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ac14:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800ac18:	661a      	str	r2, [r3, #96]	@ 0x60
 800ac1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  PWR->CR |= PWR_CR_DBP;
 800ac1c:	6802      	ldr	r2, [r0, #0]
 800ac1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac22:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800ac24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ac26:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800ac2a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800ac2e:	b087      	sub	sp, #28
 800ac30:	d003      	beq.n	800ac3a <main+0x7a>
    RCC->BDCR = RCC_BDCR_BDRST;
 800ac32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ac36:	671a      	str	r2, [r3, #112]	@ 0x70
    RCC->BDCR = 0;
 800ac38:	6719      	str	r1, [r3, #112]	@ 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800ac3a:	49a4      	ldr	r1, [pc, #656]	@ (800aecc <main+0x30c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800ac3c:	4ea4      	ldr	r6, [pc, #656]	@ (800aed0 <main+0x310>)
 800ac3e:	684a      	ldr	r2, [r1, #4]
  sdp->vmt = &vmt;
 800ac40:	4da4      	ldr	r5, [pc, #656]	@ (800aed4 <main+0x314>)
 800ac42:	4fa5      	ldr	r7, [pc, #660]	@ (800aed8 <main+0x318>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800ac44:	f8df 8280 	ldr.w	r8, [pc, #640]	@ 800aec8 <main+0x308>
  oqp->q_notify  = onfy;
 800ac48:	f8df e290 	ldr.w	lr, [pc, #656]	@ 800aedc <main+0x31c>
 800ac4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ac50:	604a      	str	r2, [r1, #4]
 800ac52:	2360      	movs	r3, #96	@ 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ac54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac58:	2180      	movs	r1, #128	@ 0x80
 800ac5a:	f04f 0a40 	mov.w	sl, #64	@ 0x40
 800ac5e:	f44f 7400 	mov.w	r4, #512	@ 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800ac62:	f886 3306 	strb.w	r3, [r6, #774]	@ 0x306
 800ac66:	4628      	mov	r0, r5
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ac68:	f8c6 a180 	str.w	sl, [r6, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ac6c:	f8c6 a000 	str.w	sl, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800ac70:	f886 3307 	strb.w	r3, [r6, #775]	@ 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ac74:	f8c6 1180 	str.w	r1, [r6, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ac78:	6031      	str	r1, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800ac7a:	f886 3308 	strb.w	r3, [r6, #776]	@ 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ac7e:	f8c6 2180 	str.w	r2, [r6, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ac82:	6032      	str	r2, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800ac84:	f886 3309 	strb.w	r3, [r6, #777]	@ 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ac88:	f8c6 4180 	str.w	r4, [r6, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ac8c:	6034      	str	r4, [r6, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ac8e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800ac92:	f886 330a 	strb.w	r3, [r6, #778]	@ 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ac96:	f8c6 4180 	str.w	r4, [r6, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ac9a:	6034      	str	r4, [r6, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ac9c:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800aca0:	f886 3317 	strb.w	r3, [r6, #791]	@ 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800aca4:	f8c6 4180 	str.w	r4, [r6, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800aca8:	6034      	str	r4, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800acaa:	f886 3328 	strb.w	r3, [r6, #808]	@ 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800acae:	f8c6 2184 	str.w	r2, [r6, #388]	@ 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800acb2:	6072      	str	r2, [r6, #4]
 800acb4:	f840 7b04 	str.w	r7, [r0], #4
  iqp->q_buffer  = bp;
 800acb8:	f105 0254 	add.w	r2, r5, #84	@ 0x54
  iqp->q_counter = 0;
 800acbc:	2700      	movs	r7, #0
  sdp->state = SD_STOP;
 800acbe:	f04f 0901 	mov.w	r9, #1
  iqp->q_top     = bp + size;
 800acc2:	f105 0364 	add.w	r3, r5, #100	@ 0x64
  oqp->q_counter = size;
 800acc6:	f04f 0b10 	mov.w	fp, #16
  iqp->q_wrptr   = bp;
 800acca:	e9c5 2208 	strd	r2, r2, [r5, #32]
  iqp->q_buffer  = bp;
 800acce:	61aa      	str	r2, [r5, #24]
  tqp->next = (thread_t *)tqp;
 800acd0:	f105 020c 	add.w	r2, r5, #12
  tqp->prev = (thread_t *)tqp;
 800acd4:	e9c5 2203 	strd	r2, r2, [r5, #12]
  esp->next = (event_listener_t *)esp;
 800acd8:	6068      	str	r0, [r5, #4]
 800acda:	f885 9008 	strb.w	r9, [r5, #8]
  iqp->q_counter = 0;
 800acde:	616f      	str	r7, [r5, #20]
  iqp->q_top     = bp + size;
 800ace0:	61eb      	str	r3, [r5, #28]
  oqp->q_counter = size;
 800ace2:	f8c5 b038 	str.w	fp, [r5, #56]	@ 0x38
  oqp->q_wrptr   = bp;
 800ace6:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
  oqp->q_buffer  = bp;
 800acea:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800acec:	f8d8 3040 	ldr.w	r3, [r8, #64]	@ 0x40
  oqp->q_link    = link;
 800acf0:	652d      	str	r5, [r5, #80]	@ 0x50
 800acf2:	ea43 0309 	orr.w	r3, r3, r9
  iqp->q_link    = link;
 800acf6:	e9c5 750a 	strd	r7, r5, [r5, #40]	@ 0x28
 800acfa:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 800acfe:	f8d8 3060 	ldr.w	r3, [r8, #96]	@ 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800ad02:	4a77      	ldr	r2, [pc, #476]	@ (800aee0 <main+0x320>)
  tqp->next = (thread_t *)tqp;
 800ad04:	4c77      	ldr	r4, [pc, #476]	@ (800aee4 <main+0x324>)
  ST_ENABLE_CLOCK();
 800ad06:	ea43 0309 	orr.w	r3, r3, r9
 800ad0a:	f8c8 3060 	str.w	r3, [r8, #96]	@ 0x60
 800ad0e:	f8d8 3060 	ldr.w	r3, [r8, #96]	@ 0x60
  ST_ENABLE_STOP();
 800ad12:	6893      	ldr	r3, [r2, #8]
  tqp->prev = (thread_t *)tqp;
 800ad14:	6064      	str	r4, [r4, #4]
 800ad16:	ea43 0309 	orr.w	r3, r3, r9
 800ad1a:	6093      	str	r3, [r2, #8]
  oqp->q_notify  = onfy;
 800ad1c:	f8c5 e04c 	str.w	lr, [r5, #76]	@ 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 800ad20:	f8df e1c4 	ldr.w	lr, [pc, #452]	@ 800aee8 <main+0x328>
 800ad24:	f8c5 e074 	str.w	lr, [r5, #116]	@ 0x74

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800ad28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  tqp->next = (thread_t *)tqp;
 800ad2c:	f105 0030 	add.w	r0, r5, #48	@ 0x30
  oqp->q_top     = bp + size;
 800ad30:	f105 0e74 	add.w	lr, r5, #116	@ 0x74
  tqp->prev = (thread_t *)tqp;
 800ad34:	e9c5 000c 	strd	r0, r0, [r5, #48]	@ 0x30
 800ad38:	f8c5 e040 	str.w	lr, [r5, #64]	@ 0x40
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ad3c:	f04f 5c80 	mov.w	ip, #268435456	@ 0x10000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800ad40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800ad44:	f242 0ecf 	movw	lr, #8399	@ 0x20cf
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800ad48:	f104 001c 	add.w	r0, r4, #28
 800ad4c:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800ad50:	62da      	str	r2, [r3, #44]	@ 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800ad52:	619f      	str	r7, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800ad54:	635f      	str	r7, [r3, #52]	@ 0x34
  STM32_ST_TIM->DIER   = 0;
 800ad56:	60df      	str	r7, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800ad58:	605f      	str	r7, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800ad5a:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800ad5e:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800ad62:	f886 131c 	strb.w	r1, [r6, #796]	@ 0x31c
  tmp->cumulative = (rttime_t)0;
 800ad66:	2300      	movs	r3, #0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ad68:	f8c6 c180 	str.w	ip, [r6, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ad6c:	f8c6 c000 	str.w	ip, [r6]
  tqp->next = (thread_t *)tqp;
 800ad70:	6024      	str	r4, [r4, #0]
  ch.rlist.prio = NOPRIO;
 800ad72:	60a7      	str	r7, [r4, #8]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 800ad74:	e9c4 0007 	strd	r0, r0, [r4, #28]
  ch.vtlist.delta = (sysinterval_t)-1;
 800ad78:	6262      	str	r2, [r4, #36]	@ 0x24
  chTMStartMeasurementX(&tm);
 800ad7a:	4668      	mov	r0, sp
  tmp->best       = (rtcnt_t)-1;
 800ad7c:	9200      	str	r2, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 800ad7e:	2200      	movs	r2, #0
 800ad80:	e9cd 2304 	strd	r2, r3, [sp, #16]
  ch.vtlist.lasttime = (systime_t)0;
 800ad84:	62a7      	str	r7, [r4, #40]	@ 0x28
  ch.tm.offset = (rtcnt_t)0;
 800ad86:	6767      	str	r7, [r4, #116]	@ 0x74
  tmp->worst      = (rtcnt_t)0;
 800ad88:	9701      	str	r7, [sp, #4]
  tmp->n          = (ucnt_t)0;
 800ad8a:	9703      	str	r7, [sp, #12]
  chTMStartMeasurementX(&tm);
 800ad8c:	f7fe f910 	bl	8008fb0 <chTMStartMeasurementX.constprop.0>
  chTMStopMeasurementX(&tm);
 800ad90:	f7fa f9fe 	bl	8005190 <chTMStopMeasurementX>
  tp->prio      = prio;
 800ad94:	2180      	movs	r1, #128	@ 0x80
  tp->mtxlist   = NULL;
 800ad96:	e9c4 711a 	strd	r7, r1, [r4, #104]	@ 0x68
  tp->prio      = prio;
 800ad9a:	63a1      	str	r1, [r4, #56]	@ 0x38
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800ad9c:	4953      	ldr	r1, [pc, #332]	@ (800aeec <main+0x32c>)
 800ad9e:	4a54      	ldr	r2, [pc, #336]	@ (800aef0 <main+0x330>)
  ch_memcore.nextmem = __heap_base__;
 800ada0:	f8df c150 	ldr.w	ip, [pc, #336]	@ 800aef4 <main+0x334>
  mp->owner = NULL;
 800ada4:	614f      	str	r7, [r1, #20]
 800ada6:	f101 030c 	add.w	r3, r1, #12
  tqp->prev = (thread_t *)tqp;
 800adaa:	e9c1 3303 	strd	r3, r3, [r1, #12]
  ch.tm.offset = tm.last;
 800adae:	9b02      	ldr	r3, [sp, #8]
 800adb0:	6763      	str	r3, [r4, #116]	@ 0x74
  mp->provider = provider;
 800adb2:	4b51      	ldr	r3, [pc, #324]	@ (800aef8 <main+0x338>)
 800adb4:	6213      	str	r3, [r2, #32]
 800adb6:	6393      	str	r3, [r2, #56]	@ 0x38
  dlp->next = (dyn_element_t *)dlp;
 800adb8:	eb02 030b 	add.w	r3, r2, fp
 800adbc:	6113      	str	r3, [r2, #16]
  mp->align = align;
 800adbe:	2304      	movs	r3, #4
 800adc0:	61d3      	str	r3, [r2, #28]
 800adc2:	6353      	str	r3, [r2, #52]	@ 0x34
 800adc4:	f102 0324 	add.w	r3, r2, #36	@ 0x24
 800adc8:	6253      	str	r3, [r2, #36]	@ 0x24
 800adca:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 800adce:	6293      	str	r3, [r2, #40]	@ 0x28
 800add0:	f102 033c 	add.w	r3, r2, #60	@ 0x3c
 800add4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800add6:	eb02 030a 	add.w	r3, r2, sl
 800adda:	6413      	str	r3, [r2, #64]	@ 0x40
 800addc:	f102 0344 	add.w	r3, r2, #68	@ 0x44
 800ade0:	6453      	str	r3, [r2, #68]	@ 0x44
 800ade2:	4b46      	ldr	r3, [pc, #280]	@ (800aefc <main+0x33c>)
 800ade4:	f8cc 3000 	str.w	r3, [ip]
  ch_memcore.endmem  = __heap_end__;
 800ade8:	4b45      	ldr	r3, [pc, #276]	@ (800af00 <main+0x340>)
 800adea:	f8cc 3004 	str.w	r3, [ip, #4]
 800adee:	4b45      	ldr	r3, [pc, #276]	@ (800af04 <main+0x344>)
 800adf0:	600b      	str	r3, [r1, #0]
  H_PAGES(&default_heap.header) = 0;
 800adf2:	e9c1 7701 	strd	r7, r7, [r1, #4]
  mp->object_size = size;
 800adf6:	2114      	movs	r1, #20
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800adf8:	4843      	ldr	r0, [pc, #268]	@ (800af08 <main+0x348>)
 800adfa:	6191      	str	r1, [r2, #24]
  tp->name      = name;
 800adfc:	4b43      	ldr	r3, [pc, #268]	@ (800af0c <main+0x34c>)
  tp->refs      = (trefs_t)1;
 800adfe:	f884 9052 	strb.w	r9, [r4, #82]	@ 0x52
 800ae02:	211c      	movs	r1, #28
 800ae04:	6097      	str	r7, [r2, #8]
  mp->next = NULL;
 800ae06:	6157      	str	r7, [r2, #20]
 800ae08:	62d7      	str	r7, [r2, #44]	@ 0x2c
  mp->object_size = size;
 800ae0a:	6311      	str	r1, [r2, #48]	@ 0x30
 800ae0c:	e9c2 2200 	strd	r2, r2, [r2]
  tp->epending  = (eventmask_t)0;
 800ae10:	6667      	str	r7, [r4, #100]	@ 0x64
  tp->name      = name;
 800ae12:	64a3      	str	r3, [r4, #72]	@ 0x48
  currp->state = CH_STATE_CURRENT;
 800ae14:	f8a4 9050 	strh.w	r9, [r4, #80]	@ 0x50
 800ae18:	68c2      	ldr	r2, [r0, #12]
  currp->wabase = NULL;
 800ae1a:	64e7      	str	r7, [r4, #76]	@ 0x4c
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ae20:	401a      	ands	r2, r3
  reg_value  =  (reg_value                                   |
 800ae22:	4b3b      	ldr	r3, [pc, #236]	@ (800af10 <main+0x350>)
 800ae24:	4313      	orrs	r3, r2
  REG_INSERT(tp);
 800ae26:	e9c4 4410 	strd	r4, r4, [r4, #64]	@ 0x40
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800ae2a:	60c3      	str	r3, [r0, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800ae2c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	@ 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800ae30:	4a38      	ldr	r2, [pc, #224]	@ (800af14 <main+0x354>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800ae32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ae36:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
 800ae3a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800ae3e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800ae42:	61a3      	str	r3, [r4, #24]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800ae44:	6813      	ldr	r3, [r2, #0]
 800ae46:	ea43 0309 	orr.w	r3, r3, r9
 800ae4a:	6013      	str	r3, [r2, #0]
  tqp->next = (thread_t *)tqp;
 800ae4c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae50:	f880 b01f 	strb.w	fp, [r0, #31]
 800ae54:	f04f 0920 	mov.w	r9, #32
  tqp->prev = (thread_t *)tqp;
 800ae58:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
  tlp->next = (thread_t *)tlp;
 800ae5c:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 800ae60:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ae62:	f880 9022 	strb.w	r9, [r0, #34]	@ 0x22
 800ae66:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 800ae6a:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800ae6c:	f389 8811 	msr	BASEPRI, r9
  tp = chThdCreateSuspendedI(tdp);
 800ae70:	4829      	ldr	r0, [pc, #164]	@ (800af18 <main+0x358>)
 800ae72:	f7fa f945 	bl	8005100 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800ae76:	4639      	mov	r1, r7
 800ae78:	f7f8 fe0a 	bl	8003a90 <chSchWakeupS>
 800ae7c:	f387 8811 	msr	BASEPRI, r7
 800ae80:	f389 8811 	msr	BASEPRI, r9
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800ae84:	7a2b      	ldrb	r3, [r5, #8]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d114      	bne.n	800aeb4 <main+0x2f4>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 800ae8a:	f8d8 3040 	ldr.w	r3, [r8, #64]	@ 0x40
 800ae8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae92:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 800ae96:	f8d8 3060 	ldr.w	r3, [r8, #96]	@ 0x60
 800ae9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae9e:	f8c8 3060 	str.w	r3, [r8, #96]	@ 0x60
 800aea2:	f8d8 3060 	ldr.w	r3, [r8, #96]	@ 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800aea6:	23c0      	movs	r3, #192	@ 0xc0
 800aea8:	f886 3326 	strb.w	r3, [r6, #806]	@ 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800aeac:	f8c6 a184 	str.w	sl, [r6, #388]	@ 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800aeb0:	f8c6 a004 	str.w	sl, [r6, #4]
  USART_TypeDef *u = sdp->usart;
 800aeb4:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800aeb6:	4b19      	ldr	r3, [pc, #100]	@ (800af1c <main+0x35c>)
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	f000 8086 	beq.w	800afca <main+0x40a>
 800aebe:	4818      	ldr	r0, [pc, #96]	@ (800af20 <main+0x360>)
    fck = STM32_PCLK1 / config->speed;
 800aec0:	f640 038b 	movw	r3, #2187	@ 0x88b
 800aec4:	e02e      	b.n	800af24 <main+0x364>
 800aec6:	bf00      	nop
 800aec8:	40023800 	.word	0x40023800
 800aecc:	40007000 	.word	0x40007000
 800aed0:	e000e100 	.word	0xe000e100
 800aed4:	20001144 	.word	0x20001144
 800aed8:	0800d35c 	.word	0x0800d35c
 800aedc:	08000911 	.word	0x08000911
 800aee0:	e0042000 	.word	0xe0042000
 800aee4:	200011c0 	.word	0x200011c0
 800aee8:	40004400 	.word	0x40004400
 800aeec:	20001120 	.word	0x20001120
 800aef0:	200010d8 	.word	0x200010d8
 800aef4:	2000113c 	.word	0x2000113c
 800aef8:	08000af1 	.word	0x08000af1
 800aefc:	20001458 	.word	0x20001458
 800af00:	20020000 	.word	0x20020000
 800af04:	08000aa1 	.word	0x08000aa1
 800af08:	e000ed00 	.word	0xe000ed00
 800af0c:	0800d39c 	.word	0x0800d39c
 800af10:	05fa0300 	.word	0x05fa0300
 800af14:	e0001000 	.word	0xe0001000
 800af18:	0800d384 	.word	0x0800d384
 800af1c:	40011000 	.word	0x40011000
 800af20:	40011400 	.word	0x40011400
 800af24:	f240 4145 	movw	r1, #1093	@ 0x445
 800af28:	4282      	cmp	r2, r0
 800af2a:	bf18      	it	ne
 800af2c:	460b      	movne	r3, r1
  u->BRR = fck;
 800af2e:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800af30:	2340      	movs	r3, #64	@ 0x40
 800af32:	6113      	str	r3, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800af34:	2301      	movs	r3, #1
 800af36:	6153      	str	r3, [r2, #20]
  u->SR = 0;
 800af38:	2600      	movs	r6, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800af3a:	f242 132c 	movw	r3, #8492	@ 0x212c
 800af3e:	60d3      	str	r3, [r2, #12]
  u->SR = 0;
 800af40:	6016      	str	r6, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800af42:	6813      	ldr	r3, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800af44:	6853      	ldr	r3, [r2, #4]
    sdp->rxmask = 0xFF;
 800af46:	23ff      	movs	r3, #255	@ 0xff
 800af48:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
  sdp->state = SD_READY;
 800af4c:	2302      	movs	r3, #2
 800af4e:	722b      	strb	r3, [r5, #8]
 800af50:	f386 8811 	msr	BASEPRI, r6
  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 800af54:	2004      	movs	r0, #4
 800af56:	f7fe f833 	bl	8008fc0 <_pal_lld_setgroupmode.constprop.0>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 800af5a:	2008      	movs	r0, #8
 800af5c:	f7fe f830 	bl	8008fc0 <_pal_lld_setgroupmode.constprop.0>

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800af60:	4633      	mov	r3, r6
 800af62:	4a1b      	ldr	r2, [pc, #108]	@ (800afd0 <main+0x410>)
 800af64:	481b      	ldr	r0, [pc, #108]	@ (800afd4 <main+0x414>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800af66:	4f1c      	ldr	r7, [pc, #112]	@ (800afd8 <main+0x418>)
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 800af68:	4e1c      	ldr	r6, [pc, #112]	@ (800afdc <main+0x41c>)
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 800af6a:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800afe0 <main+0x420>
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800af6e:	2180      	movs	r1, #128	@ 0x80
 800af70:	f7ff fde6 	bl	800ab40 <chThdCreateStatic.constprop.0>
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	07db      	lsls	r3, r3, #31
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 800af78:	4630      	mov	r0, r6
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800af7a:	d504      	bpl.n	800af86 <main+0x3c6>
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 800af7c:	f7fe fec0 	bl	8009d00 <test_execute.constprop.0.isra.0>
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 800af80:	4640      	mov	r0, r8
 800af82:	f7fe febd 	bl	8009d00 <test_execute.constprop.0.isra.0>
 800af86:	2320      	movs	r3, #32
 800af88:	f383 8811 	msr	BASEPRI, r3
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800af8c:	69a5      	ldr	r5, [r4, #24]
 800af8e:	4a15      	ldr	r2, [pc, #84]	@ (800afe4 <main+0x424>)
 800af90:	462b      	mov	r3, r5
 800af92:	f241 3188 	movw	r1, #5000	@ 0x1388
 800af96:	4668      	mov	r0, sp
 800af98:	f7f7 fc8a 	bl	80028b0 <chVTDoSetI>
  thread_t *tp = tqp->next;
 800af9c:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800af9e:	2308      	movs	r3, #8
 800afa0:	f885 3020 	strb.w	r3, [r5, #32]
  tqp->next             = tp->queue.next;
 800afa4:	6803      	ldr	r3, [r0, #0]
 800afa6:	6023      	str	r3, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 800afa8:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800afaa:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 800afac:	4629      	mov	r1, r5
  currp->state = CH_STATE_CURRENT;
 800afae:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800afb2:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 800afb4:	f7f5 f984 	bl	80002c0 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 800afb8:	9b03      	ldr	r3, [sp, #12]
      chVTDoResetI(&vt);
 800afba:	4668      	mov	r0, sp
    if (chVTIsArmedI(&vt)) {
 800afbc:	b10b      	cbz	r3, 800afc2 <main+0x402>
      chVTDoResetI(&vt);
 800afbe:	f7f7 fcbf 	bl	8002940 <chVTDoResetI>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f383 8811 	msr	BASEPRI, r3
}
 800afc8:	e7d4      	b.n	800af74 <main+0x3b4>
    fck = STM32_PCLK2 / config->speed;
 800afca:	f640 038b 	movw	r3, #2187	@ 0x88b
 800afce:	e7ae      	b.n	800af2e <main+0x36e>
 800afd0:	080097c1 	.word	0x080097c1
 800afd4:	20001310 	.word	0x20001310
 800afd8:	40020000 	.word	0x40020000
 800afdc:	0800d3bc 	.word	0x0800d3bc
 800afe0:	0800d3b4 	.word	0x0800d3b4
 800afe4:	08000931 	.word	0x08000931
	...

0800aff0 <chSemSignalWait.constprop.0.isra.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 800aff0:	b570      	push	{r4, r5, r6, lr}
 800aff2:	2320      	movs	r3, #32
 800aff4:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 800aff8:	4a21      	ldr	r2, [pc, #132]	@ (800b080 <chSemSignalWait.constprop.0.isra.0+0x90>)
 800affa:	6896      	ldr	r6, [r2, #8]
 800affc:	2e00      	cmp	r6, #0
 800affe:	db0a      	blt.n	800b016 <chSemSignalWait.constprop.0.isra.0+0x26>
  return firstprio(&ch.rlist.queue) > currp->prio;
 800b000:	4b20      	ldr	r3, [pc, #128]	@ (800b084 <chSemSignalWait.constprop.0.isra.0+0x94>)
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 800b006:	6892      	ldr	r2, [r2, #8]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d831      	bhi.n	800b072 <chSemSignalWait.constprop.0.isra.0+0x82>
 800b00e:	2300      	movs	r3, #0
 800b010:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800b014:	bd70      	pop	{r4, r5, r6, pc}
  thread_t *tp = tqp->next;
 800b016:	6810      	ldr	r0, [r2, #0]
  cp = (thread_t *)&ch.rlist.queue;
 800b018:	4d1a      	ldr	r5, [pc, #104]	@ (800b084 <chSemSignalWait.constprop.0.isra.0+0x94>)
  tqp->next             = tp->queue.next;
 800b01a:	6803      	ldr	r3, [r0, #0]
  } while (cp->prio >= tp->prio);
 800b01c:	6884      	ldr	r4, [r0, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 800b01e:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800b020:	2100      	movs	r1, #0
  tqp->next             = tp->queue.next;
 800b022:	6013      	str	r3, [r2, #0]
 800b024:	f880 1020 	strb.w	r1, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800b028:	462b      	mov	r3, r5
    cp = cp->queue.next;
 800b02a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800b02c:	6899      	ldr	r1, [r3, #8]
 800b02e:	42a1      	cmp	r1, r4
 800b030:	d2fb      	bcs.n	800b02a <chSemSignalWait.constprop.0.isra.0+0x3a>
  tp->queue.prev             = cp->queue.prev;
 800b032:	6859      	ldr	r1, [r3, #4]
  tp->queue.next             = cp;
 800b034:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 800b036:	6041      	str	r1, [r0, #4]
  tp->queue.prev->queue.next = tp;
 800b038:	6008      	str	r0, [r1, #0]
  cp->queue.prev             = tp;
 800b03a:	6058      	str	r0, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 800b03c:	2300      	movs	r3, #0
    thread_t *ctp = currp;
 800b03e:	69a9      	ldr	r1, [r5, #24]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 800b040:	6243      	str	r3, [r0, #36]	@ 0x24
  tp->queue.prev             = tqp->prev;
 800b042:	6853      	ldr	r3, [r2, #4]
  if (--spw->cnt < (cnt_t)0) {
 800b044:	6096      	str	r6, [r2, #8]
 800b046:	e9c1 2300 	strd	r2, r3, [r1]
  tp->queue.prev->queue.next = tp;
 800b04a:	6019      	str	r1, [r3, #0]
  thread_t *tp = tqp->next;
 800b04c:	6828      	ldr	r0, [r5, #0]
  otp->state = newstate;
 800b04e:	2305      	movs	r3, #5
 800b050:	f881 3020 	strb.w	r3, [r1, #32]
  tqp->next             = tp->queue.next;
 800b054:	6803      	ldr	r3, [r0, #0]
 800b056:	602b      	str	r3, [r5, #0]
    ctp->u.wtsemp = spw;
 800b058:	624a      	str	r2, [r1, #36]	@ 0x24
  tqp->prev                  = tp;
 800b05a:	6051      	str	r1, [r2, #4]
  tqp->next->queue.prev = (thread_t *)tqp;
 800b05c:	605d      	str	r5, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 800b05e:	2301      	movs	r3, #1
 800b060:	f880 3020 	strb.w	r3, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800b064:	61a8      	str	r0, [r5, #24]
  chSysSwitch(currp, otp);
 800b066:	f7f5 f92b 	bl	80002c0 <_port_switch>
 800b06a:	2300      	movs	r3, #0
 800b06c:	f383 8811 	msr	BASEPRI, r3
}
 800b070:	bd70      	pop	{r4, r5, r6, pc}
    chSchDoRescheduleAhead();
 800b072:	f7f8 ff6d 	bl	8003f50 <chSchDoReschedule>
 800b076:	2300      	movs	r3, #0
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	bd70      	pop	{r4, r5, r6, pc}
 800b07e:	bf00      	nop
 800b080:	20001090 	.word	0x20001090
 800b084:	200011c0 	.word	0x200011c0
	...

0800b090 <chThdWait.isra.0>:
msg_t chThdWait(thread_t *tp) {
 800b090:	b510      	push	{r4, lr}
 800b092:	2320      	movs	r3, #32
 800b094:	4604      	mov	r4, r0
 800b096:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 800b09a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b09e:	2b0f      	cmp	r3, #15
 800b0a0:	d011      	beq.n	800b0c6 <chThdWait.isra.0+0x36>
    list_insert(currp, &tp->waiting);
 800b0a2:	4b15      	ldr	r3, [pc, #84]	@ (800b0f8 <chThdWait.isra.0+0x68>)
  tp->queue.next = tlp->next;
 800b0a4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800b0a6:	6999      	ldr	r1, [r3, #24]
 800b0a8:	6008      	str	r0, [r1, #0]
  thread_t *tp = tqp->next;
 800b0aa:	6818      	ldr	r0, [r3, #0]
  tlp->next = tp;
 800b0ac:	62a1      	str	r1, [r4, #40]	@ 0x28
  otp->state = newstate;
 800b0ae:	2209      	movs	r2, #9
 800b0b0:	f881 2020 	strb.w	r2, [r1, #32]
  tqp->next             = tp->queue.next;
 800b0b4:	6802      	ldr	r2, [r0, #0]
 800b0b6:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800b0b8:	6053      	str	r3, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f880 2020 	strb.w	r2, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800b0c0:	6198      	str	r0, [r3, #24]
  chSysSwitch(currp, otp);
 800b0c2:	f7f5 f8fd 	bl	80002c0 <_port_switch>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f382 8811 	msr	BASEPRI, r2
 800b0cc:	2320      	movs	r3, #32
 800b0ce:	f383 8811 	msr	BASEPRI, r3
  tp->refs--;
 800b0d2:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800b0dc:	6a23      	ldr	r3, [r4, #32]
 800b0de:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800b0e2:	2b0f      	cmp	r3, #15
 800b0e4:	d002      	beq.n	800b0ec <chThdWait.isra.0+0x5c>
 800b0e6:	f382 8811 	msr	BASEPRI, r2
}
 800b0ea:	bd10      	pop	{r4, pc}
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f2:	f7fa bdbd 	b.w	8005c70 <chThdRelease.part.0>
 800b0f6:	bf00      	nop
 800b0f8:	200011c0 	.word	0x200011c0
